{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG","sourcesContent":["/*\n * Copyright 2022 Fluence Labs Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevel = 'info' | 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'off';\n\n/**\n * Parameters that a host side should pass to an interpreter and that necessary for execution.\n */\nexport interface RunParameters {\n    /**\n     * Peer id of a peer that start this particle.\n     */\n    initPeerId: String;\n\n    /**\n     * Peer id of a current peer.\n     */\n    currentPeerId: String;\n\n    /**\n     * Unix timestamp from a particle in milliseconds.\n     * It represents time when this particle was sent from the init peer id.\n     */\n    timestamp: number;\n\n    /**\n     * TTL set by init peer id in milliseconds.\n     */\n    ttl: number;\n}\n\n/**\n * Represents an executed host function result.\n */\nexport interface CallServiceResult {\n    /**\n     * A error code service or builtin returned, where 0 represents success.\n     */\n    retCode: number;\n\n    /**\n     * Serialized return value from the service.\n     */\n    result: string;\n}\n\n/**\n * Contains arguments of a call instruction and all other necessary information required for calling a service.\n */\nexport interface CallRequest {\n    /**\n     * Id of a service that should be called.\n     */\n    serviceId: string;\n\n    /**\n     * Name of a function from service identified by service_id that should be called.\n     */\n    functionName: string;\n\n    /**\n     * Arguments that should be passed to the service.\n     */\n    arguments: any[];\n\n    /**\n     * Security tetraplets that should be passed to the service.\n     */\n    tetraplets: SecurityTetraplet[][];\n}\n\nexport type CallRequestsArray = Array<[key: number, callRequest: CallRequest]>;\n\nexport type CallResultsArray = Array<[key: number, callServiceResult: CallServiceResult]>;\n\n/**\n * Describes a result returned at the end of the interpreter execution_step.\n */\nexport interface InterpreterResult {\n    /**\n     * A return code, where 0 means success.\n     */\n    retCode: number;\n\n    /**\n     * Contains error message if ret_code != 0\n     */\n    errorMessage: string;\n\n    /**\n     * Contains script data that should be preserved in an executor of this interpreter regardless of ret_code value.\n     */\n    data: Uint8Array;\n\n    /**\n     * Public keys of peers that should receive data.\n     */\n    nextPeerPks: Array<string>;\n\n    /**\n     * Collected parameters of all met call instructions that could be executed on a current peer.\n     */\n    callRequests: CallRequestsArray;\n}\n\n/**\n * ResolvedTriplet represents peer network location with all variables, literals and etc resolved into final string.\n * This structure contains a subset of values that SecurityTetraplet consists of.\n */\nexport interface ResolvedTriplet {\n    /**\n     * Id of a peer where corresponding value was set.\n     */\n    peer_pk: string;\n\n    /**\n     *  Id of a service that set corresponding value.\n     */\n    service_id: string;\n\n    /**\n     * Name of a function that returned corresponding value.\n     */\n    function_name: string;\n}\n\n/**\n *  Describes an origin that set corresponding value.\n */\nexport interface SecurityTetraplet extends ResolvedTriplet {\n    /**\n     * Value was produced by applying this `json_path` to the output from `call_service`.\n     */\n    json_path: string;\n}\n"]}
{"version":3,"file":"marine-js.js","sourceRoot":"","sources":["../../../src/__test__/_aqua/marine-js.ts"],"names":[],"mappings":";;;AASA,wDAA8F;AAe9F,SAAgB,gBAAgB;IAAC,cAAY;SAAZ,UAAY,EAAZ,qBAAY,EAAZ,IAAY;QAAZ,yBAAY;;IACzC,IAAA,oBAAe,EAAC,IAAI,EAAE;QAClB,gBAAgB,EAAE,UAAU;QAC5B,SAAS,EAAE;YACP,GAAG,EAAE,gBAAgB;YACrB,MAAM,EAAE;gBACJ,QAAQ,EAAE;oBACN,GAAG,EAAE,OAAO;oBACZ,MAAM,EAAE;wBACJ,GAAG,EAAE,gBAAgB;wBACrB,MAAM,EAAE;4BACJ,IAAI,EAAE;gCACF,GAAG,EAAE,QAAQ;gCACb,IAAI,EAAE,QAAQ;6BACjB;yBACJ;qBACJ;oBACD,QAAQ,EAAE;wBACN,GAAG,EAAE,kBAAkB;wBACvB,KAAK,EAAE;4BACH;gCACI,GAAG,EAAE,QAAQ;gCACb,IAAI,EAAE,QAAQ;6BACjB;yBACJ;qBACJ;iBACJ;gBACD,eAAe,EAAE;oBACb,GAAG,EAAE,OAAO;oBACZ,MAAM,EAAE;wBACJ,GAAG,EAAE,KAAK;qBACb;oBACD,QAAQ,EAAE;wBACN,GAAG,EAAE,kBAAkB;wBACvB,KAAK,EAAE;4BACH;gCACI,GAAG,EAAE,QAAQ;gCACb,IAAI,EAAE,gBAAgB;gCACtB,MAAM,EAAE;oCACJ,GAAG,EAAE;wCACD,GAAG,EAAE,QAAQ;wCACb,IAAI,EAAE,KAAK;qCACd;oCACD,GAAG,EAAE;wCACD,GAAG,EAAE,QAAQ;wCACb,IAAI,EAAE,QAAQ;qCACjB;iCACJ;6BACJ;yBACJ;qBACJ;iBACJ;aACJ;SACJ;KACJ,CAAC,CAAC;AACP,CAAC;AAvDD,4CAuDC;AAQD,SAAgB,IAAI;IAAC,cAAY;SAAZ,UAAY,EAAZ,qBAAY,EAAZ,IAAY;QAAZ,yBAAY;;IAC7B,IAAI,MAAM,GAAG,ikCAuBZ,CAAC;IACF,OAAO,IAAA,iBAAY,EACf,IAAI,EACJ;QACI,YAAY,EAAE,MAAM;QACpB,KAAK,EAAE;YACH,GAAG,EAAE,OAAO;YACZ,MAAM,EAAE;gBACJ,GAAG,EAAE,gBAAgB;gBACrB,MAAM,EAAE;oBACJ,GAAG,EAAE;wBACD,GAAG,EAAE,QAAQ;wBACb,IAAI,EAAE,QAAQ;qBACjB;iBACJ;aACJ;YACD,QAAQ,EAAE;gBACN,GAAG,EAAE,kBAAkB;gBACvB,KAAK,EAAE;oBACH;wBACI,GAAG,EAAE,QAAQ;wBACb,IAAI,EAAE,QAAQ;qBACjB;iBACJ;aACJ;SACJ;QACD,KAAK,EAAE;YACH,KAAK,EAAE,SAAS;YAChB,UAAU,EAAE,YAAY;YACxB,WAAW,EAAE,aAAa;YAC1B,WAAW,EAAE,aAAa;YAC1B,cAAc,EAAE,UAAU;YAC1B,gBAAgB,EAAE,kBAAkB;YACpC,WAAW,EAAE,OAAO;SACvB;KACJ,EACD,MAAM,CACT,CAAC;AACN,CAAC;AA9DD,oBA8DC","sourcesContent":["/**\n *\n * This file is auto-generated. Do not edit manually: changes may be erased.\n * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.\n * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues\n * Aqua version: 0.7.0-285\n *\n */\nimport { Fluence, FluencePeer } from '../../index';\nimport { CallParams, callFunction, registerService } from '../../internal/compilerSupport/v3';\n\n// Services\n\nexport interface GreetingDef {\n    greeting: (name: string, callParams: CallParams<'name'>) => string | Promise<string>;\n    greeting_record: (\n        callParams: CallParams<null>,\n    ) => { num: number; str: string } | Promise<{ num: number; str: string }>;\n}\nexport function registerGreeting(service: GreetingDef): void;\nexport function registerGreeting(serviceId: string, service: GreetingDef): void;\nexport function registerGreeting(peer: FluencePeer, service: GreetingDef): void;\nexport function registerGreeting(peer: FluencePeer, serviceId: string, service: GreetingDef): void;\n\nexport function registerGreeting(...args: any) {\n    registerService(args, {\n        defaultServiceId: 'greeting',\n        functions: {\n            tag: 'labeledProduct',\n            fields: {\n                greeting: {\n                    tag: 'arrow',\n                    domain: {\n                        tag: 'labeledProduct',\n                        fields: {\n                            name: {\n                                tag: 'scalar',\n                                name: 'string',\n                            },\n                        },\n                    },\n                    codomain: {\n                        tag: 'unlabeledProduct',\n                        items: [\n                            {\n                                tag: 'scalar',\n                                name: 'string',\n                            },\n                        ],\n                    },\n                },\n                greeting_record: {\n                    tag: 'arrow',\n                    domain: {\n                        tag: 'nil',\n                    },\n                    codomain: {\n                        tag: 'unlabeledProduct',\n                        items: [\n                            {\n                                tag: 'struct',\n                                name: 'GreetingRecord',\n                                fields: {\n                                    num: {\n                                        tag: 'scalar',\n                                        name: 'i32',\n                                    },\n                                    str: {\n                                        tag: 'scalar',\n                                        name: 'string',\n                                    },\n                                },\n                            },\n                        ],\n                    },\n                },\n            },\n        },\n    });\n}\n\n// Functions\n\nexport function call(arg: string, config?: { ttl?: number }): Promise<string>;\n\nexport function call(peer: FluencePeer, arg: string, config?: { ttl?: number }): Promise<string>;\n\nexport function call(...args: any) {\n    let script = `\n                    (xor\n                     (seq\n                      (seq\n                       (seq\n                        (seq\n                         (seq\n                          (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n                          (call %init_peer_id% (\"getDataSrv\" \"arg\") [] arg)\n                         )\n                         (call %init_peer_id% (\"greeting\" \"greeting\") [arg] res1)\n                        )\n                        (call %init_peer_id% (\"greeting\" \"greeting\") [res1] res2)\n                       )\n                       (call %init_peer_id% (\"greeting\" \"greeting\") [res2] res3)\n                      )\n                      (xor\n                       (call %init_peer_id% (\"callbackSrv\" \"response\") [res3])\n                       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n                      )\n                     )\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n                    )\n    `;\n    return callFunction(\n        args,\n        {\n            functionName: 'call',\n            arrow: {\n                tag: 'arrow',\n                domain: {\n                    tag: 'labeledProduct',\n                    fields: {\n                        arg: {\n                            tag: 'scalar',\n                            name: 'string',\n                        },\n                    },\n                },\n                codomain: {\n                    tag: 'unlabeledProduct',\n                    items: [\n                        {\n                            tag: 'scalar',\n                            name: 'string',\n                        },\n                    ],\n                },\n            },\n            names: {\n                relay: '-relay-',\n                getDataSrv: 'getDataSrv',\n                callbackSrv: 'callbackSrv',\n                responseSrv: 'callbackSrv',\n                responseFnName: 'response',\n                errorHandlingSrv: 'errorHandlingSrv',\n                errorFnName: 'error',\n            },\n        },\n        script,\n    );\n}\n"]}
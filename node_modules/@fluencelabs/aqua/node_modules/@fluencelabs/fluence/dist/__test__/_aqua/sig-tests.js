"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.callSig = exports.registerSig = exports.registerDataProvider = void 0;
var v3_1 = require("../../internal/compilerSupport/v3");
function registerDataProvider() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    (0, v3_1.registerService)(args, {
        defaultServiceId: 'data',
        functions: {
            tag: 'labeledProduct',
            fields: {
                provide_data: {
                    tag: 'arrow',
                    domain: {
                        tag: 'nil',
                    },
                    codomain: {
                        tag: 'unlabeledProduct',
                        items: [
                            {
                                tag: 'array',
                                type: {
                                    tag: 'scalar',
                                    name: 'u8',
                                },
                            },
                        ],
                    },
                },
            },
        },
    });
}
exports.registerDataProvider = registerDataProvider;
function registerSig() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    (0, v3_1.registerService)(args, {
        defaultServiceId: 'sig',
        functions: {
            tag: 'labeledProduct',
            fields: {
                get_pub_key: {
                    tag: 'arrow',
                    domain: {
                        tag: 'nil',
                    },
                    codomain: {
                        tag: 'unlabeledProduct',
                        items: [
                            {
                                tag: 'scalar',
                                name: 'string',
                            },
                        ],
                    },
                },
                sign: {
                    tag: 'arrow',
                    domain: {
                        tag: 'labeledProduct',
                        fields: {
                            data: {
                                tag: 'array',
                                type: {
                                    tag: 'scalar',
                                    name: 'u8',
                                },
                            },
                        },
                    },
                    codomain: {
                        tag: 'unlabeledProduct',
                        items: [
                            {
                                tag: 'struct',
                                name: 'SignResult',
                                fields: {
                                    error: {
                                        tag: 'option',
                                        type: {
                                            tag: 'scalar',
                                            name: 'string',
                                        },
                                    },
                                    signature: {
                                        tag: 'option',
                                        type: {
                                            tag: 'array',
                                            type: {
                                                tag: 'scalar',
                                                name: 'u8',
                                            },
                                        },
                                    },
                                    success: {
                                        tag: 'scalar',
                                        name: 'bool',
                                    },
                                },
                            },
                        ],
                    },
                },
                verify: {
                    tag: 'arrow',
                    domain: {
                        tag: 'labeledProduct',
                        fields: {
                            signature: {
                                tag: 'array',
                                type: {
                                    tag: 'scalar',
                                    name: 'u8',
                                },
                            },
                            data: {
                                tag: 'array',
                                type: {
                                    tag: 'scalar',
                                    name: 'u8',
                                },
                            },
                        },
                    },
                    codomain: {
                        tag: 'unlabeledProduct',
                        items: [
                            {
                                tag: 'scalar',
                                name: 'bool',
                            },
                        ],
                    },
                },
            },
        },
    });
}
exports.registerSig = registerSig;
function callSig() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var script = "\n                    (xor\n                     (seq\n                      (seq\n                       (seq\n                        (seq\n                         (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n                         (call %init_peer_id% (\"getDataSrv\" \"sigId\") [] sigId)\n                        )\n                        (call %init_peer_id% (\"data\" \"provide_data\") [] data)\n                       )\n                       (call %init_peer_id% (sigId \"sign\") [data] signature)\n                      )\n                      (xor\n                       (call %init_peer_id% (\"callbackSrv\" \"response\") [signature])\n                       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n                      )\n                     )\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n                    )\n    ";
    return (0, v3_1.callFunction)(args, {
        functionName: 'callSig',
        arrow: {
            tag: 'arrow',
            domain: {
                tag: 'labeledProduct',
                fields: {
                    sigId: {
                        tag: 'scalar',
                        name: 'string',
                    },
                },
            },
            codomain: {
                tag: 'unlabeledProduct',
                items: [
                    {
                        tag: 'struct',
                        name: 'SignResult',
                        fields: {
                            error: {
                                tag: 'option',
                                type: {
                                    tag: 'scalar',
                                    name: 'string',
                                },
                            },
                            signature: {
                                tag: 'option',
                                type: {
                                    tag: 'array',
                                    type: {
                                        tag: 'scalar',
                                        name: 'u8',
                                    },
                                },
                            },
                            success: {
                                tag: 'scalar',
                                name: 'bool',
                            },
                        },
                    },
                ],
            },
        },
        names: {
            relay: '-relay-',
            getDataSrv: 'getDataSrv',
            callbackSrv: 'callbackSrv',
            responseSrv: 'callbackSrv',
            responseFnName: 'response',
            errorHandlingSrv: 'errorHandlingSrv',
            errorFnName: 'error',
        },
    }, script);
}
exports.callSig = callSig;
//# sourceMappingURL=sig-tests.js.map
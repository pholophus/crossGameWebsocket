{"version":3,"file":"sig-tests.js","sourceRoot":"","sources":["../../../src/__test__/_aqua/sig-tests.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n *\n * This file is auto-generated. Do not edit manually: changes may be erased.\n * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.\n * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues\n * Aqua version: 0.7.0-285\n *\n */\nimport { Fluence, FluencePeer } from '../../index';\nimport { CallParams, callFunction, registerService } from '../../internal/compilerSupport/v3';\n\n// Services\n\nexport interface DataProviderDef {\n    provide_data: (callParams: CallParams<null>) => number[] | Promise<number[]>;\n}\nexport function registerDataProvider(service: DataProviderDef): void;\nexport function registerDataProvider(serviceId: string, service: DataProviderDef): void;\nexport function registerDataProvider(peer: FluencePeer, service: DataProviderDef): void;\nexport function registerDataProvider(peer: FluencePeer, serviceId: string, service: DataProviderDef): void;\n\nexport function registerDataProvider(...args: any) {\n    registerService(args, {\n        defaultServiceId: 'data',\n        functions: {\n            tag: 'labeledProduct',\n            fields: {\n                provide_data: {\n                    tag: 'arrow',\n                    domain: {\n                        tag: 'nil',\n                    },\n                    codomain: {\n                        tag: 'unlabeledProduct',\n                        items: [\n                            {\n                                tag: 'array',\n                                type: {\n                                    tag: 'scalar',\n                                    name: 'u8',\n                                },\n                            },\n                        ],\n                    },\n                },\n            },\n        },\n    });\n}\n\nexport interface SigDef {\n    get_pub_key: (callParams: CallParams<null>) => string | Promise<string>;\n    sign: (\n        data: number[],\n        callParams: CallParams<'data'>,\n    ) =>\n        | { error: string | null; signature: number[] | null; success: boolean }\n        | Promise<{ error: string | null; signature: number[] | null; success: boolean }>;\n    verify: (\n        signature: number[],\n        data: number[],\n        callParams: CallParams<'signature' | 'data'>,\n    ) => boolean | Promise<boolean>;\n}\nexport function registerSig(service: SigDef): void;\nexport function registerSig(serviceId: string, service: SigDef): void;\nexport function registerSig(peer: FluencePeer, service: SigDef): void;\nexport function registerSig(peer: FluencePeer, serviceId: string, service: SigDef): void;\n\nexport function registerSig(...args: any) {\n    registerService(args, {\n        defaultServiceId: 'sig',\n        functions: {\n            tag: 'labeledProduct',\n            fields: {\n                get_pub_key: {\n                    tag: 'arrow',\n                    domain: {\n                        tag: 'nil',\n                    },\n                    codomain: {\n                        tag: 'unlabeledProduct',\n                        items: [\n                            {\n                                tag: 'scalar',\n                                name: 'string',\n                            },\n                        ],\n                    },\n                },\n                sign: {\n                    tag: 'arrow',\n                    domain: {\n                        tag: 'labeledProduct',\n                        fields: {\n                            data: {\n                                tag: 'array',\n                                type: {\n                                    tag: 'scalar',\n                                    name: 'u8',\n                                },\n                            },\n                        },\n                    },\n                    codomain: {\n                        tag: 'unlabeledProduct',\n                        items: [\n                            {\n                                tag: 'struct',\n                                name: 'SignResult',\n                                fields: {\n                                    error: {\n                                        tag: 'option',\n                                        type: {\n                                            tag: 'scalar',\n                                            name: 'string',\n                                        },\n                                    },\n                                    signature: {\n                                        tag: 'option',\n                                        type: {\n                                            tag: 'array',\n                                            type: {\n                                                tag: 'scalar',\n                                                name: 'u8',\n                                            },\n                                        },\n                                    },\n                                    success: {\n                                        tag: 'scalar',\n                                        name: 'bool',\n                                    },\n                                },\n                            },\n                        ],\n                    },\n                },\n                verify: {\n                    tag: 'arrow',\n                    domain: {\n                        tag: 'labeledProduct',\n                        fields: {\n                            signature: {\n                                tag: 'array',\n                                type: {\n                                    tag: 'scalar',\n                                    name: 'u8',\n                                },\n                            },\n                            data: {\n                                tag: 'array',\n                                type: {\n                                    tag: 'scalar',\n                                    name: 'u8',\n                                },\n                            },\n                        },\n                    },\n                    codomain: {\n                        tag: 'unlabeledProduct',\n                        items: [\n                            {\n                                tag: 'scalar',\n                                name: 'bool',\n                            },\n                        ],\n                    },\n                },\n            },\n        },\n    });\n}\n\n// Functions\n\nexport type CallSigResult = { error: string | null; signature: number[] | null; success: boolean };\nexport function callSig(sigId: string, config?: { ttl?: number }): Promise<CallSigResult>;\n\nexport function callSig(peer: FluencePeer, sigId: string, config?: { ttl?: number }): Promise<CallSigResult>;\n\nexport function callSig(...args: any) {\n    let script = `\n                    (xor\n                     (seq\n                      (seq\n                       (seq\n                        (seq\n                         (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n                         (call %init_peer_id% (\"getDataSrv\" \"sigId\") [] sigId)\n                        )\n                        (call %init_peer_id% (\"data\" \"provide_data\") [] data)\n                       )\n                       (call %init_peer_id% (sigId \"sign\") [data] signature)\n                      )\n                      (xor\n                       (call %init_peer_id% (\"callbackSrv\" \"response\") [signature])\n                       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n                      )\n                     )\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n                    )\n    `;\n    return callFunction(\n        args,\n        {\n            functionName: 'callSig',\n            arrow: {\n                tag: 'arrow',\n                domain: {\n                    tag: 'labeledProduct',\n                    fields: {\n                        sigId: {\n                            tag: 'scalar',\n                            name: 'string',\n                        },\n                    },\n                },\n                codomain: {\n                    tag: 'unlabeledProduct',\n                    items: [\n                        {\n                            tag: 'struct',\n                            name: 'SignResult',\n                            fields: {\n                                error: {\n                                    tag: 'option',\n                                    type: {\n                                        tag: 'scalar',\n                                        name: 'string',\n                                    },\n                                },\n                                signature: {\n                                    tag: 'option',\n                                    type: {\n                                        tag: 'array',\n                                        type: {\n                                            tag: 'scalar',\n                                            name: 'u8',\n                                        },\n                                    },\n                                },\n                                success: {\n                                    tag: 'scalar',\n                                    name: 'bool',\n                                },\n                            },\n                        },\n                    ],\n                },\n            },\n            names: {\n                relay: '-relay-',\n                getDataSrv: 'getDataSrv',\n                callbackSrv: 'callbackSrv',\n                responseSrv: 'callbackSrv',\n                responseFnName: 'response',\n                errorHandlingSrv: 'errorHandlingSrv',\n                errorFnName: 'error',\n            },\n        },\n        script,\n    );\n}\n"]}
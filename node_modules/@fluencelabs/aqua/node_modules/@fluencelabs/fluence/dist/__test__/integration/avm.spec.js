"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../../index");
var utils_1 = require("../../internal/utils");
var util_1 = require("../util");
var peer;
describe('Avm spec', function () {
    beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    peer = new index_1.FluencePeer();
                    return [4 /*yield*/, peer.start()];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    afterEach(function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, peer.stop()];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('Simple call', function () { return __awaiter(void 0, void 0, void 0, function () {
        var res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, new Promise(function (resolve, reject) {
                        var script = "\n                (call %init_peer_id% (\"print\" \"print\") [\"1\"])\n            ";
                        var particle = peer.internals.createNewParticle(script);
                        if (particle instanceof Error) {
                            return reject(particle.message);
                        }
                        (0, util_1.registerHandlersHelper)(peer, particle, {
                            print: {
                                print: function (args) {
                                    var _a = __read(args, 1), res = _a[0];
                                    resolve(res);
                                },
                            },
                        });
                        peer.internals.initiateParticle(particle, (0, utils_1.handleTimeout)(reject));
                    })];
                case 1:
                    res = _a.sent();
                    expect(res).toBe('1');
                    return [2 /*return*/];
            }
        });
    }); });
    it('Par call', function () { return __awaiter(void 0, void 0, void 0, function () {
        var res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, new Promise(function (resolve, reject) {
                        var res = [];
                        var script = "\n                (seq\n                    (par\n                        (call %init_peer_id% (\"print\" \"print\") [\"1\"])\n                        (null)\n                    )\n                    (call %init_peer_id% (\"print\" \"print\") [\"2\"])\n                )\n            ";
                        var particle = peer.internals.createNewParticle(script);
                        if (particle instanceof Error) {
                            return reject(particle.message);
                        }
                        (0, util_1.registerHandlersHelper)(peer, particle, {
                            print: {
                                print: function (args) {
                                    res.push(args[0]);
                                    if (res.length == 2) {
                                        resolve(res);
                                    }
                                },
                            },
                        });
                        peer.internals.initiateParticle(particle, (0, utils_1.handleTimeout)(reject));
                    })];
                case 1:
                    res = _a.sent();
                    expect(res).toStrictEqual(['1', '2']);
                    return [2 /*return*/];
            }
        });
    }); });
    it('Timeout in par call: race', function () { return __awaiter(void 0, void 0, void 0, function () {
        var res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, new Promise(function (resolve, reject) {
                        var script = "\n                (seq\n                    (call %init_peer_id% (\"op\" \"identity\") [\"slow_result\"] arg) \n                    (seq\n                        (par\n                            (call %init_peer_id% (\"peer\" \"timeout\") [1000 arg] $result)\n                            (call %init_peer_id% (\"op\" \"identity\") [\"fast_result\"] $result)\n                        )\n                        (call %init_peer_id% (\"return\" \"return\") [$result.$[0]]) \n                    )\n                )\n            ";
                        var particle = peer.internals.createNewParticle(script);
                        if (particle instanceof Error) {
                            return reject(particle.message);
                        }
                        (0, util_1.registerHandlersHelper)(peer, particle, {
                            return: {
                                return: function (args) {
                                    resolve(args[0]);
                                },
                            },
                        });
                        peer.internals.initiateParticle(particle, (0, utils_1.handleTimeout)(reject));
                    })];
                case 1:
                    res = _a.sent();
                    expect(res).toBe('fast_result');
                    return [2 /*return*/];
            }
        });
    }); });
    it('Timeout in par call: wait', function () { return __awaiter(void 0, void 0, void 0, function () {
        var res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, new Promise(function (resolve, reject) {
                        var script = "\n                (seq\n                    (call %init_peer_id% (\"op\" \"identity\") [\"timeout_msg\"] arg) \n                    (seq\n                        (seq\n                            (par\n                                (call %init_peer_id% (\"peer\" \"timeout\") [1000 arg] $ok_or_err)\n                                (call \"invalid_peer\" (\"op\" \"identity\") [\"never\"] $ok_or_err) \n                            )\n                            (xor\n                                (match $ok_or_err.$[0] \"timeout_msg\"\n                                    (ap \"failed_with_timeout\" $result)\n                                )\n                                (ap \"impossible happened\" $result)\n                            )\n                        )\n                        (call %init_peer_id% (\"return\" \"return\") [$result.$[0]]) \n                    )\n                )\n            ";
                        var particle = peer.internals.createNewParticle(script);
                        if (particle instanceof Error) {
                            return reject(particle.message);
                        }
                        (0, util_1.registerHandlersHelper)(peer, particle, {
                            return: {
                                return: function (args) {
                                    resolve(args[0]);
                                },
                            },
                        });
                        peer.internals.initiateParticle(particle, (0, utils_1.handleTimeout)(reject));
                    })];
                case 1:
                    res = _a.sent();
                    expect(res).toBe('failed_with_timeout');
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=avm.spec.js.map
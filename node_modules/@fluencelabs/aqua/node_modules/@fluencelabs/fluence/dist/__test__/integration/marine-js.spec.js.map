{"version":3,"file":"marine-js.spec.js","sourceRoot":"","sources":["../../../src/__test__/integration/marine-js.spec.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAmD;AACnD,0CAAoB;AACpB,gDAA0C;AAC1C,gEAAuD;AAEvD,QAAQ,CAAC,iBAAiB,EAAE;IACxB,UAAU,CAAC;;;wBACP,qBAAM,eAAO,CAAC,KAAK,EAAE,EAAA;;oBAArB,SAAqB,CAAC;;;;SACzB,CAAC,CAAC;IAEH,SAAS,CAAC;;;wBACN,qBAAM,eAAO,CAAC,IAAI,EAAE,EAAA;;oBAApB,SAAoB,CAAC;;;;SACxB,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE;;;;wBAE1B,qBAAM,YAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,GAAG,gBAAgB,CAAC,EAAA;;oBAA/D,IAAI,GAAG,SAAwD;oBACrE,qBAAM,eAAO,CAAC,qBAAqB,CAAC,IAAI,EAAE,UAAU,CAAC,EAAA;;oBAArD,SAAqD,CAAC;oBAG1C,qBAAM,IAAA,gBAAI,EAAC,MAAM,CAAC,EAAA;;oBAAxB,GAAG,GAAG,SAAkB;oBAE9B,SAAS;oBACT,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;;;;SACxC,CAAC,CAAC;IAEH,0EAA0E;IAC1E,oDAAoD;IACpD,EAAE,CAAC,IAAI,CAAC,qBAAqB,EAAE;;;;;oBAErB,IAAI,GAAG,IAAI,mBAAW,EAAE,CAAC;;;;oBAE3B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,kBAAkB,CAAC,cAAO,CAAC,CAAC,CAAC;oBAEhE,qBAAM,IAAI,CAAC,KAAK,CAAC;4BACb,KAAK,EAAE;gCACH,cAAc,EAAE,OAAO;6BAC1B;yBACJ,CAAC,EAAA;;oBAJF,SAIE,CAAC;oBACU,qBAAM,YAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,GAAG,uBAAuB,CAAC,EAAA;;oBAAtE,IAAI,GAAG,SAA+D;oBAC5E,qBAAM,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,UAAU,CAAC,EAAA;;oBAAlD,SAAkD,CAAC;oBAEnD,MAAM;oBACN,qBAAM,IAAA,6BAAS,EAAC,IAAI,EAAE,UAAU,CAAC,EAAA;;oBADjC,MAAM;oBACN,SAAiC,CAAC;oBAElC,SAAS;oBACT,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;oBACxC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,uBAAuB,CAAC,CAAC,EAAE,mCAAmC,CAAC,CAAC;;wBAErF,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;oBAAjB,SAAiB,CAAC;;;;;SAEzB,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { Fluence, FluencePeer } from '../../index';\nimport fs from 'fs';\nimport { call } from '../_aqua/marine-js';\nimport { call_info } from '../_aqua/marine-js-logging';\n\ndescribe('Marine js tests', () => {\n    beforeEach(async () => {\n        await Fluence.start();\n    });\n\n    afterEach(async () => {\n        await Fluence.stop();\n    });\n\n    it('should call marine service correctly', async () => {\n        // arrange\n        const wasm = await fs.promises.readFile(__dirname + '/greeting.wasm');\n        await Fluence.registerMarineService(wasm, 'greeting');\n\n        // act\n        const res = await call('test');\n\n        // assert\n        expect(res).toBe('Hi, Hi, Hi, test');\n    });\n\n    // TODO: console printouts are happening inside web-worker\\worker threads.\n    // Find a way to mock functions in background thread\n    it.skip('logging should work', async () => {\n        // arrange\n        const peer = new FluencePeer();\n        try {\n            jest.spyOn(global.console, 'info').mockImplementation(() => {});\n\n            await peer.start({\n                debug: {\n                    marineLogLevel: 'debug',\n                },\n            });\n            const wasm = await fs.promises.readFile(__dirname + '/greeting-record.wasm');\n            await peer.registerMarineService(wasm, 'greeting');\n\n            // act\n            await call_info(peer, 'greeting');\n\n            // assert\n            expect(console.info).toBeCalledTimes(1);\n            expect(console.info).toHaveBeenNthCalledWith(1, '[marine service \"greeting\"]: info');\n        } finally {\n            await peer.stop();\n        }\n    });\n});\n"]}
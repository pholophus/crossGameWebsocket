{"version":3,"file":"peer.spec.js","sourceRoot":"","sources":["../../../src/__test__/integration/peer.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Multiaddr } from 'multiaddr';\n\nimport { nodes } from '../connection';\nimport { FluencePeer } from '../../index';\nimport { checkConnection, doNothing, handleTimeout } from '../../internal/utils';\nimport { registerHandlersHelper } from '../util';\n\nlet peer: FluencePeer;\n\ndescribe('Typescript usage suite', () => {\n    afterEach(async () => {\n        if (peer) {\n            await peer.stop();\n        }\n    });\n\n    beforeEach(() => {\n        peer = new FluencePeer();\n    });\n\n    it('should perform test for FluencePeer class correctly', () => {\n        // arrange\n        const number = 1;\n        const object = { str: 'Hello!' };\n        const undefinedVal = undefined;\n\n        // act\n        const isPeerPeer = FluencePeer.isInstance(peer);\n        const isNumberPeer = FluencePeer.isInstance(number);\n        const isObjectPeer = FluencePeer.isInstance(object);\n        const isUndefinedPeer = FluencePeer.isInstance(undefinedVal);\n\n        // act\n        expect(isPeerPeer).toBe(true);\n        expect(isNumberPeer).toBe(false);\n        expect(isObjectPeer).toBe(false);\n        expect(isUndefinedPeer).toBe(false);\n    });\n\n    describe('Should expose correct peer status', () => {\n        it('Should expose correct status for uninitialized peer', () => {\n            const status = peer.getStatus();\n\n            expect(status.isConnected).toBe(false);\n            expect(status.isInitialized).toBe(false);\n            expect(status.peerId).toBe(null);\n            expect(status.relayPeerId).toBe(null);\n        });\n\n        it('Should expose correct status for initialized but not connected peer', async () => {\n            // arrange\n            await peer.start();\n\n            // act\n            const status = peer.getStatus();\n\n            // assert\n            expect(status.isConnected).toBe(false);\n            expect(status.isInitialized).toBe(true);\n            expect(status.peerId).not.toBe(null);\n            expect(status.relayPeerId).toBe(null);\n        });\n\n        it('Should expose correct status for connected peer', async () => {\n            // arrange\n            await peer.start({ connectTo: nodes[0] });\n\n            // act\n            const status = peer.getStatus();\n\n            // assert\n            expect(status.isConnected).toBe(true);\n            expect(status.isInitialized).toBe(true);\n            expect(status.peerId).not.toBe(null);\n            expect(status.relayPeerId).not.toBe(null);\n        });\n    });\n\n    it('should make a call through network', async () => {\n        // arrange\n        await peer.start({ connectTo: nodes[0] });\n\n        const result = await new Promise<string[]>((resolve, reject) => {\n            const script = `\n    (xor\n        (seq\n            (call %init_peer_id% (\"load\" \"relay\") [] init_relay)\n            (seq\n                (call init_relay (\"op\" \"identity\") [\"hello world!\"] result)\n                (call %init_peer_id% (\"callback\" \"callback\") [result])\n            )\n        )\n        (seq \n            (call init_relay (\"op\" \"identity\") [])\n            (call %init_peer_id% (\"callback\" \"error\") [%last_error%])\n        )\n    )`;\n            const particle = peer.internals.createNewParticle(script);\n\n            if (particle instanceof Error) {\n                return reject(particle.message);\n            }\n\n            registerHandlersHelper(peer, particle, {\n                load: {\n                    relay: () => {\n                        return peer.getStatus().relayPeerId;\n                    },\n                },\n                callback: {\n                    callback: (args: any) => {\n                        const [val] = args;\n                        resolve(val);\n                    },\n                    error: (args: any) => {\n                        const [error] = args;\n                        reject(error);\n                    },\n                },\n            });\n\n            peer.internals.initiateParticle(particle, handleTimeout(reject));\n        });\n\n        expect(result).toBe('hello world!');\n    });\n\n    it('check connection should work', async function () {\n        await peer.start({ connectTo: nodes[0] });\n\n        const isConnected = await checkConnection(peer);\n\n        expect(isConnected).toEqual(true);\n    });\n\n    it('check connection should work with ttl', async function () {\n        await peer.start({ connectTo: nodes[0] });\n\n        const isConnected = await checkConnection(peer, 10000);\n\n        expect(isConnected).toEqual(true);\n    });\n\n    it('two clients should work inside the same time browser', async () => {\n        const peer1 = new FluencePeer();\n        await peer1.start({ connectTo: nodes[0] });\n        const peer2 = new FluencePeer();\n        await peer2.start({ connectTo: nodes[0] });\n\n        const res = new Promise((resolve) => {\n            peer2.internals.regHandler.common('test', 'test', (req) => {\n                resolve(req.args[0]);\n                return {\n                    result: {},\n                    retCode: 0,\n                };\n            });\n        });\n\n        const script = `\n            (seq\n                (call \"${peer1.getStatus().relayPeerId}\" (\"op\" \"identity\") [])\n                (call \"${peer2.getStatus().peerId}\" (\"test\" \"test\") [\"test\"])\n            )\n        `;\n        const particle = peer1.internals.createNewParticle(script);\n\n        if (particle instanceof Error) {\n            throw particle;\n        }\n\n        peer1.internals.initiateParticle(particle, doNothing);\n\n        expect(await res).toEqual('test');\n\n        await peer1.stop();\n        await peer2.stop();\n    });\n\n    describe('should make connection to network', () => {\n        it('address as string', async () => {\n            await peer.start({ connectTo: nodes[0].multiaddr });\n            const isConnected = await checkConnection(peer);\n\n            expect(isConnected).toBeTruthy();\n        });\n\n        it('address as multiaddr', async () => {\n            await peer.start({ connectTo: new Multiaddr(nodes[0].multiaddr) });\n            const isConnected = await checkConnection(peer);\n\n            expect(isConnected).toBeTruthy();\n        });\n\n        it('address as node', async () => {\n            await peer.start({ connectTo: nodes[0] });\n            const isConnected = await checkConnection(peer);\n\n            expect(isConnected).toBeTruthy();\n        });\n\n        it('With connection options: dialTimeout', async () => {\n            await peer.start({ connectTo: nodes[0], dialTimeoutMs: 100000 });\n            const isConnected = await checkConnection(peer);\n\n            expect(isConnected).toBeTruthy();\n        });\n\n        it('With connection options: skipCheckConnection', async () => {\n            await peer.start({ connectTo: nodes[0], skipCheckConnection: true });\n            const isConnected = await checkConnection(peer);\n\n            expect(isConnected).toBeTruthy();\n        });\n\n        it('With connection options: checkConnectionTTL', async () => {\n            await peer.start({ connectTo: nodes[0], checkConnectionTimeoutMs: 1000 });\n            const isConnected = await checkConnection(peer);\n\n            expect(isConnected).toBeTruthy();\n        });\n\n        it('With connection options: defaultTTL', async () => {\n            await peer.start({ connectTo: nodes[0], defaultTtlMs: 1 });\n            const isConnected = await checkConnection(peer);\n\n            expect(isConnected).toBeFalsy();\n        });\n    });\n\n    it('Should successfully call identity on local peer', async function () {\n        await peer.start();\n\n        const res = await new Promise<string>((resolve, reject) => {\n            const script = `\n            (seq\n                (call %init_peer_id% (\"op\" \"identity\") [\"test\"] res)\n                (call %init_peer_id% (\"callback\" \"callback\") [res])\n            )\n            `;\n            const particle = peer.internals.createNewParticle(script);\n\n            if (particle instanceof Error) {\n                return reject(particle.message);\n            }\n\n            registerHandlersHelper(peer, particle, {\n                callback: {\n                    callback: async (args: any) => {\n                        const [res] = args;\n                        resolve(res);\n                    },\n                },\n            });\n\n            peer.internals.initiateParticle(particle, handleTimeout(reject));\n        });\n\n        expect(res).toBe('test');\n    });\n\n    it('Should throw correct message when calling non existing local service', async function () {\n        await peer.start({ connectTo: nodes[0] });\n\n        const res = callIncorrectService(peer);\n\n        await expect(res).rejects.toMatchObject({\n            message: expect.stringContaining(\n                `No handler has been registered for serviceId='incorrect' fnName='incorrect' args='[]'\\\"'`,\n            ),\n            // instruction: 'call %init_peer_id% (\"incorrect\" \"incorrect\") [] res',\n        });\n    });\n\n    it('Should not crash if undefined is passed as a variable', async () => {\n        await peer.start();\n\n        const res = await new Promise<any>((resolve, reject) => {\n            const script = `\n        (seq\n            (call %init_peer_id% (\"load\" \"arg\") [] arg)\n            (seq\n                (call %init_peer_id% (\"op\" \"identity\") [arg] res)\n                (call %init_peer_id% (\"callback\" \"callback\") [res])\n            )\n        )`;\n            const particle = peer.internals.createNewParticle(script);\n\n            if (particle instanceof Error) {\n                return reject(particle.message);\n            }\n\n            registerHandlersHelper(peer, particle, {\n                load: {\n                    arg: () => undefined,\n                },\n                callback: {\n                    callback: (args: any) => {\n                        const [val] = args;\n                        resolve(val);\n                    },\n                    error: (args: any) => {\n                        const [error] = args;\n                        reject(error);\n                    },\n                },\n            });\n\n            peer.internals.initiateParticle(particle, handleTimeout(reject));\n        });\n\n        expect(res).toBe(null);\n    });\n\n    it('Should not crash if an error ocurred in user-defined handler', async () => {\n        await peer.start();\n\n        const promise = new Promise<any>((_resolve, reject) => {\n            const script = `\n        (xor\n            (call %init_peer_id% (\"load\" \"arg\") [] arg)\n            (call %init_peer_id% (\"callback\" \"error\") [%last_error%])\n        )`;\n            const particle = peer.internals.createNewParticle(script);\n\n            if (particle instanceof Error) {\n                return reject(particle.message);\n            }\n\n            registerHandlersHelper(peer, particle, {\n                load: {\n                    arg: () => {\n                        throw new Error('my super custom error message');\n                    },\n                },\n                callback: {\n                    error: (args: any) => {\n                        const [error] = args;\n                        reject(error);\n                    },\n                },\n            });\n\n            peer.internals.initiateParticle(particle, handleTimeout(reject));\n        });\n\n        await expect(promise).rejects.toMatchObject({\n            message: expect.stringContaining('my super custom error message'),\n        });\n    });\n\n    it('Should return error if particle is created on a stopped peer', async () => {\n        await peer.stop();\n        const particle = peer.internals.createNewParticle(`(null)`);\n\n        expect(particle instanceof Error).toBe(true);\n    });\n\n    it.skip('Should throw correct error when the client tries to send a particle not to the relay', async () => {\n        await peer.start({ connectTo: nodes[0] });\n\n        const promise = new Promise((resolve, reject) => {\n            const script = `\n    (xor\n        (call \"incorrect_peer_id\" (\"any\" \"service\") [])\n        (call %init_peer_id% (\"callback\" \"error\") [%last_error%])\n    )`;\n            const particle = peer.internals.createNewParticle(script);\n\n            if (particle instanceof Error) {\n                return reject(particle.message);\n            }\n\n            registerHandlersHelper(peer, particle, {\n                callback: {\n                    error: (args: any) => {\n                        const [error] = args;\n                        reject(error);\n                    },\n                },\n            });\n\n            peer.internals.initiateParticle(particle, doNothing);\n        });\n\n        await expect(promise).rejects.toMatch(\n            'Particle is expected to be sent to only the single peer (relay which client is connected to)',\n        );\n    });\n});\n\nasync function callIncorrectService(peer: FluencePeer): Promise<string[]> {\n    return new Promise<any[]>((resolve, reject) => {\n        const script = `\n    (xor\n        (call %init_peer_id% (\"incorrect\" \"incorrect\") [] res)\n        (call %init_peer_id% (\"callback\" \"error\") [%last_error%])\n    )`;\n        const particle = peer.internals.createNewParticle(script);\n\n        if (particle instanceof Error) {\n            return reject(particle.message);\n        }\n\n        registerHandlersHelper(peer, particle, {\n            callback: {\n                callback: (args: any) => {\n                    resolve(args);\n                },\n                error: (args: any) => {\n                    const [error] = args;\n                    reject(error);\n                },\n            },\n        });\n\n        peer.internals.initiateParticle(particle, handleTimeout(reject));\n    });\n}\n"]}
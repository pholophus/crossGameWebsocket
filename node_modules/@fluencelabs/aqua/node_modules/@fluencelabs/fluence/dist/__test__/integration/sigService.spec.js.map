{"version":3,"file":"sigService.spec.js","sourceRoot":"","sources":["../../../src/__test__/integration/sigService.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Fluence, FluencePeer, KeyPair, setLogLevel } from '../../index';\nimport { allowServiceFn, Sig } from '../../services';\nimport { registerSig, registerDataProvider, callSig } from '../_aqua/sig-tests';\n\nlet peer: FluencePeer;\n\ndescribe('Sig service test suite', () => {\n    afterEach(async () => {\n        if (peer) {\n            await peer.stop();\n        }\n    });\n\n    beforeEach(async () => {\n        peer = new FluencePeer();\n        await peer.start();\n    });\n\n    it('Use custom sig service, success path', async () => {\n        const customKeyPair = await KeyPair.randomEd25519();\n        const customSig = new Sig(customKeyPair);\n        const data = [1, 2, 3, 4, 5];\n\n        registerSig(peer, 'CustomSig', customSig);\n\n        registerDataProvider(peer, {\n            provide_data: () => {\n                return data;\n            },\n        });\n\n        customSig.securityGuard = allowServiceFn('data', 'provide_data');\n\n        const result = await callSig(peer, 'CustomSig');\n\n        expect(result.success).toBe(true);\n        const isSigCorrect = await customSig.verify(result.signature as number[], data);\n        expect(isSigCorrect).toBe(true);\n    });\n\n    it('Use custom sig service, fail path', async () => {\n        const customKeyPair = await KeyPair.randomEd25519();\n        const customSig = new Sig(customKeyPair);\n        const data = [1, 2, 3, 4, 5];\n\n        registerSig(peer, 'CustomSig', customSig);\n\n        registerDataProvider(peer, {\n            provide_data: () => {\n                return data;\n            },\n        });\n\n        customSig.securityGuard = allowServiceFn('wrong', 'wrong');\n\n        const result = await callSig(peer, 'CustomSig');\n    });\n\n    it('Default sig service should be resolvable by peer id', async () => {\n        const sig = peer.getServices().sig;\n\n        const data = [1, 2, 3, 4, 5];\n        registerDataProvider(peer, {\n            provide_data: () => {\n                return data;\n            },\n        });\n\n        const callAsSigRes = await callSig(peer, 'sig');\n        const callAsPeerIdRes = await callSig(peer, peer.getStatus().peerId as string);\n\n        expect(callAsSigRes.success).toBe(false);\n        expect(callAsPeerIdRes.success).toBe(false);\n\n        sig.securityGuard = () => true;\n\n        const callAsSigResAfterGuardChange = await callSig(peer, 'sig');\n        const callAsPeerIdResAfterGuardChange = await callSig(peer, peer.getStatus().peerId as string);\n\n        expect(callAsSigResAfterGuardChange.success).toBe(true);\n        expect(callAsPeerIdResAfterGuardChange.success).toBe(true);\n\n        const isValid = await sig.verify(callAsSigResAfterGuardChange.signature as number[], data);\n\n        expect(isValid).toBe(true);\n    });\n});\n"]}
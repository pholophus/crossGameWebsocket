{"version":3,"file":"v3.spec.js","sourceRoot":"","sources":["../../../../src/__test__/unit/compiler/v3.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import each from 'jest-each';\nimport { aqua2ts, ts2aqua } from '../../../internal/compilerSupport/v3impl/conversions';\n\nconst i32 = { tag: 'scalar', name: 'i32' } as const;\n\nconst opt_i32 = {\n    tag: 'option',\n    type: i32,\n} as const;\n\nconst array_i32 = { tag: 'array', type: i32 };\n\nconst array_opt_i32 = { tag: 'array', type: opt_i32 };\n\nconst labeledProduct = {\n    tag: 'labeledProduct',\n    fields: {\n        a: i32,\n        b: opt_i32,\n        c: array_opt_i32,\n    },\n};\n\nconst struct = {\n    tag: 'struct',\n    name: 'someStruct',\n    fields: {\n        a: i32,\n        b: opt_i32,\n        c: array_opt_i32,\n    },\n};\n\nconst structs = [\n    {\n        aqua: {\n            a: 1,\n            b: [2],\n            c: [[1], [2]],\n        },\n\n        ts: {\n            a: 1,\n            b: 2,\n            c: [1, 2],\n        },\n    },\n    {\n        aqua: {\n            a: 1,\n            b: [],\n            c: [[], [2]],\n        },\n\n        ts: {\n            a: 1,\n            b: null,\n            c: [null, 2],\n        },\n    },\n];\n\nconst labeledProduct2 = {\n    tag: 'labeledProduct',\n    fields: {\n        x: i32,\n        y: i32,\n    },\n};\n\nconst nestedLabeledProductType = {\n    tag: 'labeledProduct',\n    fields: {\n        a: labeledProduct2,\n        b: {\n            tag: 'option',\n            type: labeledProduct2,\n        },\n        c: {\n            tag: 'array',\n            type: labeledProduct2,\n        },\n    },\n};\n\nconst nestedStructs = [\n    {\n        aqua: {\n            a: {\n                x: 1,\n                y: 2,\n            },\n            b: [\n                {\n                    x: 1,\n                    y: 2,\n                },\n            ],\n            c: [\n                {\n                    x: 1,\n                    y: 2,\n                },\n                {\n                    x: 3,\n                    y: 4,\n                },\n            ],\n        },\n\n        ts: {\n            a: {\n                x: 1,\n                y: 2,\n            },\n            b: {\n                x: 1,\n                y: 2,\n            },\n\n            c: [\n                {\n                    x: 1,\n                    y: 2,\n                },\n                {\n                    x: 3,\n                    y: 4,\n                },\n            ],\n        },\n    },\n    {\n        aqua: {\n            a: {\n                x: 1,\n                y: 2,\n            },\n            b: [],\n            c: [],\n        },\n\n        ts: {\n            a: {\n                x: 1,\n                y: 2,\n            },\n            b: null,\n            c: [],\n        },\n    },\n];\n\ndescribe('Conversion from aqua to typescript', () => {\n    each`\n    aqua                            | ts                       | type               \n    ${1}                            | ${1}                     | ${i32}             \n    ${[]}                           | ${null}                  | ${opt_i32}         \n    ${[1]}                          | ${1}                     | ${opt_i32}         \n    ${[1, 2, 3]}                    | ${[1, 2, 3]}             | ${array_i32}       \n    ${[]}                           | ${[]}                    | ${array_i32}       \n    ${[[1]]}                        | ${[1]}                   | ${array_opt_i32}   \n    ${[[]]}                         | ${[null]}                | ${array_opt_i32}   \n    ${[[1], [2]]}                   | ${[1, 2]}                | ${array_opt_i32}   \n    ${[[], [2]]}                    | ${[null, 2]}             | ${array_opt_i32}   \n    ${structs[0].aqua}              | ${structs[0].ts}         | ${labeledProduct}  \n    ${structs[1].aqua}              | ${structs[1].ts}         | ${labeledProduct}  \n    ${structs[0].aqua}              | ${structs[0].ts}         | ${struct}          \n    ${structs[1].aqua}              | ${structs[1].ts}         | ${struct}          \n    ${nestedStructs[0].aqua}        | ${nestedStructs[0].ts}   | ${nestedLabeledProductType}          \n    ${nestedStructs[1].aqua}        | ${nestedStructs[1].ts}   | ${nestedLabeledProductType}          \n`.test(\n        //\n        'aqua: $aqua. ts: $ts. type: $type',\n        async ({ aqua, ts, type }) => {\n            // arrange\n\n            // act\n            const tsFromAqua = aqua2ts(aqua, type);\n            const aquaFromTs = ts2aqua(ts, type);\n\n            // assert\n            expect(tsFromAqua).toStrictEqual(ts);\n            expect(aquaFromTs).toStrictEqual(aqua);\n        },\n    );\n});\n\ndescribe('Conversion corner cases', () => {\n    it('Should accept undefined in object entry', () => {\n        // arrange\n        const type = {\n            tag: 'labeledProduct',\n            fields: {\n                x: opt_i32,\n                y: opt_i32,\n            },\n        } as const;\n\n        const valueInTs = {\n            x: 1,\n        };\n        const valueInAqua = {\n            x: [1],\n            y: [],\n        };\n\n        // act\n        const aqua = ts2aqua(valueInTs, type);\n        const ts = aqua2ts(valueInAqua, type);\n\n        // assert\n        expect(aqua).toStrictEqual({\n            x: [1],\n            y: [],\n        });\n\n        expect(ts).toStrictEqual({\n            x: 1,\n            y: null,\n        });\n    });\n});\n"]}
/// <reference types="node" />
import { LogLevelDesc } from 'loglevel';
import { FluencePeer, PeerConfig } from './internal/FluencePeer';
export { PeerStatus } from './internal/FluencePeer';
export { KeyPair } from './internal/KeyPair';
export { FluencePeer, PeerConfig } from './internal/FluencePeer';
export { MarineLoglevel as AvmLoglevel } from './internal/utils';
export { PeerIdB58, CallParams } from './internal/commonTypes';
export { loadWasmFromFileSystem, loadWasmFromNpmPackage, loadWasmFromServer } from '@fluencelabs/marine-js';
export declare const setLogLevel: (level: LogLevelDesc) => void;
/**
 * Public interface to Fluence JS
 */
export declare const Fluence: {
    /**
     * Initializes the default peer: starts the Aqua VM, initializes the default call service handlers
     * and (optionally) connect to the Fluence network
     * @param config - object specifying peer configuration
     */
    start: (config?: PeerConfig | undefined) => Promise<void>;
    /**
     * Un-initializes the default peer: stops all the underlying workflows, stops the Aqua VM
     * and disconnects from the Fluence network
     */
    stop: () => Promise<void>;
    /**
     * Get the default peer's status
     * @returns Default peer's status
     */
    getStatus: () => import("./internal/FluencePeer").PeerStatus;
    /**
     * Get the default peer instance
     * @returns the default peer instance
     */
    getPeer: () => FluencePeer;
    /**
     * Registers marine service within the default Fluence peer from wasm file.
     * Following helper functions can be used to load wasm files:
     * * loadWasmFromFileSystem
     * * loadWasmFromNpmPackage
     * * loadWasmFromServer
     * @param wasm - buffer with the wasm file for service
     * @param serviceId - the service id by which the service can be accessed in aqua
     */
    registerMarineService: (wasm: SharedArrayBuffer | Buffer, serviceId: string) => Promise<void>;
    /**
     * Removes the specified marine service from the default Fluence peer
     * @param serviceId - the service id to remove
     */
    removeMarineService: (serviceId: string) => void;
};
//# sourceMappingURL=index.d.ts.map
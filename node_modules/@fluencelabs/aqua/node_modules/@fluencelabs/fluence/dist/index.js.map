{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;AAEH,sDAA6C;AAE7C,sDAAiE;AAGjE,8CAA6C;AAApC,kGAAA,OAAO,OAAA;AAChB,sDAAiE;AAAxD,0GAAA,WAAW,OAAA;AAGpB,oDAA4G;AAAnG,mHAAA,sBAAsB,OAAA;AAAE,mHAAA,sBAAsB,OAAA;AAAE,+GAAA,kBAAkB,OAAA;AAEpE,IAAM,WAAW,GAAG,UAAC,KAAmB;IAC3C,kBAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACxB,CAAC,CAAC;AAFW,QAAA,WAAW,eAEtB;AAEF,kBAAG,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;AAE5B,IAAM,WAAW,GAAG,IAAI,yBAAW,EAAE,CAAC;AAEtC;;GAEG;AACU,QAAA,OAAO,GAAG;IACnB;;;;OAIG;IACH,KAAK,EAAE,UAAC,MAAmB;QACvB,OAAO,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACrC,CAAC;IAED;;;OAGG;IACH,IAAI,EAAE;QACF,OAAO,WAAW,CAAC,IAAI,EAAE,CAAC;IAC9B,CAAC;IAED;;;OAGG;IACH,SAAS,EAAE;QACP,OAAO,WAAW,CAAC,SAAS,EAAE,CAAC;IACnC,CAAC;IAED;;;OAGG;IACH,OAAO,EAAE;QACL,OAAO,WAAW,CAAC;IACvB,CAAC;IAED;;;;;;;;OAQG;IACH,qBAAqB,EAAE,UAAC,IAAgC,EAAE,SAAiB;QACvE,OAAO,WAAW,CAAC,qBAAqB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAC9D,CAAC;IAED;;;OAGG;IACH,mBAAmB,EAAE,UAAC,SAAiB;QACnC,WAAW,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;IAC/C,CAAC;CACJ,CAAC","sourcesContent":["/*\n * Copyright 2020 Fluence Labs Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport log, { LogLevelDesc } from 'loglevel';\n\nimport { FluencePeer, PeerConfig } from './internal/FluencePeer';\n\nexport { PeerStatus } from './internal/FluencePeer';\nexport { KeyPair } from './internal/KeyPair';\nexport { FluencePeer, PeerConfig } from './internal/FluencePeer';\nexport { MarineLoglevel as AvmLoglevel } from './internal/utils';\nexport { PeerIdB58, CallParams } from './internal/commonTypes';\nexport { loadWasmFromFileSystem, loadWasmFromNpmPackage, loadWasmFromServer } from '@fluencelabs/marine-js';\n\nexport const setLogLevel = (level: LogLevelDesc) => {\n    log.setLevel(level);\n};\n\nlog.setDefaultLevel('WARN');\n\nconst defaultPeer = new FluencePeer();\n\n/**\n * Public interface to Fluence JS\n */\nexport const Fluence = {\n    /**\n     * Initializes the default peer: starts the Aqua VM, initializes the default call service handlers\n     * and (optionally) connect to the Fluence network\n     * @param config - object specifying peer configuration\n     */\n    start: (config?: PeerConfig): Promise<void> => {\n        return defaultPeer.start(config);\n    },\n\n    /**\n     * Un-initializes the default peer: stops all the underlying workflows, stops the Aqua VM\n     * and disconnects from the Fluence network\n     */\n    stop: (): Promise<void> => {\n        return defaultPeer.stop();\n    },\n\n    /**\n     * Get the default peer's status\n     * @returns Default peer's status\n     */\n    getStatus: () => {\n        return defaultPeer.getStatus();\n    },\n\n    /**\n     * Get the default peer instance\n     * @returns the default peer instance\n     */\n    getPeer: (): FluencePeer => {\n        return defaultPeer;\n    },\n\n    /**\n     * Registers marine service within the default Fluence peer from wasm file.\n     * Following helper functions can be used to load wasm files:\n     * * loadWasmFromFileSystem\n     * * loadWasmFromNpmPackage\n     * * loadWasmFromServer\n     * @param wasm - buffer with the wasm file for service\n     * @param serviceId - the service id by which the service can be accessed in aqua\n     */\n    registerMarineService: (wasm: SharedArrayBuffer | Buffer, serviceId: string): Promise<void> => {\n        return defaultPeer.registerMarineService(wasm, serviceId);\n    },\n\n    /**\n     * Removes the specified marine service from the default Fluence peer\n     * @param serviceId - the service id to remove\n     */\n    removeMarineService: (serviceId: string): void => {\n        defaultPeer.removeMarineService(serviceId);\n    },\n};\n"]}
import Lib2p2Peer from 'libp2p';
import PeerId from 'peer-id';
import type { MultiaddrInput } from 'multiaddr';
import { Multiaddr } from 'multiaddr';
import { PeerIdB58 } from './commonTypes';
export declare const PROTOCOL_NAME = "/fluence/particle/2.0.0";
/**
 * Options to configure fluence connection
 */
export interface FluenceConnectionOptions {
    /**
     * Peer id of the Fluence Peer
     */
    peerId: PeerId;
    /**
     * Multiaddress of the relay to make connection to
     */
    relayAddress: MultiaddrInput;
    /**
     * The dialing timeout in milliseconds
     */
    dialTimeoutMs?: number;
}
export declare type ParticleHandler = (particle: string) => void;
/**
 * Base class for connectivity layer to Fluence Network
 */
export declare abstract class FluenceConnection {
    abstract readonly relayPeerId: PeerIdB58 | null;
    abstract connect(onIncomingParticle: ParticleHandler): Promise<void>;
    abstract disconnect(): Promise<void>;
    abstract sendParticle(nextPeerIds: PeerIdB58[], particle: string): Promise<void>;
}
/**
 * Implementation for JS peers which connects to Fluence through relay node
 */
export declare class RelayConnection extends FluenceConnection {
    peerId: PeerIdB58;
    private _lib2p2Peer;
    private _relayAddress;
    readonly relayPeerId: PeerIdB58;
    constructor(peerId: PeerIdB58, _lib2p2Peer: Lib2p2Peer, _relayAddress: Multiaddr, relayPeerId: PeerIdB58);
    private _connection?;
    static createConnection(options: FluenceConnectionOptions): Promise<RelayConnection>;
    disconnect(): Promise<void>;
    sendParticle(nextPeerIds: PeerIdB58[], particle: string): Promise<void>;
    connect(onIncomingParticle: ParticleHandler): Promise<void>;
}
//# sourceMappingURL=FluenceConnection.d.ts.map
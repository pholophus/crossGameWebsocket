/// <reference types="node" />
import type { MultiaddrInput } from 'multiaddr';
import { GenericCallServiceHandler } from './commonTypes';
import { PeerIdB58 } from './commonTypes';
import { FluenceConnection } from './FluenceConnection';
import { Particle, ParticleExecutionStage } from './Particle';
import { KeyPair } from './KeyPair';
import { MarineLoglevel } from './utils';
import { Sig } from './builtins/Sig';
import { AvmRunner } from './avm';
import { LogLevel } from '@fluencelabs/avm';
/**
 * Node of the Fluence network specified as a pair of node's multiaddr and it's peer id
 */
declare type Node = {
    peerId: PeerIdB58;
    multiaddr: string;
};
export declare type ConnectionOption = string | MultiaddrInput | Node;
/**
 * Configuration used when initiating Fluence Peer
 */
export interface PeerConfig {
    /**
     * Node in Fluence network to connect to.
     * Can be in the form of:
     * - string: multiaddr in string format
     * - Multiaddr: multiaddr object, @see https://github.com/multiformats/js-multiaddr
     * - Node: node structure, @see Node
     * - Implementation of FluenceConnection class, @see FluenceConnection
     * If not specified the will work locally and would not be able to send or receive particles.
     */
    connectTo?: ConnectionOption;
    /**
     * @deprecated. AVM run through marine-js infrastructure.
     * @see debug.marineLogLevel option to configure logging level of AVM
     */
    avmLogLevel?: MarineLoglevel;
    /**
     * Specify the KeyPair to be used to identify the Fluence Peer.
     * Will be generated randomly if not specified
     */
    KeyPair?: KeyPair;
    /**
     * When the peer established the connection to the network it sends a ping-like message to check if it works correctly.
     * The options allows to specify the timeout for that message in milliseconds.
     * If not specified the default timeout will be used
     */
    checkConnectionTimeoutMs?: number;
    /**
     * When the peer established the connection to the network it sends a ping-like message to check if it works correctly.
     * If set to true, the ping-like message will be skipped
     * Default: false
     */
    skipCheckConnection?: boolean;
    /**
     * The dialing timeout in milliseconds
     */
    dialTimeoutMs?: number;
    /**
     * Sets the default TTL for all particles originating from the peer with no TTL specified.
     * If the originating particle's TTL is defined then that value will be used
     * If the option is not set default TTL will be 7000
     */
    defaultTtlMs?: number;
    /**
     * @deprecated. AVM run through marine-js infrastructure.
     * @see marineJS option to configure AVM
     */
    avmRunner?: AvmRunner;
    /**
     * This option allows to specify the location of various dependencies needed for marine-js.
     * Each key specifies the location of the corresponding dependency.
     * If Fluence peer is started inside browser the location is treated as the path to the file relative to origin.
     * IF Fluence peer is started in nodejs the location is treated as the full path to file on the file system.
     */
    marineJS?: {
        /**
         * Configures path to the marine-js worker script.
         */
        workerScriptPath: string;
        /**
         * Configures the path to marine-js control wasm module
         */
        marineWasmPath: string;
        /**
         * Configures the path to AVM wasm module
         */
        avmWasmPath: string;
    };
    /**
     * Enables\disabled various debugging features
     */
    debug?: {
        /**
         * If set to true, newly initiated particle ids will be printed to console.
         * Useful to see what particle id is responsible for aqua function
         */
        printParticleId?: boolean;
        /**
         * Log level for marine services. By default logging is turned off.
         */
        marineLogLevel?: LogLevel;
    };
}
/**
 * Information about Fluence Peer connection.
 * Represented as object with the following keys:
 * - `isInitialized`: Is the peer initialized or not.
 * - `peerId`: Peer Id of the peer. Null if the peer is not initialized
 * - `isConnected`: Is the peer connected to network or not
 * - `relayPeerId`: Peer Id of the relay the peer is connected to. If the connection is direct relayPeerId is null
 * - `isDirect`: True if the peer is connected to the network directly (not through relay)
 */
export declare type PeerStatus = {
    isInitialized: false;
    peerId: null;
    isConnected: false;
    relayPeerId: null;
} | {
    isInitialized: true;
    peerId: PeerIdB58;
    isConnected: false;
    relayPeerId: null;
} | {
    isInitialized: true;
    peerId: PeerIdB58;
    isConnected: true;
    relayPeerId: PeerIdB58;
} | {
    isInitialized: true;
    peerId: PeerIdB58;
    isConnected: true;
    isDirect: true;
    relayPeerId: null;
};
/**
 * This class implements the Fluence protocol for javascript-based environments.
 * It provides all the necessary features to communicate with Fluence network
 */
export declare class FluencePeer {
    /**
     * Checks whether the object is instance of FluencePeer class
     * @param obj - object to check if it is FluencePeer
     * @returns true if the object is FluencePeer false otherwise
     */
    static isInstance(obj: unknown): obj is FluencePeer;
    /**
     * Get the peer's status
     */
    getStatus(): PeerStatus;
    /**
     * Initializes the peer: starts the Aqua VM, initializes the default call service handlers
     * and (optionally) connect to the Fluence network
     * @param config - object specifying peer configuration
     */
    start(config?: PeerConfig): Promise<void>;
    getServices(): {
        sig: Sig;
    };
    /**
     * Registers marine service within the Fluence peer from wasm file.
     * Following helper functions can be used to load wasm files:
     * * loadWasmFromFileSystem
     * * loadWasmFromNpmPackage
     * * loadWasmFromServer
     * @param wasm - buffer with the wasm file for service
     * @param serviceId - the service id by which the service can be accessed in aqua
     */
    registerMarineService(wasm: SharedArrayBuffer | Buffer, serviceId: string): Promise<void>;
    /**
     * Removes the specified marine service from the Fluence peer
     * @param serviceId - the service id to remove
     */
    removeMarineService(serviceId: string): void;
    /**
     * Un-initializes the peer: stops all the underlying workflows, stops the Aqua VM
     * and disconnects from the Fluence network
     */
    stop(): Promise<void>;
    /**
     * @private Is not intended to be used manually. Subject to change
     */
    get internals(): {
        parseAst: (air: string) => Promise<{
            success: boolean;
            data: any;
        }>;
        createNewParticle: (script: string, ttl?: number) => Error | Particle;
        /**
         * Initiates a new particle execution starting from local peer
         * @param particle - particle to start execution of
         */
        initiateParticle: (particle: Particle, onStageChange: (stage: ParticleExecutionStage) => void) => void;
        /**
         * Register Call Service handler functions
         */
        regHandler: {
            /**
             * Register handler for all particles
             */
            common: (serviceId: string, fnName: string, handler: GenericCallServiceHandler) => void;
            /**
             * Register handler which will be called only for particle with the specific id
             */
            forParticle: (particleId: string, serviceId: string, fnName: string, handler: GenericCallServiceHandler) => void;
        };
    };
    /**
     * @private Subject to change. Do not use this method directly
     */
    init(config: PeerConfig & Required<Pick<PeerConfig, 'KeyPair'>>): Promise<void>;
    /**
     * @private Subject to change. Do not use this method directly
     */
    connect(connection: FluenceConnection): Promise<void>;
    /**
     * @private Subject to change. Do not use this method directly
     */
    disconnect(): Promise<void>;
    private _incomingParticles;
    private _outgoingParticles;
    private _marineServices;
    private _marineLogLevel?;
    private _particleSpecificHandlers;
    private _commonHandlers;
    private _classServices?;
    private _containsService;
    private _printParticleId;
    private _defaultTTL;
    private _keyPair;
    private _connection?;
    /**
     * @deprecated. AVM run through marine-js infrastructure. This field is needed for backward compatibility with the previous API
     */
    private _avmRunner?;
    private _fluenceAppService?;
    private _timeouts;
    private _particleQueues;
    private _onIncomingParticle;
    private _startParticleProcessing;
    private _expireParticle;
    private _createParticlesProcessingQueue;
    private _execSingleCallRequest;
    private _stopParticleProcessing;
}
export {};
//# sourceMappingURL=FluencePeer.d.ts.map
{"version":3,"file":"FluencePeer.js","sourceRoot":"","sources":["../../src/internal/FluencePeer.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2021 Fluence Labs Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { MultiaddrInput } from 'multiaddr';\nimport { CallServiceData, CallServiceResult, GenericCallServiceHandler, ResultCodes } from './commonTypes';\nimport { PeerIdB58 } from './commonTypes';\nimport { RelayConnection, FluenceConnection } from './FluenceConnection';\nimport { Particle, ParticleExecutionStage, ParticleQueueItem } from './Particle';\nimport { KeyPair } from './KeyPair';\nimport { throwIfNotSupported, dataToString, jsonify, MarineLoglevel, marineLogLevelToEnvs } from './utils';\nimport { concatMap, filter, pipe, Subject, tap } from 'rxjs';\nimport log from 'loglevel';\nimport { builtInServices } from './builtins/common';\nimport { defaultSigGuard, Sig } from './builtins/Sig';\nimport { registerSig } from './_aqua/services';\nimport Buffer from './Buffer';\nimport { FluenceAppService, loadDefaults, loadWasmFromFileSystem, loadWasmFromServer } from '@fluencelabs/marine-js';\nimport { AVM, AvmRunner } from './avm';\nimport { isBrowser, isNode } from 'browser-or-node';\nimport { InterpreterResult, LogLevel } from '@fluencelabs/avm';\n\n/**\n * Node of the Fluence network specified as a pair of node's multiaddr and it's peer id\n */\ntype Node = {\n    peerId: PeerIdB58;\n    multiaddr: string;\n};\n\nconst DEFAULT_TTL = 7000;\n\nexport type ConnectionOption = string | MultiaddrInput | Node;\n\n/**\n * Configuration used when initiating Fluence Peer\n */\nexport interface PeerConfig {\n    /**\n     * Node in Fluence network to connect to.\n     * Can be in the form of:\n     * - string: multiaddr in string format\n     * - Multiaddr: multiaddr object, @see https://github.com/multiformats/js-multiaddr\n     * - Node: node structure, @see Node\n     * - Implementation of FluenceConnection class, @see FluenceConnection\n     * If not specified the will work locally and would not be able to send or receive particles.\n     */\n    connectTo?: ConnectionOption;\n\n    /**\n     * @deprecated. AVM run through marine-js infrastructure.\n     * @see debug.marineLogLevel option to configure logging level of AVM\n     */\n    avmLogLevel?: MarineLoglevel;\n\n    /**\n     * Specify the KeyPair to be used to identify the Fluence Peer.\n     * Will be generated randomly if not specified\n     */\n    KeyPair?: KeyPair;\n\n    /**\n     * When the peer established the connection to the network it sends a ping-like message to check if it works correctly.\n     * The options allows to specify the timeout for that message in milliseconds.\n     * If not specified the default timeout will be used\n     */\n    checkConnectionTimeoutMs?: number;\n\n    /**\n     * When the peer established the connection to the network it sends a ping-like message to check if it works correctly.\n     * If set to true, the ping-like message will be skipped\n     * Default: false\n     */\n    skipCheckConnection?: boolean;\n\n    /**\n     * The dialing timeout in milliseconds\n     */\n    dialTimeoutMs?: number;\n\n    /**\n     * Sets the default TTL for all particles originating from the peer with no TTL specified.\n     * If the originating particle's TTL is defined then that value will be used\n     * If the option is not set default TTL will be 7000\n     */\n    defaultTtlMs?: number;\n\n    /**\n     * @deprecated. AVM run through marine-js infrastructure.\n     * @see marineJS option to configure AVM\n     */\n    avmRunner?: AvmRunner;\n\n    /**\n     * This option allows to specify the location of various dependencies needed for marine-js.\n     * Each key specifies the location of the corresponding dependency.\n     * If Fluence peer is started inside browser the location is treated as the path to the file relative to origin.\n     * IF Fluence peer is started in nodejs the location is treated as the full path to file on the file system.\n     */\n    marineJS?: {\n        /**\n         * Configures path to the marine-js worker script.\n         */\n        workerScriptPath: string;\n\n        /**\n         * Configures the path to marine-js control wasm module\n         */\n        marineWasmPath: string;\n\n        /**\n         * Configures the path to AVM wasm module\n         */\n        avmWasmPath: string;\n    };\n\n    /**\n     * Enables\\disabled various debugging features\n     */\n    debug?: {\n        /**\n         * If set to true, newly initiated particle ids will be printed to console.\n         * Useful to see what particle id is responsible for aqua function\n         */\n        printParticleId?: boolean;\n\n        /**\n         * Log level for marine services. By default logging is turned off.\n         */\n        marineLogLevel?: LogLevel;\n    };\n}\n\n/**\n * Information about Fluence Peer connection.\n * Represented as object with the following keys:\n * - `isInitialized`: Is the peer initialized or not.\n * - `peerId`: Peer Id of the peer. Null if the peer is not initialized\n * - `isConnected`: Is the peer connected to network or not\n * - `relayPeerId`: Peer Id of the relay the peer is connected to. If the connection is direct relayPeerId is null\n * - `isDirect`: True if the peer is connected to the network directly (not through relay)\n */\nexport type PeerStatus =\n    | {\n          isInitialized: false;\n          peerId: null;\n          isConnected: false;\n          relayPeerId: null;\n      }\n    | {\n          isInitialized: true;\n          peerId: PeerIdB58;\n          isConnected: false;\n          relayPeerId: null;\n      }\n    | {\n          isInitialized: true;\n          peerId: PeerIdB58;\n          isConnected: true;\n          relayPeerId: PeerIdB58;\n      }\n    | {\n          isInitialized: true;\n          peerId: PeerIdB58;\n          isConnected: true;\n          isDirect: true;\n          relayPeerId: null;\n      };\n\n/**\n * This class implements the Fluence protocol for javascript-based environments.\n * It provides all the necessary features to communicate with Fluence network\n */\nexport class FluencePeer {\n    /**\n     * Checks whether the object is instance of FluencePeer class\n     * @param obj - object to check if it is FluencePeer\n     * @returns true if the object is FluencePeer false otherwise\n     */\n    static isInstance(obj: unknown): obj is FluencePeer {\n        return obj instanceof FluencePeer;\n    }\n\n    /**\n     * Get the peer's status\n     */\n    getStatus(): PeerStatus {\n        // TODO:: use explicit mechanism for peer's state\n        if (this._keyPair === undefined) {\n            return {\n                isInitialized: false,\n                peerId: null,\n                isConnected: false,\n                relayPeerId: null,\n            };\n        }\n\n        if (this._connection === undefined) {\n            return {\n                isInitialized: true,\n                peerId: this._keyPair.Libp2pPeerId.toB58String(),\n                isConnected: false,\n                relayPeerId: null,\n            };\n        }\n\n        if (this._connection.relayPeerId === null) {\n            return {\n                isInitialized: true,\n                peerId: this._keyPair.Libp2pPeerId.toB58String(),\n                isConnected: true,\n                isDirect: true,\n                relayPeerId: null,\n            };\n        }\n\n        return {\n            isInitialized: true,\n            peerId: this._keyPair.Libp2pPeerId.toB58String(),\n            isConnected: true,\n            relayPeerId: this._connection.relayPeerId,\n        };\n    }\n\n    /**\n     * Initializes the peer: starts the Aqua VM, initializes the default call service handlers\n     * and (optionally) connect to the Fluence network\n     * @param config - object specifying peer configuration\n     */\n    async start(config: PeerConfig = {}): Promise<void> {\n        throwIfNotSupported();\n        const keyPair = config.KeyPair ?? (await KeyPair.randomEd25519());\n        const newConfig = { ...config, KeyPair: keyPair };\n\n        await this.init(newConfig);\n\n        const conn = await configToConnection(newConfig.KeyPair, config?.connectTo, config?.dialTimeoutMs);\n        if (conn !== null) {\n            await this.connect(conn);\n        }\n    }\n\n    getServices() {\n        if (this._classServices === undefined) {\n            throw new Error(`Can't get services: peer is not initialized`);\n        }\n        return {\n            ...this._classServices,\n        };\n    }\n\n    /**\n     * Registers marine service within the Fluence peer from wasm file.\n     * Following helper functions can be used to load wasm files:\n     * * loadWasmFromFileSystem\n     * * loadWasmFromNpmPackage\n     * * loadWasmFromServer\n     * @param wasm - buffer with the wasm file for service\n     * @param serviceId - the service id by which the service can be accessed in aqua\n     */\n    async registerMarineService(wasm: SharedArrayBuffer | Buffer, serviceId: string): Promise<void> {\n        if (!this._fluenceAppService) {\n            throw new Error(\"Can't register marine service: peer is not initialized\");\n        }\n        if (this._containsService(serviceId)) {\n            throw new Error(`Service with '${serviceId}' id already exists`);\n        }\n\n        await this._fluenceAppService.createService(\n            wasm,\n            serviceId,\n            undefined,\n            marineLogLevelToEnvs(this._marineLogLevel),\n        );\n        this._marineServices.add(serviceId);\n    }\n\n    /**\n     * Removes the specified marine service from the Fluence peer\n     * @param serviceId - the service id to remove\n     */\n    removeMarineService(serviceId: string): void {\n        this._marineServices.delete(serviceId);\n    }\n\n    /**\n     * Un-initializes the peer: stops all the underlying workflows, stops the Aqua VM\n     * and disconnects from the Fluence network\n     */\n    async stop() {\n        this._keyPair = undefined; // This will set peer to non-initialized state and stop particle processing\n        this._stopParticleProcessing();\n        await this.disconnect();\n        await this._avmRunner?.terminate();\n        await this._fluenceAppService?.terminate();\n        this._avmRunner = undefined;\n        this._fluenceAppService = undefined;\n        this._classServices = undefined;\n\n        this._particleSpecificHandlers.clear();\n        this._commonHandlers.clear();\n        this._marineServices.clear();\n    }\n\n    // internal api\n\n    /**\n     * @private Is not intended to be used manually. Subject to change\n     */\n    get internals() {\n        return {\n            parseAst: async (air: string): Promise<{ success: boolean; data: any }> => {\n                const status = this.getStatus();\n\n                if (!status.isInitialized) {\n                    new Error(\"Can't use avm: peer is not initialized\");\n                }\n\n                const args = JSON.stringify([air]);\n                const rawRes = await this._fluenceAppService!.callService('avm', 'ast', args, undefined);\n                let res;\n                try {\n                    res = JSON.parse(rawRes);\n                    res = res.result as string;\n                    if (res.startsWith('error')) {\n                        return {\n                            success: false,\n                            data: res,\n                        };\n                    } else {\n                        return {\n                            success: true,\n                            data: JSON.parse(res),\n                        };\n                    }\n                } catch (err) {\n                    throw new Error('Failed to call avm. Raw result: ' + rawRes + '. Error: ' + err);\n                }\n            },\n            createNewParticle: (script: string, ttl: number = this._defaultTTL) => {\n                const status = this.getStatus();\n\n                if (!status.isInitialized) {\n                    return new Error(\"Can't create new particle: peer is not initialized\");\n                }\n\n                return Particle.createNew(script, ttl, status.peerId);\n            },\n            /**\n             * Initiates a new particle execution starting from local peer\n             * @param particle - particle to start execution of\n             */\n            initiateParticle: (particle: Particle, onStageChange: (stage: ParticleExecutionStage) => void): void => {\n                const status = this.getStatus();\n                if (!status.isInitialized) {\n                    throw new Error('Cannot initiate new particle: peer is not initialized');\n                }\n\n                if (this._printParticleId) {\n                    console.log('Particle id: ', particle.id);\n                }\n\n                if (particle.initPeerId === undefined) {\n                    particle.initPeerId = status.peerId;\n                }\n\n                if (particle.ttl === undefined) {\n                    particle.ttl = this._defaultTTL;\n                }\n\n                this._incomingParticles.next({\n                    particle: particle,\n                    onStageChange: onStageChange,\n                });\n            },\n\n            /**\n             * Register Call Service handler functions\n             */\n            regHandler: {\n                /**\n                 * Register handler for all particles\n                 */\n                common: (\n                    // force new line\n                    serviceId: string,\n                    fnName: string,\n                    handler: GenericCallServiceHandler,\n                ) => {\n                    this._commonHandlers.set(serviceFnKey(serviceId, fnName), handler);\n                },\n                /**\n                 * Register handler which will be called only for particle with the specific id\n                 */\n                forParticle: (\n                    particleId: string,\n                    serviceId: string,\n                    fnName: string,\n                    handler: GenericCallServiceHandler,\n                ) => {\n                    let psh = this._particleSpecificHandlers.get(particleId);\n                    if (psh === undefined) {\n                        psh = new Map<string, GenericCallServiceHandler>();\n                        this._particleSpecificHandlers.set(particleId, psh);\n                    }\n\n                    psh.set(serviceFnKey(serviceId, fnName), handler);\n                },\n            },\n        };\n    }\n\n    /**\n     * @private Subject to change. Do not use this method directly\n     */\n    async init(config: PeerConfig & Required<Pick<PeerConfig, 'KeyPair'>>) {\n        this._keyPair = config.KeyPair;\n\n        const peerId = this._keyPair.Libp2pPeerId.toB58String();\n\n        if (config?.debug?.printParticleId) {\n            this._printParticleId = true;\n        }\n\n        this._defaultTTL = config?.defaultTtlMs ?? DEFAULT_TTL;\n\n        if (config?.debug?.marineLogLevel) {\n            this._marineLogLevel = config.debug.marineLogLevel;\n        }\n\n        this._fluenceAppService = new FluenceAppService(config?.marineJS?.workerScriptPath);\n        const marineDeps = config?.marineJS\n            ? await loadMarineAndAvm(config.marineJS.marineWasmPath, config.marineJS.avmWasmPath)\n            : await loadDefaults();\n        await this._fluenceAppService.init(marineDeps.marine);\n        await this._fluenceAppService.createService(\n            marineDeps.avm,\n            'avm',\n            undefined,\n            marineLogLevelToEnvs(this._marineLogLevel),\n        );\n        this._avmRunner = config?.avmRunner || new AVM(this._fluenceAppService);\n        await this._avmRunner.init(config?.avmLogLevel || 'off');\n\n        registerDefaultServices(this);\n\n        this._classServices = {\n            sig: new Sig(this._keyPair),\n        };\n        this._classServices.sig.securityGuard = defaultSigGuard(peerId);\n        registerSig(this, this._classServices.sig);\n        registerSig(this, peerId, this._classServices.sig);\n\n        this._startParticleProcessing();\n    }\n\n    /**\n     * @private Subject to change. Do not use this method directly\n     */\n    async connect(connection: FluenceConnection): Promise<void> {\n        if (this._connection) {\n            await this._connection.disconnect();\n        }\n\n        this._connection = connection;\n\n        await this._connection.connect(this._onIncomingParticle.bind(this));\n    }\n\n    /**\n     * @private Subject to change. Do not use this method directly\n     */\n    async disconnect(): Promise<void> {\n        if (this._connection) {\n            await this._connection.disconnect();\n            this._connection = undefined;\n        }\n    }\n\n    // private\n\n    // Queues for incoming and outgoing particles\n\n    private _incomingParticles = new Subject<ParticleQueueItem>();\n    private _outgoingParticles = new Subject<ParticleQueueItem & { nextPeerIds: PeerIdB58[] }>();\n\n    // Call service handler\n\n    private _marineServices = new Set<string>();\n    private _marineLogLevel?: MarineLoglevel;\n    private _particleSpecificHandlers = new Map<string, Map<string, GenericCallServiceHandler>>();\n    private _commonHandlers = new Map<string, GenericCallServiceHandler>();\n\n    private _classServices?: {\n        sig: Sig;\n    };\n\n    private _containsService(serviceId: string): boolean {\n        return this._marineServices.has(serviceId) || this._commonHandlers.has(serviceId);\n    }\n\n    // Internal peer state\n\n    private _printParticleId = false;\n    private _defaultTTL: number = DEFAULT_TTL;\n    private _keyPair: KeyPair | undefined;\n    private _connection?: FluenceConnection;\n\n    /**\n     * @deprecated. AVM run through marine-js infrastructure. This field is needed for backward compatibility with the previous API\n     */\n    private _avmRunner?: AvmRunner;\n    private _fluenceAppService?: FluenceAppService;\n    private _timeouts: Array<NodeJS.Timeout> = [];\n    private _particleQueues = new Map<string, Subject<ParticleQueueItem>>();\n\n    private _onIncomingParticle(p: string) {\n        const particle = Particle.fromString(p);\n        this._incomingParticles.next({ particle, onStageChange: () => {} });\n    }\n\n    private _startParticleProcessing() {\n        this._incomingParticles\n            .pipe(\n                tap((x) => {\n                    x.particle.logTo('debug', 'particle received:');\n                }),\n                filterExpiredParticles(this._expireParticle.bind(this)),\n            )\n            .subscribe((item) => {\n                const p = item.particle;\n                let particlesQueue = this._particleQueues.get(p.id);\n\n                if (!particlesQueue) {\n                    particlesQueue = this._createParticlesProcessingQueue();\n                    this._particleQueues.set(p.id, particlesQueue);\n\n                    const timeout = setTimeout(() => {\n                        this._expireParticle(item);\n                    }, p.actualTtl());\n\n                    this._timeouts.push(timeout);\n                }\n\n                particlesQueue.next(item);\n            });\n\n        this._outgoingParticles.subscribe((item) => {\n            // Do not send particle after the peer has been stopped\n            if (!this.getStatus().isInitialized) {\n                return;\n            }\n\n            if (!this._connection) {\n                item.particle.logTo('error', 'cannot send particle, peer is not connected');\n                item.onStageChange({ stage: 'sendingError' });\n                return;\n            }\n            item.particle.logTo('debug', 'sending particle:');\n            this._connection.sendParticle(item.nextPeerIds, item.particle.toString()).then(\n                () => {\n                    item.onStageChange({ stage: 'sent' });\n                },\n                (e) => {\n                    log.error(e);\n                },\n            );\n        });\n    }\n\n    private _expireParticle(item: ParticleQueueItem) {\n        const particleId = item.particle.id;\n        log.debug(\n            `particle ${particleId} has expired after ${item.particle.ttl}. Deleting particle-related queues and handlers`,\n        );\n\n        this._particleQueues.delete(particleId);\n        this._particleSpecificHandlers.delete(particleId);\n\n        item.onStageChange({ stage: 'expired' });\n    }\n\n    private _createParticlesProcessingQueue() {\n        const particlesQueue = new Subject<ParticleQueueItem>();\n        let prevData: Uint8Array = Buffer.from([]);\n\n        particlesQueue\n            .pipe(\n                filterExpiredParticles(this._expireParticle.bind(this)),\n\n                concatMap(async (item) => {\n                    const status = this.getStatus();\n                    if (!status.isInitialized || this._avmRunner === undefined) {\n                        // If `.stop()` was called return null to stop particle processing immediately\n                        return null;\n                    }\n\n                    // IMPORTANT!\n                    // AVM runner execution and prevData <-> newData swapping\n                    // MUST happen sequentially (in a critical section).\n                    // Otherwise the race between runner might occur corrupting the prevData\n\n                    const result = await runAvmRunner(status.peerId, this._avmRunner, item.particle, prevData);\n                    const newData = Buffer.from(result.data);\n                    prevData = newData;\n\n                    return {\n                        ...item,\n                        result: result,\n                        newData: newData,\n                    };\n                }),\n            )\n            .subscribe((item) => {\n                // If `.stop()` was called then item will be null and we need to stop particle processing immediately\n                if (item === null || !this.getStatus().isInitialized) {\n                    return;\n                }\n\n                // Do not continue if there was an error in particle interpretation\n                if (!isInterpretationSuccessful(item.result)) {\n                    item.onStageChange({ stage: 'interpreterError', errorMessage: item.result.errorMessage });\n                    return;\n                }\n\n                setTimeout(() => {\n                    item.onStageChange({ stage: 'interpreted' });\n                }, 0);\n\n                // send particle further if requested\n                if (item.result.nextPeerPks.length > 0) {\n                    const newParticle = item.particle.clone();\n                    newParticle.data = item.newData;\n                    this._outgoingParticles.next({\n                        ...item,\n                        particle: newParticle,\n                        nextPeerIds: item.result.nextPeerPks,\n                    });\n                }\n\n                // execute call requests if needed\n                // and put particle with the results back to queue\n                if (item.result.callRequests.length > 0) {\n                    for (const [key, cr] of item.result.callRequests) {\n                        const req = {\n                            fnName: cr.functionName,\n                            args: cr.arguments,\n                            serviceId: cr.serviceId,\n                            tetraplets: cr.tetraplets,\n                            particleContext: item.particle.getParticleContext(),\n                        };\n\n                        this._execSingleCallRequest(req)\n                            .catch(\n                                (err): CallServiceResult => ({\n                                    retCode: ResultCodes.error,\n                                    result: `Handler failed. fnName=\"${req.fnName}\" serviceId=\"${\n                                        req.serviceId\n                                    }\" error: ${err.toString()}`,\n                                }),\n                            )\n                            .then((res) => {\n                                const serviceResult = {\n                                    result: jsonify(res.result),\n                                    retCode: res.retCode,\n                                };\n\n                                const newParticle = item.particle.clone();\n                                newParticle.callResults = [[key, serviceResult]];\n                                newParticle.data = Buffer.from([]);\n\n                                particlesQueue.next({ ...item, particle: newParticle });\n                            });\n                    }\n                } else {\n                    item.onStageChange({ stage: 'localWorkDone' });\n                }\n            });\n\n        return particlesQueue;\n    }\n\n    private async _execSingleCallRequest(req: CallServiceData): Promise<CallServiceResult> {\n        log.debug('executing call service handler', jsonify(req));\n        const particleId = req.particleContext.particleId;\n\n        if (this._fluenceAppService && this._marineServices.has(req.serviceId)) {\n            const args = JSON.stringify(req.args);\n            const rawResult = await this._fluenceAppService.callService(req.serviceId, req.fnName, args, undefined);\n\n            try {\n                const result = JSON.parse(rawResult);\n                if (typeof result.error === 'string' && result.error.length > 0) {\n                    return {\n                        retCode: ResultCodes.error,\n                        result: result.error,\n                    };\n                }\n\n                if (result.result === undefined) {\n                    throw new Error(\n                        `Call to marine-js returned no error and empty result. Original request: ${jsonify(req)}`,\n                    );\n                }\n\n                return {\n                    retCode: ResultCodes.success,\n                    result: result.result,\n                };\n            } catch (e) {\n                throw new Error(`Call to marine-js. Result parsing error: ${e}, original text: ${rawResult}`);\n            }\n        }\n\n        const key = serviceFnKey(req.serviceId, req.fnName);\n        const psh = this._particleSpecificHandlers.get(particleId);\n        let handler: GenericCallServiceHandler | undefined;\n\n        // we should prioritize handler for this particle if there is one\n        // if particle-specific handlers exist for this particle try getting handler there\n        if (psh !== undefined) {\n            handler = psh.get(key);\n        }\n\n        // then try to find a common handler for all particles with this service-fn key\n        // if there is no particle-specific handler, get one from common map\n        if (handler === undefined) {\n            handler = this._commonHandlers.get(key);\n        }\n\n        // if no handler is found return useful error message to AVM\n        if (handler === undefined) {\n            return {\n                retCode: ResultCodes.error,\n                result: `No handler has been registered for serviceId='${req.serviceId}' fnName='${\n                    req.fnName\n                }' args='${jsonify(req.args)}'`,\n            };\n        }\n\n        // if we found a handler, execute it\n        const res = await handler(req);\n\n        if (res.result === undefined) {\n            res.result = null;\n        }\n\n        log.debug('executed call service handler, req and res are: ', jsonify(req), jsonify(res));\n        return res;\n    }\n\n    private _stopParticleProcessing() {\n        // do not hang if the peer has been stopped while some of the timeouts are still being executed\n        this._timeouts.forEach((timeout) => {\n            clearTimeout(timeout);\n        });\n        this._particleQueues.clear();\n    }\n}\n\nasync function configToConnection(\n    keyPair: KeyPair,\n    connection?: ConnectionOption,\n    dialTimeoutMs?: number,\n): Promise<FluenceConnection | null> {\n    if (!connection) {\n        return null;\n    }\n\n    if (connection instanceof FluenceConnection) {\n        return connection;\n    }\n\n    let connectToMultiAddr: MultiaddrInput;\n    // figuring out what was specified as input\n    const tmp = connection as any;\n    if (tmp.multiaddr !== undefined) {\n        // specified as FluenceNode (object with multiaddr and peerId props)\n        connectToMultiAddr = tmp.multiaddr;\n    } else {\n        // specified as MultiaddrInput\n        connectToMultiAddr = tmp;\n    }\n\n    const res = await RelayConnection.createConnection({\n        peerId: keyPair.Libp2pPeerId,\n        relayAddress: connectToMultiAddr,\n        dialTimeoutMs: dialTimeoutMs,\n    });\n    return res;\n}\n\nfunction isInterpretationSuccessful(result: InterpreterResult) {\n    return result.retCode === 0;\n}\n\nfunction serviceFnKey(serviceId: string, fnName: string) {\n    return `${serviceId}/${fnName}`;\n}\n\nfunction registerDefaultServices(peer: FluencePeer) {\n    Object.entries(builtInServices).forEach(([serviceId, service]) => {\n        Object.entries(service).forEach(([fnName, fn]) => {\n            peer.internals.regHandler.common(serviceId, fnName, fn);\n        });\n    });\n}\n\nasync function runAvmRunner(\n    currentPeerId: PeerIdB58,\n    runner: AvmRunner,\n    particle: Particle,\n    prevData: Uint8Array,\n): Promise<InterpreterResult> {\n    particle.logTo('debug', 'Sending particle to interpreter');\n    log.debug('prevData: ', dataToString(prevData));\n    const interpreterResult = await runner.run(\n        particle.script,\n        prevData,\n        particle.data,\n        {\n            initPeerId: particle.initPeerId,\n            currentPeerId: currentPeerId,\n            timestamp: particle.timestamp,\n            ttl: particle.ttl,\n        },\n        particle.callResults,\n    );\n\n    const toLog = { ...interpreterResult, data: dataToString(interpreterResult.data) };\n\n    if (isInterpretationSuccessful(interpreterResult)) {\n        log.debug('Interpreter result: ', jsonify(toLog));\n    } else {\n        log.error('Interpreter failed: ', jsonify(toLog));\n    }\n    return interpreterResult;\n}\n\nfunction filterExpiredParticles(onParticleExpiration: (item: ParticleQueueItem) => void) {\n    return pipe(\n        tap((item: ParticleQueueItem) => {\n            if (item.particle.hasExpired()) {\n                onParticleExpiration(item);\n            }\n        }),\n        filter((x: ParticleQueueItem) => !x.particle.hasExpired()),\n    );\n}\n\nasync function loadMarineAndAvm(\n    marinePath: string,\n    avmPath: string,\n): Promise<{\n    marine: SharedArrayBuffer | Buffer;\n    avm: SharedArrayBuffer | Buffer;\n}> {\n    let promises: [Promise<SharedArrayBuffer | Buffer>, Promise<SharedArrayBuffer | Buffer>];\n    // check if we are running inside the browser and instantiate worker with the corresponding script\n    if (isBrowser) {\n        promises = [\n            // force new line\n            loadWasmFromServer(marinePath),\n            loadWasmFromServer(avmPath),\n        ];\n    } else if (isNode) {\n        promises = [\n            // force new line\n            loadWasmFromFileSystem(marinePath),\n            loadWasmFromFileSystem(avmPath),\n        ];\n    } else {\n        throw new Error('Unknown environment');\n    }\n\n    const [marine, avm] = await Promise.all(promises);\n    return {\n        marine,\n        avm,\n    };\n}\n"]}
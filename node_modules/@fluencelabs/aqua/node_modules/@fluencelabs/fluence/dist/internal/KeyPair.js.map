{"version":3,"file":"KeyPair.js","sourceRoot":"","sources":["../../src/internal/KeyPair.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,8CAAkC;AAClC,+CAAqC;AACrC,uCAAyC;AAEzC;IAMI,iBAAY,YAAoB;QAC5B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACrC,CAAC;IAED;;;;OAIG;IACU,qBAAa,GAA1B,UAA2B,GAAe;;;;;4BAEnB,qBAAM,oBAAI,CAAC,uBAAuB,CAAC,SAAS,EAAE,GAAG,EAAE,GAAG,CAAC,EAAA;;wBAApE,UAAU,GAAG,SAAuD;wBACxD,qBAAM,MAAM,CAAC,iBAAiB,CAAC,UAAU,CAAC,KAAK,CAAC,EAAA;;wBAA5D,SAAS,GAAG,SAAgD;wBAClE,sBAAO,IAAI,OAAO,CAAC,SAAS,CAAC,EAAC;;;;KACjC;IAED;;;OAGG;IACU,qBAAa,GAA1B;;;;;4BACsB,qBAAM,MAAM,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,EAAA;;wBAAvD,SAAS,GAAG,SAA2C;wBAC7D,sBAAO,IAAI,OAAO,CAAC,SAAS,CAAC,EAAC;;;;KACjC;IAED,6BAAW,GAAX;QACI,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;IAC3C,CAAC;IAED;;OAEG;IACH,qCAAmB,GAAnB;QACI,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAC/D,CAAC;IAED,2BAAS,GAAT,UAAU,IAAgB;QACtB,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC;IAED,wBAAM,GAAN,UAAO,IAAgB,EAAE,SAAqB;QAC1C,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IACpE,CAAC;IACL,cAAC;AAAD,CAAC,AAjDD,IAiDC;AAjDY,0BAAO;AAmDb,IAAM,mBAAmB,GAAG,UAAC,EAAU;IAC1C,IAAM,GAAG,GAAG,IAAA,wBAAY,EAAC,EAAE,CAAC,CAAC;IAC7B,OAAO,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;AACtC,CAAC,CAAC;AAHW,QAAA,mBAAmB,uBAG9B","sourcesContent":["/*\n * Copyright 2020 Fluence Labs Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as PeerId from 'peer-id';\nimport { keys } from 'libp2p-crypto';\nimport { toUint8Array } from 'js-base64';\n\nexport class KeyPair {\n    /**\n     * Key pair in libp2p format. Used for backward compatibility with the current FluencePeer implementation\n     */\n    public Libp2pPeerId: PeerId;\n\n    constructor(libp2pPeerId: PeerId) {\n        this.Libp2pPeerId = libp2pPeerId;\n    }\n\n    /**\n     * Generates new KeyPair from ed25519 private key represented as a 32 byte array\n     * @param key - Any sequence of 32 bytes\n     * @returns - Promise with the created KeyPair\n     */\n    static async fromEd25519SK(arr: Uint8Array): Promise<KeyPair> {\n        // generateKeyPairFromSeed takes seed and copies it to private key as is\n        const privateKey = await keys.generateKeyPairFromSeed('Ed25519', arr, 256);\n        const lib2p2Pid = await PeerId.createFromPrivKey(privateKey.bytes);\n        return new KeyPair(lib2p2Pid);\n    }\n\n    /**\n     * Generates new KeyPair with a random secret key\n     * @returns - Promise with the created KeyPair\n     */\n    static async randomEd25519(): Promise<KeyPair> {\n        const lib2p2Pid = await PeerId.create({ keyType: 'Ed25519' });\n        return new KeyPair(lib2p2Pid);\n    }\n\n    toB58String(): string {\n        return this.Libp2pPeerId.toB58String();\n    }\n\n    /**\n     * @returns 32 byte private key\n     */\n    toEd25519PrivateKey(): Uint8Array {\n        return this.Libp2pPeerId.privKey.marshal().subarray(0, 32);\n    }\n\n    signBytes(data: Uint8Array): Promise<Uint8Array> {\n        return this.Libp2pPeerId.privKey.sign(data);\n    }\n\n    verify(data: Uint8Array, signature: Uint8Array): Promise<boolean> {\n        return this.Libp2pPeerId.privKey.public.verify(data, signature);\n    }\n}\n\nexport const keyPairFromBase64Sk = (sk: string): Promise<KeyPair> => {\n    const arr = toUint8Array(sk);\n    return KeyPair.fromEd25519SK(arr);\n};\n"]}
"use strict";
/*
 * Copyright 2020 Fluence Labs Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Particle = void 0;
var uuid_1 = require("uuid");
var base64_js_1 = require("base64-js");
var loglevel_1 = __importDefault(require("loglevel"));
var utils_1 = require("./utils");
var Buffer_1 = __importDefault(require("./Buffer"));
var Particle = /** @class */ (function () {
    function Particle(id, timestamp, script, data, ttl, initPeerId) {
        this.id = id;
        this.timestamp = timestamp;
        this.script = script;
        this.data = data;
        this.ttl = ttl;
        this.initPeerId = initPeerId;
        this.callResults = [];
    }
    Particle.createNew = function (script, ttl, initPeerId) {
        return new Particle(genUUID(), Date.now(), script, Buffer_1.default.from([]), ttl, initPeerId);
    };
    Particle.fromString = function (str) {
        var json = JSON.parse(str);
        var res = new Particle(json.id, json.timestamp, json.script, (0, base64_js_1.toByteArray)(json.data), json.ttl, json.init_peer_id);
        res.signature = json.signature;
        return res;
    };
    Particle.prototype.getParticleContext = function () {
        return {
            particleId: this.id,
            initPeerId: this.initPeerId,
            timestamp: this.timestamp,
            ttl: this.ttl,
            signature: this.signature,
        };
    };
    Particle.prototype.actualTtl = function () {
        return this.timestamp + this.ttl - Date.now();
    };
    Particle.prototype.hasExpired = function () {
        return this.actualTtl() <= 0;
    };
    Particle.prototype.clone = function () {
        var res = new Particle(this.id, this.timestamp, this.script, this.data, this.ttl, this.initPeerId);
        res.signature = this.signature;
        res.callResults = this.callResults;
        return res;
    };
    Particle.prototype.toString = function () {
        return JSON.stringify({
            action: 'Particle',
            id: this.id,
            init_peer_id: this.initPeerId,
            timestamp: this.timestamp,
            ttl: this.ttl,
            script: this.script,
            // TODO: copy signature from a particle after signatures will be implemented on nodes
            signature: [],
            data: this.data && (0, base64_js_1.fromByteArray)(this.data),
        });
    };
    Particle.prototype.logTo = function (level, message) {
        var fn;
        var data;
        switch (level) {
            case 'debug':
                fn = loglevel_1.default.debug;
                data = (0, utils_1.dataToString)(this.data);
                break;
            case 'error':
                fn = loglevel_1.default.error;
                break;
            case 'info':
            case 'trace':
                fn = loglevel_1.default.info;
                break;
            case 'warn':
                fn = loglevel_1.default.warn;
                break;
            default:
                return;
        }
        fn(message, (0, utils_1.jsonify)({
            id: this.id,
            init_peer_id: this.initPeerId,
            timestamp: this.timestamp,
            ttl: this.ttl,
            script: this.script,
            signature: this.signature,
            callResults: this.callResults,
            data: data,
        }));
    };
    return Particle;
}());
exports.Particle = Particle;
function genUUID() {
    return (0, uuid_1.v4)();
}
//# sourceMappingURL=Particle.js.map
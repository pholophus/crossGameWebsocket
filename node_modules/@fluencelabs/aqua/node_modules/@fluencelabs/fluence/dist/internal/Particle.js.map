{"version":3,"file":"Particle.js","sourceRoot":"","sources":["../../src/internal/Particle.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Fluence Labs Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { v4 as uuidv4 } from 'uuid';\nimport { fromByteArray, toByteArray } from 'base64-js';\nimport log from 'loglevel';\nimport { ParticleContext } from './commonTypes';\nimport { dataToString, jsonify } from './utils';\nimport Buffer from './Buffer';\nimport { CallResultsArray, LogLevel } from '@fluencelabs/avm';\n\nexport class Particle {\n    // TODO: make it not optional (should be added to the constructor)\n    signature?: string;\n    callResults: CallResultsArray = [];\n\n    constructor(\n        public id: string,\n        public timestamp: number,\n        public script: string,\n        public data: Uint8Array,\n        public ttl: number,\n        public initPeerId: string,\n    ) {}\n\n    static createNew(script: string, ttl: number, initPeerId: string): Particle {\n        return new Particle(genUUID(), Date.now(), script, Buffer.from([]), ttl, initPeerId);\n    }\n\n    static fromString(str: string): Particle {\n        const json = JSON.parse(str);\n        const res = new Particle(\n            json.id,\n            json.timestamp,\n            json.script,\n            toByteArray(json.data),\n            json.ttl,\n            json.init_peer_id,\n        );\n\n        res.signature = json.signature;\n\n        return res;\n    }\n\n    getParticleContext(): ParticleContext {\n        return {\n            particleId: this.id,\n            initPeerId: this.initPeerId,\n            timestamp: this.timestamp,\n            ttl: this.ttl,\n            signature: this.signature,\n        };\n    }\n\n    actualTtl(): number {\n        return this.timestamp + this.ttl - Date.now();\n    }\n\n    hasExpired(): boolean {\n        return this.actualTtl() <= 0;\n    }\n\n    clone(): Particle {\n        const res = new Particle(this.id, this.timestamp, this.script, this.data, this.ttl, this.initPeerId);\n\n        res.signature = this.signature;\n        res.callResults = this.callResults;\n        return res;\n    }\n\n    toString(): string {\n        return JSON.stringify({\n            action: 'Particle',\n            id: this.id,\n            init_peer_id: this.initPeerId,\n            timestamp: this.timestamp,\n            ttl: this.ttl,\n            script: this.script,\n            // TODO: copy signature from a particle after signatures will be implemented on nodes\n            signature: [],\n            data: this.data && fromByteArray(this.data),\n        });\n    }\n\n    logTo(level: LogLevel, message: string) {\n        let fn;\n        let data: string | undefined;\n        switch (level) {\n            case 'debug':\n                fn = log.debug;\n                data = dataToString(this.data);\n                break;\n            case 'error':\n                fn = log.error;\n                break;\n            case 'info':\n            case 'trace':\n                fn = log.info;\n                break;\n            case 'warn':\n                fn = log.warn;\n                break;\n            default:\n                return;\n        }\n\n        fn(\n            message,\n            jsonify({\n                id: this.id,\n                init_peer_id: this.initPeerId,\n                timestamp: this.timestamp,\n                ttl: this.ttl,\n                script: this.script,\n                signature: this.signature,\n                callResults: this.callResults,\n                data,\n            }),\n        );\n    }\n}\n\nexport type ParticleExecutionStage =\n    | { stage: 'received' }\n    | { stage: 'interpreted' }\n    | { stage: 'interpreterError'; errorMessage: string }\n    | { stage: 'localWorkDone' }\n    | { stage: 'sent' }\n    | { stage: 'sendingError' }\n    | { stage: 'expired' };\n\nexport interface ParticleQueueItem {\n    particle: Particle;\n    onStageChange: (state: ParticleExecutionStage) => void;\n}\n\nfunction genUUID() {\n    return uuidv4();\n}\n"]}
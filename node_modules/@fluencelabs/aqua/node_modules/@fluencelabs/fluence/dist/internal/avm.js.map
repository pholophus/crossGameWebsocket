{"version":3,"file":"avm.js","sourceRoot":"","sources":["../../src/internal/avm.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,wCAAyG;AAkBzG;;GAEG;AACH;IAGI,aAAY,iBAAoC;QAC5C,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;IAChD,CAAC;IAEK,kBAAI,GAAV,UAAW,QAAkB;;;;KAAmB;IAE1C,uBAAS,GAAf;;;;KAAmC;IAE7B,iBAAG,GAAT,UACI,GAAW,EACX,QAAoB,EACpB,IAAgB,EAChB,SAAwB,EACxB,WAA6B;;;;gBAE7B,sBAAO,IAAA,aAAO,EACV,UAAC,IAAI,IAAK,OAAA,KAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,CAAC,EAArE,CAAqE,EAC/E,SAAS,EACT,GAAG,EACH,QAAQ,EACR,IAAI,EACJ,WAAW,CACd,EAAC;;;KACL;IACL,UAAC;AAAD,CAAC,AA3BD,IA2BC;AA3BY,kBAAG","sourcesContent":["/*\n * Copyright 2022 Fluence Labs Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { callAvm, CallResultsArray, InterpreterResult, LogLevel, RunParameters } from '@fluencelabs/avm';\nimport { FluenceAppService } from '@fluencelabs/marine-js';\n\n/**\n * @deprecated. AVM run through marine-js infrastructure. This type is needed for backward compatibility with the previous API\n */\nexport type AvmRunner = {\n    init: (logLevel: LogLevel) => Promise<void>;\n    terminate: () => Promise<void>;\n    run: (\n        air: string,\n        prevData: Uint8Array,\n        data: Uint8Array,\n        params: RunParameters,\n        callResults: CallResultsArray,\n    ) => Promise<InterpreterResult>;\n};\n\n/**\n * @deprecated. AVM run through marine-js infrastructure. This type is needed for backward compatibility with the previous API\n */\nexport class AVM implements AvmRunner {\n    private _fluenceAppService: FluenceAppService;\n\n    constructor(fluenceAppService: FluenceAppService) {\n        this._fluenceAppService = fluenceAppService;\n    }\n\n    async init(logLevel: LogLevel): Promise<void> {}\n\n    async terminate(): Promise<void> {}\n\n    async run(\n        air: string,\n        prevData: Uint8Array,\n        data: Uint8Array,\n        runParams: RunParameters,\n        callResults: CallResultsArray,\n    ): Promise<InterpreterResult> {\n        return callAvm(\n            (args) => this._fluenceAppService.callService('avm', 'invoke', args, undefined),\n            runParams,\n            air,\n            prevData,\n            data,\n            callResults,\n        );\n    }\n}\n"]}
import { SecurityTetraplet } from '@fluencelabs/avm';
import { CallParams, PeerIdB58 } from '../commonTypes';
import { KeyPair } from '../KeyPair';
import { SigDef } from '../_aqua/services';
/**
 * A predicate of call params for sig service's sign method which determines whether signing operation is allowed or not
 */
export declare type SigSecurityGuard = (params: CallParams<'data'>) => boolean;
/**
 * Only allow calls when tetraplet for 'data' argument satisfies the predicate
 */
export declare const allowTetraplet: (pred: (tetraplet: SecurityTetraplet) => boolean) => SigSecurityGuard;
/**
 * Only allow data which comes from the specified serviceId and fnName
 */
export declare const allowServiceFn: (serviceId: string, fnName: string) => SigSecurityGuard;
/**
 * Only allow data originated from the specified json_path
 */
export declare const allowExactJsonPath: (jsonPath: string) => SigSecurityGuard;
/**
 * Only allow signing when particle is initiated at the specified peer
 */
export declare const allowOnlyParticleOriginatedAt: (peerId: PeerIdB58) => SigSecurityGuard;
/**
 * Only allow signing when all of the predicates are satisfied.
 * Useful for predicates reuse
 */
export declare const and: (...predicates: SigSecurityGuard[]) => SigSecurityGuard;
/**
 * Only allow signing when any of the predicates are satisfied.
 * Useful for predicates reuse
 */
export declare const or: (...predicates: SigSecurityGuard[]) => SigSecurityGuard;
export declare const defaultSigGuard: (peerId: PeerIdB58) => SigSecurityGuard;
export declare class Sig implements SigDef {
    private _keyPair;
    constructor(keyPair: KeyPair);
    /**
     *
     */
    securityGuard: SigSecurityGuard;
    /**
     * Gets the public key of KeyPair. Required by aqua
     */
    get_pub_key(): string;
    /**
     * Signs the data using key pair's private key. Required by aqua
     */
    sign(data: number[], callParams: CallParams<'data'>): Promise<{
        error: string | null;
        signature: number[] | null;
        success: boolean;
    }>;
    /**
     * Verifies the signature. Required by aqua
     */
    verify(signature: number[], data: number[]): Promise<boolean>;
}
//# sourceMappingURL=Sig.d.ts.map
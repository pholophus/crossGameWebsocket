"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sig = exports.defaultSigGuard = exports.or = exports.and = exports.allowOnlyParticleOriginatedAt = exports.allowExactJsonPath = exports.allowServiceFn = exports.allowTetraplet = void 0;
/**
 * Only allow calls when tetraplet for 'data' argument satisfies the predicate
 */
var allowTetraplet = function (pred) {
    return function (params) {
        var t = params.tetraplets.data[0];
        return pred(t);
    };
};
exports.allowTetraplet = allowTetraplet;
/**
 * Only allow data which comes from the specified serviceId and fnName
 */
var allowServiceFn = function (serviceId, fnName) {
    return (0, exports.allowTetraplet)(function (t) {
        return t.service_id === serviceId && t.function_name === fnName;
    });
};
exports.allowServiceFn = allowServiceFn;
/**
 * Only allow data originated from the specified json_path
 */
var allowExactJsonPath = function (jsonPath) {
    return (0, exports.allowTetraplet)(function (t) {
        return t.json_path === jsonPath;
    });
};
exports.allowExactJsonPath = allowExactJsonPath;
/**
 * Only allow signing when particle is initiated at the specified peer
 */
var allowOnlyParticleOriginatedAt = function (peerId) {
    return function (params) {
        return params.initPeerId === peerId;
    };
};
exports.allowOnlyParticleOriginatedAt = allowOnlyParticleOriginatedAt;
/**
 * Only allow signing when all of the predicates are satisfied.
 * Useful for predicates reuse
 */
var and = function () {
    var predicates = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        predicates[_i] = arguments[_i];
    }
    return function (params) { return predicates.every(function (x) { return x(params); }); };
};
exports.and = and;
/**
 * Only allow signing when any of the predicates are satisfied.
 * Useful for predicates reuse
 */
var or = function () {
    var predicates = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        predicates[_i] = arguments[_i];
    }
    return function (params) { return predicates.some(function (x) { return x(params); }); };
};
exports.or = or;
var defaultSigGuard = function (peerId) {
    return (0, exports.and)((0, exports.allowOnlyParticleOriginatedAt)(peerId), (0, exports.or)((0, exports.allowServiceFn)('trust-graph', 'get_trust_bytes'), (0, exports.allowServiceFn)('trust-graph', 'get_revocation_bytes'), (0, exports.allowServiceFn)('registry', 'get_key_bytes'), (0, exports.allowServiceFn)('registry', 'get_record_bytes'), (0, exports.allowServiceFn)('registry', 'get_host_record_bytes')));
};
exports.defaultSigGuard = defaultSigGuard;
var Sig = /** @class */ (function () {
    function Sig(keyPair) {
        /**
         *
         */
        this.securityGuard = function (params) {
            return true;
        };
        this._keyPair = keyPair;
    }
    /**
     * Gets the public key of KeyPair. Required by aqua
     */
    Sig.prototype.get_pub_key = function () {
        return this._keyPair.toB58String();
    };
    /**
     * Signs the data using key pair's private key. Required by aqua
     */
    Sig.prototype.sign = function (data, callParams) {
        return __awaiter(this, void 0, void 0, function () {
            var signedData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.securityGuard(callParams)) {
                            return [2 /*return*/, {
                                    success: false,
                                    error: 'Security guard validation failed',
                                    signature: null,
                                }];
                        }
                        return [4 /*yield*/, this._keyPair.signBytes(Uint8Array.from(data))];
                    case 1:
                        signedData = _a.sent();
                        return [2 /*return*/, {
                                success: true,
                                error: null,
                                signature: Array.from(signedData),
                            }];
                }
            });
        });
    };
    /**
     * Verifies the signature. Required by aqua
     */
    Sig.prototype.verify = function (signature, data) {
        return this._keyPair.verify(Uint8Array.from(data), Uint8Array.from(signature));
    };
    return Sig;
}());
exports.Sig = Sig;
//# sourceMappingURL=Sig.js.map
{"version":3,"file":"Sig.js","sourceRoot":"","sources":["../../../src/internal/builtins/Sig.ts"],"names":[],"mappings":"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","sourcesContent":["import { SecurityTetraplet } from '@fluencelabs/avm';\nimport { CallParams, PeerIdB58 } from '../commonTypes';\nimport { KeyPair } from '../KeyPair';\nimport { SigDef } from '../_aqua/services';\n\n/**\n * A predicate of call params for sig service's sign method which determines whether signing operation is allowed or not\n */\nexport type SigSecurityGuard = (params: CallParams<'data'>) => boolean;\n\n/**\n * Only allow calls when tetraplet for 'data' argument satisfies the predicate\n */\nexport const allowTetraplet = (pred: (tetraplet: SecurityTetraplet) => boolean): SigSecurityGuard => {\n    return (params) => {\n        const t = params.tetraplets.data[0];\n        return pred(t);\n    };\n};\n\n/**\n * Only allow data which comes from the specified serviceId and fnName\n */\nexport const allowServiceFn = (serviceId: string, fnName: string): SigSecurityGuard => {\n    return allowTetraplet((t) => {\n        return t.service_id === serviceId && t.function_name === fnName;\n    });\n};\n\n/**\n * Only allow data originated from the specified json_path\n */\nexport const allowExactJsonPath = (jsonPath: string): SigSecurityGuard => {\n    return allowTetraplet((t) => {\n        return t.json_path === jsonPath;\n    });\n};\n\n/**\n * Only allow signing when particle is initiated at the specified peer\n */\nexport const allowOnlyParticleOriginatedAt = (peerId: PeerIdB58): SigSecurityGuard => {\n    return (params) => {\n        return params.initPeerId === peerId;\n    };\n};\n\n/**\n * Only allow signing when all of the predicates are satisfied.\n * Useful for predicates reuse\n */\nexport const and = (...predicates: SigSecurityGuard[]): SigSecurityGuard => {\n    return (params) => predicates.every((x) => x(params));\n};\n\n/**\n * Only allow signing when any of the predicates are satisfied.\n * Useful for predicates reuse\n */\nexport const or = (...predicates: SigSecurityGuard[]): SigSecurityGuard => {\n    return (params) => predicates.some((x) => x(params));\n};\n\nexport const defaultSigGuard = (peerId: PeerIdB58) => {\n    return and(\n        allowOnlyParticleOriginatedAt(peerId),\n        or(\n            allowServiceFn('trust-graph', 'get_trust_bytes'),\n            allowServiceFn('trust-graph', 'get_revocation_bytes'),\n            allowServiceFn('registry', 'get_key_bytes'),\n            allowServiceFn('registry', 'get_record_bytes'),\n            allowServiceFn('registry', 'get_host_record_bytes'),\n        ),\n    );\n};\n\nexport class Sig implements SigDef {\n    private _keyPair: KeyPair;\n\n    constructor(keyPair: KeyPair) {\n        this._keyPair = keyPair;\n    }\n\n    /**\n     *\n     */\n    securityGuard: SigSecurityGuard = (params) => {\n        return true;\n    };\n\n    /**\n     * Gets the public key of KeyPair. Required by aqua\n     */\n    get_pub_key() {\n        return this._keyPair.toB58String();\n    }\n\n    /**\n     * Signs the data using key pair's private key. Required by aqua\n     */\n    async sign(\n        data: number[],\n        callParams: CallParams<'data'>,\n    ): Promise<{ error: string | null; signature: number[] | null; success: boolean }> {\n        if (!this.securityGuard(callParams)) {\n            return {\n                success: false,\n                error: 'Security guard validation failed',\n                signature: null,\n            };\n        }\n\n        const signedData = await this._keyPair.signBytes(Uint8Array.from(data));\n\n        return {\n            success: true,\n            error: null,\n            signature: Array.from(signedData),\n        };\n    }\n\n    /**\n     * Verifies the signature. Required by aqua\n     */\n    verify(signature: number[], data: number[]): Promise<boolean> {\n        return this._keyPair.verify(Uint8Array.from(data), Uint8Array.from(signature));\n    }\n}\n"]}
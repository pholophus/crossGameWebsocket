{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../src/internal/builtins/common.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2021 Fluence Labs Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { encode, decode } from 'bs58';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { CallServiceResult } from '@fluencelabs/avm';\n\nimport { GenericCallServiceHandler, ResultCodes } from '../commonTypes';\nimport { jsonify } from '../utils';\nimport Buffer from '../Buffer';\n\nconst success = (result: any): CallServiceResult => {\n    return {\n        result: result,\n        retCode: ResultCodes.success,\n    };\n};\n\nconst error = (error: string): CallServiceResult => {\n    return {\n        result: error,\n        retCode: ResultCodes.error,\n    };\n};\n\nconst errorNotImpl = (methodName: string) => {\n    return error(`The JS implementation of Peer does not support \"${methodName}\"`);\n};\n\nexport const builtInServices: Record<string, Record<string, GenericCallServiceHandler>> = {\n    peer: {\n        identify: () => {\n            return success({\n                external_addresses: [],\n                // TODO: remove hardcoded values\n                node_version: 'js-0.23.0',\n                air_version: 'js-0.24.2',\n            });\n        },\n\n        timestamp_ms: () => {\n            return success(Date.now());\n        },\n\n        timestamp_sec: () => {\n            return success(Math.floor(Date.now() / 1000));\n        },\n\n        is_connected: () => {\n            return errorNotImpl('peer.is_connected');\n        },\n\n        connect: () => {\n            return errorNotImpl('peer.connect');\n        },\n\n        get_contact: () => {\n            return errorNotImpl('peer.get_contact');\n        },\n\n        timeout: (req) => {\n            if (req.args.length !== 2) {\n                return error('timeout accepts exactly two arguments: timeout duration in ms and a message string');\n            }\n            const durationMs = req.args[0];\n            const message = req.args[1];\n\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    const res = success(message);\n                    resolve(res);\n                }, durationMs);\n            });\n        },\n    },\n\n    kad: {\n        neighborhood: () => {\n            return errorNotImpl('kad.neighborhood');\n        },\n\n        merge: () => {\n            return errorNotImpl('kad.merge');\n        },\n    },\n\n    srv: {\n        list: () => {\n            return errorNotImpl('srv.list');\n        },\n\n        create: () => {\n            return errorNotImpl('srv.create');\n        },\n\n        get_interface: () => {\n            return errorNotImpl('srv.get_interface');\n        },\n\n        resolve_alias: () => {\n            return errorNotImpl('srv.resolve_alias');\n        },\n\n        add_alias: () => {\n            return errorNotImpl('srv.add_alias');\n        },\n\n        remove: () => {\n            return errorNotImpl('srv.remove');\n        },\n    },\n\n    dist: {\n        add_module_from_vault: () => {\n            return errorNotImpl('dist.add_module_from_vault');\n        },\n\n        add_module: () => {\n            return errorNotImpl('dist.add_module');\n        },\n\n        add_blueprint: () => {\n            return errorNotImpl('dist.add_blueprint');\n        },\n\n        make_module_config: () => {\n            return errorNotImpl('dist.make_module_config');\n        },\n\n        load_module_config: () => {\n            return errorNotImpl('dist.load_module_config');\n        },\n\n        default_module_config: () => {\n            return errorNotImpl('dist.default_module_config');\n        },\n\n        make_blueprint: () => {\n            return errorNotImpl('dist.make_blueprint');\n        },\n\n        load_blueprint: () => {\n            return errorNotImpl('dist.load_blueprint');\n        },\n\n        list_modules: () => {\n            return errorNotImpl('dist.list_modules');\n        },\n\n        get_module_interface: () => {\n            return errorNotImpl('dist.get_module_interface');\n        },\n\n        list_blueprints: () => {\n            return errorNotImpl('dist.list_blueprints');\n        },\n    },\n\n    script: {\n        add: () => {\n            return errorNotImpl('script.add');\n        },\n\n        remove: () => {\n            return errorNotImpl('script.remove');\n        },\n\n        list: () => {\n            return errorNotImpl('script.list');\n        },\n    },\n\n    op: {\n        noop: () => {\n            return success({});\n        },\n\n        array: (req) => {\n            return success(req.args);\n        },\n\n        array_length: (req) => {\n            if (req.args.length !== 1) {\n                return error('array_length accepts exactly one argument, found: ' + req.args.length);\n            } else {\n                return success(req.args[0].length);\n            }\n        },\n\n        identity: (req) => {\n            if (req.args.length > 1) {\n                return error(`identity accepts up to 1 arguments, received ${req.args.length} arguments`);\n            } else {\n                return success(req.args.length === 0 ? {} : req.args[0]);\n            }\n        },\n\n        concat: (req) => {\n            const incorrectArgIndices = req.args //\n                .map((x, i) => [Array.isArray(x), i])\n                .filter(([isArray, _]) => !isArray)\n                .map(([_, index]) => index);\n\n            if (incorrectArgIndices.length > 0) {\n                const str = incorrectArgIndices.join(', ');\n                return error(`All arguments of 'concat' must be arrays: arguments ${str} are not`);\n            } else {\n                return success([].concat.apply([], req.args));\n            }\n        },\n\n        string_to_b58: (req) => {\n            if (req.args.length !== 1) {\n                return error('string_to_b58 accepts only one string argument');\n            } else {\n                return success(encode(new TextEncoder().encode(req.args[0])));\n            }\n        },\n\n        string_from_b58: (req) => {\n            if (req.args.length !== 1) {\n                return error('string_from_b58 accepts only one string argument');\n            } else {\n                return success(new TextDecoder().decode(decode(req.args[0])));\n            }\n        },\n\n        bytes_to_b58: (req) => {\n            if (req.args.length !== 1 || !Array.isArray(req.args[0])) {\n                return error('bytes_to_b58 accepts only single argument: array of numbers');\n            } else {\n                const argumentArray = req.args[0] as number[];\n                return success(encode(new Uint8Array(argumentArray)));\n            }\n        },\n\n        bytes_from_b58: (req) => {\n            if (req.args.length !== 1) {\n                return error('bytes_from_b58 accepts only one string argument');\n            } else {\n                return success(Array.from(decode(req.args[0])));\n            }\n        },\n\n        sha256_string: async (req) => {\n            if (req.args.length < 1 || req.args.length > 3) {\n                return error(`sha256_string accepts 1-3 arguments, found: ${req.args.length}`);\n            } else {\n                const [input, digestOnly, asBytes] = req.args;\n                const inBuffer = Buffer.from(input);\n                const multihash = await sha256.digest(inBuffer);\n\n                const outBytes = digestOnly ? multihash.digest : multihash.bytes;\n                const res = asBytes ? Array.from(outBytes) : encode(outBytes);\n\n                return success(res);\n            }\n        },\n\n        concat_strings: (req) => {\n            const res = ''.concat(...req.args);\n            return success(res);\n        },\n    },\n\n    debug: {\n        stringify: (req) => {\n            let out;\n\n            if (req.args.length === 0) {\n                out = '<empty argument list>';\n            } else if (req.args.length === 1) {\n                out = req.args[0];\n            } else {\n                out = req.args;\n            }\n\n            return success(jsonify(out));\n        },\n    },\n\n    math: {\n        add: (req) => {\n            let err;\n            if ((err = checkForArgumentsCount(req, 2))) {\n                return err;\n            }\n            const [x, y] = req.args;\n            return success(x + y);\n        },\n\n        sub: (req) => {\n            let err;\n            if ((err = checkForArgumentsCount(req, 2))) {\n                return err;\n            }\n            const [x, y] = req.args;\n            return success(x - y);\n        },\n\n        mul: (req) => {\n            let err;\n            if ((err = checkForArgumentsCount(req, 2))) {\n                return err;\n            }\n            const [x, y] = req.args;\n            return success(x * y);\n        },\n\n        fmul: (req) => {\n            let err;\n            if ((err = checkForArgumentsCount(req, 2))) {\n                return err;\n            }\n            const [x, y] = req.args;\n            return success(Math.floor(x * y));\n        },\n\n        div: (req) => {\n            let err;\n            if ((err = checkForArgumentsCount(req, 2))) {\n                return err;\n            }\n            const [x, y] = req.args;\n            return success(Math.floor(x / y));\n        },\n\n        rem: (req) => {\n            let err;\n            if ((err = checkForArgumentsCount(req, 2))) {\n                return err;\n            }\n            const [x, y] = req.args;\n            return success(x % y);\n        },\n\n        pow: (req) => {\n            let err;\n            if ((err = checkForArgumentsCount(req, 2))) {\n                return err;\n            }\n            const [x, y] = req.args;\n            return success(Math.pow(x, y));\n        },\n\n        log: (req) => {\n            let err;\n            if ((err = checkForArgumentsCount(req, 2))) {\n                return err;\n            }\n            const [x, y] = req.args;\n            return success(Math.log(y) / Math.log(x));\n        },\n    },\n\n    cmp: {\n        gt: (req) => {\n            let err;\n            if ((err = checkForArgumentsCount(req, 2))) {\n                return err;\n            }\n            const [x, y] = req.args;\n            return success(x > y);\n        },\n\n        gte: (req) => {\n            let err;\n            if ((err = checkForArgumentsCount(req, 2))) {\n                return err;\n            }\n            const [x, y] = req.args;\n            return success(x >= y);\n        },\n\n        lt: (req) => {\n            let err;\n            if ((err = checkForArgumentsCount(req, 2))) {\n                return err;\n            }\n            const [x, y] = req.args;\n            return success(x < y);\n        },\n\n        lte: (req) => {\n            let err;\n            if ((err = checkForArgumentsCount(req, 2))) {\n                return err;\n            }\n            const [x, y] = req.args;\n            return success(x <= y);\n        },\n\n        cmp: (req) => {\n            let err;\n            if ((err = checkForArgumentsCount(req, 2))) {\n                return err;\n            }\n            const [x, y] = req.args;\n            return success(x === y ? 0 : x > y ? 1 : -1);\n        },\n    },\n\n    array: {\n        sum: (req) => {\n            let err;\n            if ((err = checkForArgumentsCount(req, 1))) {\n                return err;\n            }\n            const [xs] = req.args;\n            return success(xs.reduce((agg: any, cur: any) => agg + cur, 0));\n        },\n\n        dedup: (req) => {\n            let err;\n            if ((err = checkForArgumentsCount(req, 1))) {\n                return err;\n            }\n            const [xs] = req.args;\n            const set = new Set(xs);\n            return success(Array.from(set));\n        },\n\n        intersect: (req) => {\n            let err;\n            if ((err = checkForArgumentsCount(req, 2))) {\n                return err;\n            }\n            const [xs, ys] = req.args;\n            const intersection = xs.filter((x: any) => ys.includes(x));\n            return success(intersection);\n        },\n\n        diff: (req) => {\n            let err;\n            if ((err = checkForArgumentsCount(req, 2))) {\n                return err;\n            }\n            const [xs, ys] = req.args;\n            const diff = xs.filter((x: unknown) => !ys.includes(x));\n            return success(diff);\n        },\n\n        sdiff: (req) => {\n            let err;\n            if ((err = checkForArgumentsCount(req, 2))) {\n                return err;\n            }\n            const [xs, ys] = req.args;\n            const sdiff = [\n                // force new line\n                ...xs.filter((y: unknown) => !ys.includes(y)),\n                ...ys.filter((x: unknown) => !xs.includes(x)),\n            ];\n            return success(sdiff);\n        },\n    },\n} as const;\n\nconst checkForArgumentsCount = (req: { args: Array<unknown> }, count: number) => {\n    if (req.args.length !== count) {\n        return error(`Expected ${count} argument(s). Got ${req.args.length}`);\n    }\n};\n"]}
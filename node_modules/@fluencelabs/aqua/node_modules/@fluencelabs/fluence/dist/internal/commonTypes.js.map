{"version":3,"file":"commonTypes.js","sourceRoot":"","sources":["../../src/internal/commonTypes.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AA6CH,IAAY,WAGX;AAHD,WAAY,WAAW;IACnB,mDAAW,CAAA;IACX,+CAAS,CAAA;AACb,CAAC,EAHW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAGtB","sourcesContent":["/*\n * Copyright 2020 Fluence Labs Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SecurityTetraplet } from '@fluencelabs/avm';\n\n/**\n * Peer ID's id as a base58 string (multihash/CIDv0).\n */\nexport type PeerIdB58 = string;\n\n/**\n * Additional information about a service call\n * @typeparam ArgName\n */\nexport interface CallParams<ArgName extends string | null> {\n    /**\n     * The identifier of particle which triggered the call\n     */\n    particleId: string;\n\n    /**\n     * The peer id which created the particle\n     */\n    initPeerId: PeerIdB58;\n\n    /**\n     * Particle's timestamp when it was created\n     */\n    timestamp: number;\n\n    /**\n     * Time to live in milliseconds. The time after the particle should be expired\n     */\n    ttl: number;\n\n    /**\n     * Particle's signature\n     */\n    signature?: string;\n\n    /**\n     * Security tetraplets\n     */\n    tetraplets: ArgName extends string ? Record<ArgName, SecurityTetraplet[]> : Record<string, never>;\n}\n\nexport enum ResultCodes {\n    success = 0,\n    error = 1,\n}\n\n/**\n * Particle context. Contains additional information about particle which triggered `call` air instruction from AVM\n */\nexport interface ParticleContext {\n    /**\n     * The identifier of particle which triggered the call\n     */\n    particleId: string;\n\n    /**\n     * The peer id which created the particle\n     */\n    initPeerId: PeerIdB58;\n\n    /**\n     * Particle's timestamp when it was created\n     */\n    timestamp: number;\n\n    /**\n     * Time to live in milliseconds. The time after the particle should be expired\n     */\n    ttl: number;\n\n    /**\n     * Particle's signature\n     */\n    signature?: string;\n}\n\n/**\n * Represents the information passed from AVM when a `call` air instruction is executed on the local peer\n */\nexport interface CallServiceData {\n    /**\n     * Service ID as specified in `call` air instruction\n     */\n    serviceId: string;\n\n    /**\n     * Function name as specified in `call` air instruction\n     */\n    fnName: string;\n\n    /**\n     * Arguments as specified in `call` air instruction\n     */\n    args: any[];\n\n    /**\n     * Security Tetraplets received from AVM\n     */\n    tetraplets: SecurityTetraplet[][];\n\n    /**\n     * Particle context, @see {@link ParticleContext}\n     */\n    particleContext: ParticleContext;\n}\n\n/**\n * Type for all the possible objects that can be returned to the AVM\n */\nexport type CallServiceResultType = object | boolean | number | string | null;\n\n/**\n * Generic call service handler\n */\nexport type GenericCallServiceHandler = (req: CallServiceData) => CallServiceResult | Promise<CallServiceResult>;\n\n/**\n * Represents the result of the `call` air instruction to be returned into AVM\n */\nexport interface CallServiceResult {\n    /**\n     * Return code to be returned to AVM\n     */\n    retCode: ResultCodes;\n\n    /**\n     * Result object to be returned to AVM\n     */\n    result: CallServiceResultType;\n}\n"]}
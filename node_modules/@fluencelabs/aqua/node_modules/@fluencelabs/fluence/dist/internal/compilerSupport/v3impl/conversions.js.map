{"version":3,"file":"conversions.js","sourceRoot":"","sources":["../../../../src/internal/compilerSupport/v3impl/conversions.ts"],"names":[],"mappings":"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","sourcesContent":["import { jsonify } from '../../utils';\nimport { match } from 'ts-pattern';\nimport { ArrowType, ArrowWithoutCallbacks, NonArrowType, UnlabeledProductType } from './interface';\nimport { CallServiceData } from 'src/internal/commonTypes';\n\n/**\n * Convert value from its representation in aqua language to representation in typescript\n * @param value - value as represented in aqua\n * @param type - definition of the aqua type\n * @returns value represented in typescript\n */\nexport const aqua2ts = (value: any, type: NonArrowType): any => {\n    const res = match(type)\n        .with({ tag: 'nil' }, () => {\n            return null;\n        })\n        .with({ tag: 'option' }, (opt) => {\n            if (value.length === 0) {\n                return null;\n            } else {\n                return aqua2ts(value[0], opt.type);\n            }\n        })\n        .with({ tag: 'scalar' }, { tag: 'bottomType' }, { tag: 'topType' }, () => {\n            return value;\n        })\n        .with({ tag: 'array' }, (arr) => {\n            return value.map((y: any) => aqua2ts(y, arr.type));\n        })\n        .with({ tag: 'struct' }, (x) => {\n            return Object.entries(x.fields).reduce((agg, [key, type]) => {\n                const val = aqua2ts(value[key], type);\n                return { ...agg, [key]: val };\n            }, {});\n        })\n        .with({ tag: 'labeledProduct' }, (x) => {\n            return Object.entries(x.fields).reduce((agg, [key, type]) => {\n                const val = aqua2ts(value[key], type);\n                return { ...agg, [key]: val };\n            }, {});\n        })\n        .with({ tag: 'unlabeledProduct' }, (x) => {\n            return x.items.map((type, index) => {\n                return aqua2ts(value[index], type);\n            });\n        })\n        // uncomment to check that every pattern in matched\n        // .exhaustive();\n        .otherwise(() => {\n            throw new Error('Unexpected tag: ' + jsonify(type));\n        });\n    return res;\n};\n\n/**\n * Convert call service arguments list from their aqua representation to representation in typescript\n * @param req - call service data\n * @param arrow - aqua type definition\n * @returns arguments in typescript representation\n */\nexport const aquaArgs2Ts = (req: CallServiceData, arrow: ArrowWithoutCallbacks) => {\n    const argTypes = match(arrow.domain)\n        .with({ tag: 'labeledProduct' }, (x) => {\n            return Object.values(x.fields);\n        })\n        .with({ tag: 'unlabeledProduct' }, (x) => {\n            return x.items;\n        })\n        .with({ tag: 'nil' }, (x) => {\n            return [];\n        })\n        // uncomment to check that every pattern in matched\n        // .exhaustive()\n        .otherwise(() => {\n            throw new Error('Unexpected tag: ' + jsonify(arrow.domain));\n        });\n\n    if (req.args.length !== argTypes.length) {\n        throw new Error(`incorrect number of arguments, expected: ${argTypes.length}, got: ${req.args.length}`);\n    }\n\n    return req.args.map((arg, index) => {\n        return aqua2ts(arg, argTypes[index]);\n    });\n};\n\n/**\n * Convert value from its typescript representation to representation in aqua\n * @param value - the value as represented in typescript\n * @param type - definition of the aqua type\n * @returns value represented in aqua\n */\nexport const ts2aqua = (value: any, type: NonArrowType): any => {\n    const res = match(type)\n        .with({ tag: 'nil' }, () => {\n            return null;\n        })\n        .with({ tag: 'option' }, (opt) => {\n            if (value === null || value === undefined) {\n                return [];\n            } else {\n                return [ts2aqua(value, opt.type)];\n            }\n        })\n        .with({ tag: 'scalar' }, { tag: 'bottomType' }, { tag: 'topType' }, () => {\n            return value;\n        })\n        .with({ tag: 'array' }, (arr) => {\n            return value.map((y: any) => ts2aqua(y, arr.type));\n        })\n        .with({ tag: 'struct' }, (x) => {\n            return Object.entries(x.fields).reduce((agg, [key, type]) => {\n                const val = ts2aqua(value[key], type);\n                return { ...agg, [key]: val };\n            }, {});\n        })\n        .with({ tag: 'labeledProduct' }, (x) => {\n            return Object.entries(x.fields).reduce((agg, [key, type]) => {\n                const val = ts2aqua(value[key], type);\n                return { ...agg, [key]: val };\n            }, {});\n        })\n        .with({ tag: 'unlabeledProduct' }, (x) => {\n            return x.items.map((type, index) => {\n                return ts2aqua(value[index], type);\n            });\n        })\n        // uncomment to check that every pattern in matched\n        // .exhaustive()\n        .otherwise(() => {\n            throw new Error('Unexpected tag: ' + jsonify(type));\n        });\n\n    return res;\n};\n\n/**\n * Convert return type of the service from it's typescript representation to representation in aqua\n * @param returnValue - the value as represented in typescript\n * @param arrowType - the arrow type which describes the service\n * @returns - value represented in aqua\n */\nexport const returnType2Aqua = (returnValue: any, arrowType: ArrowType<NonArrowType>) => {\n    if (arrowType.codomain.tag === 'nil') {\n        return {};\n    }\n\n    if (arrowType.codomain.items.length === 0) {\n        return {};\n    }\n\n    if (arrowType.codomain.items.length === 1) {\n        return ts2aqua(returnValue, arrowType.codomain.items[0]);\n    }\n\n    return arrowType.codomain.items.map((type, index) => {\n        return ts2aqua(returnValue[index], type);\n    });\n};\n\n/**\n * Converts response value from aqua its representation to representation in typescript\n * @param req - call service data\n * @param arrow - aqua type definition\n * @returns response value in typescript representation\n */\nexport const responseServiceValue2ts = (req: CallServiceData, arrow: ArrowType<any>) => {\n    return match(arrow.codomain)\n        .with({ tag: 'nil' }, () => {\n            return undefined;\n        })\n        .with({ tag: 'unlabeledProduct' }, (x) => {\n            if (x.items.length === 0) {\n                return undefined;\n            }\n\n            if (x.items.length === 1) {\n                return aqua2ts(req.args[0], x.items[0]);\n            }\n\n            return req.args.map((y, index) => aqua2ts(y, x.items[index]));\n        })\n        .exhaustive();\n};\n"]}
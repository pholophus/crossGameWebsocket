import { Particle } from '../../Particle';
import { CallServiceData, GenericCallServiceHandler, ResultCodes } from '../../commonTypes';
import { FluencePeer } from '../../FluencePeer';
import { ArrowWithoutCallbacks, FunctionCallConstants, FunctionCallDef, NonArrowType } from './interface';
export interface ServiceDescription {
    serviceId: string;
    fnName: string;
    handler: GenericCallServiceHandler;
}
/**
 * Creates a service which injects relay's peer id into aqua space
 */
export declare const injectRelayService: (def: FunctionCallDef, peer: FluencePeer) => {
    serviceId: string;
    fnName: string;
    handler: () => {
        retCode: ResultCodes;
        result: string | null;
    };
};
/**
 * Creates a service which injects plain value into aqua space
 */
export declare const injectValueService: (serviceId: string, fnName: string, valueType: NonArrowType, value: any) => {
    serviceId: string;
    fnName: string;
    handler: () => {
        retCode: ResultCodes;
        result: any;
    };
};
/**
 *  Creates a service which is used to return value from aqua function into typescript space
 */
export declare const responseService: (def: FunctionCallDef, resolveCallback: Function) => {
    serviceId: string;
    fnName: string;
    handler: (req: CallServiceData) => {
        retCode: ResultCodes;
        result: {};
    };
};
/**
 * Creates a service which is used to return errors from aqua function into typescript space
 */
export declare const errorHandlingService: (def: FunctionCallDef, rejectCallback: Function) => {
    serviceId: string;
    fnName: string;
    handler: (req: CallServiceData) => {
        retCode: ResultCodes;
        result: {};
    };
};
/**
 * Creates a service for user-defined service function handler
 */
export declare const userHandlerService: (serviceId: string, arrowType: [string, ArrowWithoutCallbacks], userHandler: (...args: Array<unknown>) => Promise<unknown>) => {
    serviceId: string;
    fnName: string;
    handler: (req: CallServiceData) => Promise<{
        retCode: ResultCodes;
        result: any;
    }>;
};
/**
 * Converts argument of aqua function to a corresponding service.
 * For arguments of non-arrow types the resulting service injects the argument into aqua space.
 * For arguments of arrow types the resulting service calls the corresponding function.
 */
export declare const argToServiceDef: (arg: any, argName: string, argType: NonArrowType | ArrowWithoutCallbacks, names: FunctionCallConstants) => ServiceDescription;
export declare const registerParticleScopeService: (peer: FluencePeer, particle: Particle, service: ServiceDescription) => void;
export declare const registerGlobalService: (peer: FluencePeer, service: ServiceDescription) => void;
//# sourceMappingURL=services.d.ts.map
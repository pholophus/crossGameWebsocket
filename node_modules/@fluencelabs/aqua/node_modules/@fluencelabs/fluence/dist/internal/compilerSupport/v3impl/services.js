"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerGlobalService = exports.registerParticleScopeService = exports.argToServiceDef = exports.userHandlerService = exports.errorHandlingService = exports.responseService = exports.injectValueService = exports.injectRelayService = void 0;
var ts_pattern_1 = require("ts-pattern");
var commonTypes_1 = require("../../commonTypes");
var conversions_1 = require("./conversions");
/**
 * Creates a service which injects relay's peer id into aqua space
 */
var injectRelayService = function (def, peer) {
    return {
        serviceId: def.names.getDataSrv,
        fnName: def.names.relay,
        handler: function () {
            return {
                retCode: commonTypes_1.ResultCodes.success,
                result: peer.getStatus().relayPeerId,
            };
        },
    };
};
exports.injectRelayService = injectRelayService;
/**
 * Creates a service which injects plain value into aqua space
 */
var injectValueService = function (serviceId, fnName, valueType, value) {
    return {
        serviceId: serviceId,
        fnName: fnName,
        handler: function () {
            return {
                retCode: commonTypes_1.ResultCodes.success,
                result: (0, conversions_1.ts2aqua)(value, valueType),
            };
        },
    };
};
exports.injectValueService = injectValueService;
/**
 *  Creates a service which is used to return value from aqua function into typescript space
 */
var responseService = function (def, resolveCallback) {
    return {
        serviceId: def.names.responseSrv,
        fnName: def.names.responseFnName,
        handler: function (req) {
            var userFunctionReturn = (0, conversions_1.responseServiceValue2ts)(req, def.arrow);
            setTimeout(function () {
                resolveCallback(userFunctionReturn);
            }, 0);
            return {
                retCode: commonTypes_1.ResultCodes.success,
                result: {},
            };
        },
    };
};
exports.responseService = responseService;
/**
 * Creates a service which is used to return errors from aqua function into typescript space
 */
var errorHandlingService = function (def, rejectCallback) {
    return {
        serviceId: def.names.errorHandlingSrv,
        fnName: def.names.errorFnName,
        handler: function (req) {
            var _a = __read(req.args, 2), err = _a[0], _ = _a[1];
            setTimeout(function () {
                rejectCallback(err);
            }, 0);
            return {
                retCode: commonTypes_1.ResultCodes.success,
                result: {},
            };
        },
    };
};
exports.errorHandlingService = errorHandlingService;
/**
 * Creates a service for user-defined service function handler
 */
var userHandlerService = function (serviceId, arrowType, userHandler) {
    var _a = __read(arrowType, 2), fnName = _a[0], type = _a[1];
    return {
        serviceId: serviceId,
        fnName: fnName,
        handler: function (req) { return __awaiter(void 0, void 0, void 0, function () {
            var args, rawResult, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = __spreadArray(__spreadArray([], __read((0, conversions_1.aquaArgs2Ts)(req, type)), false), [extractCallParams(req, type)], false);
                        return [4 /*yield*/, userHandler.apply(null, args)];
                    case 1:
                        rawResult = _a.sent();
                        result = (0, conversions_1.returnType2Aqua)(rawResult, type);
                        return [2 /*return*/, {
                                retCode: commonTypes_1.ResultCodes.success,
                                result: result,
                            }];
                }
            });
        }); },
    };
};
exports.userHandlerService = userHandlerService;
/**
 * Converts argument of aqua function to a corresponding service.
 * For arguments of non-arrow types the resulting service injects the argument into aqua space.
 * For arguments of arrow types the resulting service calls the corresponding function.
 */
var argToServiceDef = function (arg, argName, argType, names) {
    if (argType.tag === 'arrow') {
        return (0, exports.userHandlerService)(names.callbackSrv, [argName, argType], arg);
    }
    else {
        return (0, exports.injectValueService)(names.getDataSrv, argName, arg, argType);
    }
};
exports.argToServiceDef = argToServiceDef;
/**
 * Extracts call params from from call service data according to aqua type definition
 */
var extractCallParams = function (req, arrow) {
    var names = (0, ts_pattern_1.match)(arrow.domain)
        .with({ tag: 'nil' }, function () {
        return [];
    })
        .with({ tag: 'labeledProduct' }, function (x) {
        return Object.keys(x.fields);
    })
        .with({ tag: 'unlabeledProduct' }, function (x) {
        return x.items.map(function (_, index) { return 'arg' + index; });
    })
        .exhaustive();
    var tetraplets = {};
    for (var i = 0; i < req.args.length; i++) {
        if (names[i]) {
            tetraplets[names[i]] = req.tetraplets[i];
        }
    }
    var callParams = __assign(__assign({}, req.particleContext), { tetraplets: tetraplets });
    return callParams;
};
var registerParticleScopeService = function (peer, particle, service) {
    peer.internals.regHandler.forParticle(particle.id, service.serviceId, service.fnName, service.handler);
};
exports.registerParticleScopeService = registerParticleScopeService;
var registerGlobalService = function (peer, service) {
    peer.internals.regHandler.common(service.serviceId, service.fnName, service.handler);
};
exports.registerGlobalService = registerGlobalService;
//# sourceMappingURL=services.js.map
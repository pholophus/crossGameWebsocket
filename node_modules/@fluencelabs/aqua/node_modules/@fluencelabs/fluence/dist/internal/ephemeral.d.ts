import { PeerIdB58 } from './commonTypes';
import { FluenceConnection } from './FluenceConnection';
import { FluencePeer } from '../index';
interface EphemeralConfig {
    peers: Array<{
        peerId: PeerIdB58;
        sk: string;
    }>;
}
export declare const defaultConfig: {
    peers: {
        peerId: string;
        sk: string;
    }[];
};
/**
 * Ephemeral network implementation.
 * Ephemeral network is a virtual network which runs locally and focuses on p2p interaction by removing connectivity layer out of the equation.
 */
export declare class EphemeralNetwork {
    readonly config: EphemeralConfig;
    private _peers;
    constructor(config: EphemeralConfig);
    /**
     * Starts the Ephemeral network up
     */
    up(): Promise<void>;
    /**
     * Shuts the ephemeral network down. Will disconnect all connected peers.
     */
    down(): Promise<void>;
    /**
     * Gets the FluenceConnection which can be used to connect to the ephemeral networks via the specified relay peer.
     */
    getRelayConnection(relay: PeerIdB58, peer: FluencePeer): FluenceConnection;
    private _send;
}
export {};
//# sourceMappingURL=ephemeral.d.ts.map
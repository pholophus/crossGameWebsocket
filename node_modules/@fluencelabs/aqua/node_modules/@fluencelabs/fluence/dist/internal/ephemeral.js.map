{"version":3,"file":"ephemeral.js","sourceRoot":"","sources":["../../src/internal/ephemeral.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,yDAAyE;AACzE,kCAAuC;AACvC,qCAAgD;AAChD,sDAA2B;AAiBd,QAAA,aAAa,GAAG;IACzB,KAAK,EAAE;QACH;YACI,MAAM,EAAE,sDAAsD;YAC9D,EAAE,EAAE,8CAA8C;SACrD;QACD;YACI,MAAM,EAAE,sDAAsD;YAC9D,EAAE,EAAE,8CAA8C;SACrD;QACD;YACI,MAAM,EAAE,sDAAsD;YAC9D,EAAE,EAAE,8CAA8C;SACrD;QACD;YACI,MAAM,EAAE,sDAAsD;YAC9D,EAAE,EAAE,8CAA8C;SACrD;QACD;YACI,MAAM,EAAE,sDAAsD;YAC9D,EAAE,EAAE,8CAA8C;SACrD;QACD;YACI,MAAM,EAAE,sDAAsD;YAC9D,EAAE,EAAE,8CAA8C;SACrD;QACD;YACI,MAAM,EAAE,sDAAsD;YAC9D,EAAE,EAAE,8CAA8C;SACrD;QACD;YACI,MAAM,EAAE,sDAAsD;YAC9D,EAAE,EAAE,8CAA8C;SACrD;QACD;YACI,MAAM,EAAE,sDAAsD;YAC9D,EAAE,EAAE,8CAA8C;SACrD;QACD;YACI,MAAM,EAAE,sDAAsD;YAC9D,EAAE,EAAE,8CAA8C;SACrD;QACD;YACI,MAAM,EAAE,sDAAsD;YAC9D,EAAE,EAAE,8CAA8C;SACrD;QACD;YACI,MAAM,EAAE,sDAAsD;YAC9D,EAAE,EAAE,8CAA8C;SACrD;QACD;YACI,MAAM,EAAE,sDAAsD;YAC9D,EAAE,EAAE,8CAA8C;SACrD;QACD;YACI,MAAM,EAAE,sDAAsD;YAC9D,EAAE,EAAE,8CAA8C;SACrD;QACD;YACI,MAAM,EAAE,sDAAsD;YAC9D,EAAE,EAAE,8CAA8C;SACrD;QACD;YACI,MAAM,EAAE,sDAAsD;YAC9D,EAAE,EAAE,8CAA8C;SACrD;QACD;YACI,MAAM,EAAE,sDAAsD;YAC9D,EAAE,EAAE,8CAA8C;SACrD;QACD;YACI,MAAM,EAAE,sDAAsD;YAC9D,EAAE,EAAE,8CAA8C;SACrD;QACD;YACI,MAAM,EAAE,sDAAsD;YAC9D,EAAE,EAAE,8CAA8C;SACrD;QACD;YACI,MAAM,EAAE,sDAAsD;YAC9D,EAAE,EAAE,8CAA8C;SACrD;KACJ;CACJ,CAAC;AAEF;;;GAGG;AACH;IAGI,0BAA4B,MAAuB;QAAvB,WAAM,GAAN,MAAM,CAAiB;QAF3C,WAAM,GAAgC,IAAI,GAAG,EAAE,CAAC;IAEF,CAAC;IAEvD;;OAEG;IACG,6BAAE,GAAR;;;;;;;wBACI,kBAAG,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC;wBACxC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,MAAM,EAAR,CAAQ,CAAC,CAAC;wBACpD,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAO,CAAC;;;;;;wCACrC,IAAI,GAAG,IAAI,mBAAW,EAAE,CAAC;wCACzB,YAAY,GAAG,UAAO,WAAqB,EAAE,QAAgB;;gDAC/D,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,MAAO,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;;;6CAC/D,CAAC;wCACS,qBAAM,IAAA,6BAAmB,EAAC,CAAC,CAAC,EAAE,CAAC,EAAA;;wCAApC,EAAE,GAAG,SAA+B;wCAC1C,IAAI,EAAE,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC,MAAM,EAAE;4CAC/B,MAAM,IAAI,KAAK,CAAC,kCAA2B,CAAC,CAAC,MAAM,4CAAkC,CAAC,CAAC,EAAE,CAAE,CAAC,CAAC;yCAChG;wCAED,qBAAM,IAAI,CAAC,IAAI,CAAC;gDACZ,OAAO,EAAE,EAAE;6CACd,CAAC,EAAA;;wCAFF,SAEE,CAAC;wCAEC,OAAO,GAA2B,IAAI,CAAC;wCACrC,cAAc;4CAAiB,2BAAiB;4CAA/B;gDAAA,qEAYtB;gDAXG,iBAAW,GAAG,IAAI,CAAC;gDAUnB,kBAAY,GAAG,YAAY,CAAC;;4CAChC,CAAC;4CATS,yBAAO,GAAb,UAAc,kBAAmC;;;wDAC7C,OAAO,GAAG,kBAAkB,CAAC;;;;6CAChC;4CAEK,4BAAU,GAAhB;;;wDACI,OAAO,GAAG,IAAI,CAAC;;;;6CAClB;4CAGL,cAAC;wCAAD,CAAC,AAZsB,CAAc,qCAAiB,EAYrD,CAAC;wCAEF,qBAAM,IAAI,CAAC,OAAO,CAAC,IAAI,cAAc,EAAE,CAAC,EAAA;;wCAAxC,SAAwC,CAAC;wCAEnC,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,MAAO,CAAC;wCAClC,OAAO,GAAgB;4CACzB,WAAW,EAAE,IAAI;4CACjB,WAAW,EAAE,IAAI,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,KAAK,MAAM,EAAZ,CAAY,CAAC,CAAC;4CAC5D,IAAI,EAAE,IAAI;4CACV,MAAM,EAAE,MAAM;4CACd,UAAU,EAAE,OAAQ;yCACvB,CAAC;wCACF,sBAAO,CAAC,MAAM,EAAE,OAAO,CAAU,EAAC;;;6BACrC,CAAC,CAAC;wBACY,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAA;;wBAApC,MAAM,GAAG,SAA2B;wBAC1C,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC;wBAC9B,kBAAG,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;;;;;KAC7C;IAED;;OAEG;IACG,+BAAI,GAAV;;;;;;wBACI,kBAAG,CAAC,KAAK,CAAC,oCAAoC,CAAC,CAAC;wBAC1C,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;wBAC1C,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,UAAC,EAAM;gCAAN,KAAA,aAAM,EAAL,CAAC,QAAA,EAAE,CAAC,QAAA;4BAC7B,OAAO,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;wBAC/D,CAAC,CAAC,CAAC;wBACH,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAA;;wBAA3B,SAA2B,CAAC;wBAC5B,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;wBACpB,kBAAG,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;;;;;KAC5C;IAED;;OAEG;IACH,6CAAkB,GAAlB,UAAmB,KAAgB,EAAE,IAAiB;QAClD,IAAM,EAAE,GAAG,IAAI,CAAC;QAChB,IAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,SAAS,KAAK,SAAS,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,8BAAuB,KAAK,6CAA0C,CAAC,CAAC;SAC3F;QAED,IAAM,cAAc;YAAiB,2BAAiB;YAA/B;gBAAA,qEAyBtB;gBAxBG,iBAAW,GAAG,KAAK,CAAC;;YAwBxB,CAAC;YAtBS,yBAAO,GAAb,UAAc,kBAAmC;;;;wBACvC,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,MAAO,CAAC;wBACxC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE;4BAClB,WAAW,EAAE,KAAK;4BAClB,IAAI,EAAE,IAAI;4BACV,UAAU,EAAE,kBAAkB;4BAC9B,MAAM,EAAE,MAAM;4BACd,WAAW,EAAE,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;yBAChC,CAAC,CAAC;wBACH,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;;;;aACrC;YAEK,4BAAU,GAAhB;;;;wBACU,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,MAAO,CAAC;wBACxC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;wBACrC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;;;;aAC5B;YAEK,8BAAY,GAAlB,UAAmB,WAAqB,EAAE,QAAgB;;;;wBAChD,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,MAAO,CAAC;wBACxC,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;;;;aAC3C;YACL,cAAC;QAAD,CAAC,AAzBsB,CAAc,qCAAiB,EAyBrD,CAAC;QAEF,OAAO,IAAI,cAAc,EAAE,CAAC;IAChC,CAAC;IAEa,gCAAK,GAAnB,UAAoB,IAAe,EAAE,EAAe,EAAE,QAAgB;;;;;gBAClE,kBAAG,CAAC,IAAI,CAAC,gCAAyB,IAAI,kBAAQ,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAE,CAAC,CAAC;gBAC9D,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACnC,IAAI,IAAI,KAAK,SAAS,EAAE;oBACpB,kBAAG,CAAC,KAAK,CAAC,eAAQ,IAAI,2CAAwC,CAAC,CAAC;oBAChE,sBAAO;iBACV;;oBAED,KAAiB,OAAA,SAAA,EAAE,CAAA,4DAAE;wBAAZ,IAAI;wBACT,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;4BAC7B,kBAAG,CAAC,KAAK,CAAC,eAAQ,IAAI,qCAA2B,IAAI,CAAE,CAAC,CAAC;4BACzD,SAAS;yBACZ;wBAEK,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;wBACvC,IAAI,QAAQ,KAAK,SAAS,EAAE;4BACxB,kBAAG,CAAC,KAAK,CAAC,eAAQ,QAAQ,0CAAuC,CAAC,CAAC;4BACnE,SAAS;yBACZ;wBAED,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;qBACjC;;;;;;;;;;;;KACJ;IACL,uBAAC;AAAD,CAAC,AAtID,IAsIC;AAtIY,4CAAgB","sourcesContent":["import { PeerIdB58 } from './commonTypes';\nimport { FluenceConnection, ParticleHandler } from './FluenceConnection';\nimport { FluencePeer } from '../index';\nimport { keyPairFromBase64Sk } from './KeyPair';\nimport log from 'loglevel';\n\ninterface EphemeralConfig {\n    peers: Array<{\n        peerId: PeerIdB58;\n        sk: string;\n    }>;\n}\n\ninterface PeerAdapter {\n    isEphemeral: boolean;\n    peer: FluencePeer;\n    peerId: PeerIdB58;\n    onIncoming: ParticleHandler;\n    connections: Set<PeerIdB58>;\n}\n\nexport const defaultConfig = {\n    peers: [\n        {\n            peerId: '12D3KooWJankP2PcEDYCZDdJ26JsU8BMRfdGWyGqbtFiWyoKVtmx',\n            sk: 'dWNAHhDVuFj9bEieILMu6TcCFRxBJdOPIvAWmf4sZQI=',\n        },\n        {\n            peerId: '12D3KooWSBTB5sYxdwayUyTnqopBwABsnGFY3p4dTx5hABYDtJjV',\n            sk: 'dOmaxAeu4Th+MJ22vRDLMFTNbiDgKNXar9fW9ofAMgQ=',\n        },\n        {\n            peerId: '12D3KooWQjwf781DJ41moW5RrZXypLdnTbo6aMsoA8QLctGGX8RB',\n            sk: 'TgzaLlxXuOMDNuuuTKEHUKsW0jM4AmX0gahFvkB1KgE=',\n        },\n        {\n            peerId: '12D3KooWCXWTLFyY1mqKnNAhLQTsjW1zqDzCMbUs8M4a8zdz28HK',\n            sk: 'hiO2Ta8g2ibMQ7iu5yj9CfN+qQCwE8oRShjr7ortKww=',\n        },\n        {\n            peerId: '12D3KooWPmZpf4ng6GMS39HLagxsXbjiTPLH5CFJpFAHyN6amw6V',\n            sk: 'LzJtOHTqxfrlHDW40BKiLfjai8JU4yW6/s2zrXLCcQE=',\n        },\n        {\n            peerId: '12D3KooWKrx8PZxM1R9A8tp2jmrFf6c6q1ZQiWfD4QkNgh7fWSoF',\n            sk: 'XMhlk/xr1FPcp7sKQhS18doXlq1x16EMhBC2NGW2LQ4=',\n        },\n        {\n            peerId: '12D3KooWCbJHvnzSZEXjR1UJmtSUozuJK13iRiCYHLN1gjvm4TZZ',\n            sk: 'KXPAIqxrSHr7v0ngv3qagcqivFvnQ0xd3s1/rKmi8QU=',\n        },\n        {\n            peerId: '12D3KooWEvKe7WQHp42W4xhHRgTAWQjtDWyH38uJbLHAsMuTtYvD',\n            sk: 'GCYMAshGnsrNtrHhuT7ayzh5uCzX99J03PmAXoOcCgw=',\n        },\n        {\n            peerId: '12D3KooWSznSHN3BGrSykBXkLkFsqo9SYB73wVauVdqeuRt562cC',\n            sk: 'UP+SEuznS0h259VbFquzyOJAQ4W5iIwhP+hd1PmUQQ0=',\n        },\n        {\n            peerId: '12D3KooWF57jwbShfnT3c4dNfRDdGjr6SQ3B71m87UVpEpSWHFwi',\n            sk: '8dl+Crm5RSh0eh+LqLKwX8/Eo4QLpvIjfD8L0wzX4A4=',\n        },\n        {\n            peerId: '12D3KooWBWrzpSg9nwMLBCa2cJubUjTv63Mfy6PYg9rHGbetaV5C',\n            sk: 'qolc1FcpJ+vHDon0HeXdUYnstjV1wiVx2p0mjblrfAg=',\n        },\n        {\n            peerId: '12D3KooWNkLVU6juM8oyN2SVq5nBd2kp7Rf4uzJH1hET6vj6G5j6',\n            sk: 'vN6QzWILTM7hSHp+iGkKxiXcqs8bzlnH3FPaRaDGSQY=',\n        },\n        {\n            peerId: '12D3KooWKo1YwGL5vivPiKJMJS7wjtB6B2nJNdSXPkSABT4NKBUU',\n            sk: 'YbDQ++bsor2kei7rYAsu2SbyoiOYPRzFRZWnNRUpBgQ=',\n        },\n        {\n            peerId: '12D3KooWLUyBKmmNCyxaPkXoWcUFPcy5qrZsUo2E1tyM6CJmGJvC',\n            sk: 'ptB9eSFMKudAtHaFgDrRK/1oIMrhBujxbMw2Pzwx/wA=',\n        },\n        {\n            peerId: '12D3KooWAEZXME4KMu9FvLezsJWDbYFe2zyujyMnDT1AgcAxgcCk',\n            sk: 'xtwTOKgAbDIgkuPf7RKiR7gYyZ1HY4mOgFMv3sOUcAQ=',\n        },\n        {\n            peerId: '12D3KooWEhXetsFVAD9h2dRz9XgFpfidho1TCZVhFrczX8h8qgzY',\n            sk: '1I2MGuiKG1F4FDMiRihVOcOP2mxzOLWJ99MeexK27A4=',\n        },\n        {\n            peerId: '12D3KooWDBfVNdMyV3hPEF4WLBmx9DwD2t2SYuqZ2mztYmDzZWM1',\n            sk: 'eqJ4Bp7iN4aBXgPH0ezwSg+nVsatkYtfrXv9obI0YQ0=',\n        },\n        {\n            peerId: '12D3KooWSyY7wiSiR4vbXa1WtZawi3ackMTqcQhEPrvqtagoWPny',\n            sk: 'UVM3SBJhPYIY/gafpnd9/q/Fn9V4BE9zkgrvF1T7Pgc=',\n        },\n        {\n            peerId: '12D3KooWFZmBMGG9PxTs9s6ASzkLGKJWMyPheA5ruaYc2FDkDTmv',\n            sk: '8RbZfEVpQhPVuhv64uqxENDuSoyJrslQoSQJznxsTQ0=',\n        },\n        {\n            peerId: '12D3KooWBbhUaqqur6KHPunnKxXjY1daCtqJdy4wRji89LmAkVB4',\n            sk: 'RbgKmG6soWW9uOi7yRedm+0Qck3f3rw6MSnDP7AcBQs=',\n        },\n    ],\n};\n\n/**\n * Ephemeral network implementation.\n * Ephemeral network is a virtual network which runs locally and focuses on p2p interaction by removing connectivity layer out of the equation.\n */\nexport class EphemeralNetwork {\n    private _peers: Map<PeerIdB58, PeerAdapter> = new Map();\n\n    constructor(public readonly config: EphemeralConfig) {}\n\n    /**\n     * Starts the Ephemeral network up\n     */\n    async up(): Promise<void> {\n        log.debug('Starting ephemeral network up...');\n        const allPeerIds = this.config.peers.map((x) => x.peerId);\n        const promises = this.config.peers.map(async (x) => {\n            const peer = new FluencePeer();\n            const sendParticle = async (nextPeerIds: string[], particle: string): Promise<void> => {\n                this._send(peer.getStatus().peerId!, nextPeerIds, particle);\n            };\n            const kp = await keyPairFromBase64Sk(x.sk);\n            if (kp.toB58String() !== x.peerId) {\n                throw new Error(`Invalid config: peer id ${x.peerId} does not match the secret key ${x.sk}`);\n            }\n\n            await peer.init({\n                KeyPair: kp,\n            });\n\n            let handler: ParticleHandler | null = null;\n            const connectionCtor = class extends FluenceConnection {\n                relayPeerId = null;\n\n                async connect(onIncomingParticle: ParticleHandler): Promise<void> {\n                    handler = onIncomingParticle;\n                }\n\n                async disconnect(): Promise<void> {\n                    handler = null;\n                }\n\n                sendParticle = sendParticle;\n            };\n\n            await peer.connect(new connectionCtor());\n\n            const peerId = peer.getStatus().peerId!;\n            const ephPeer: PeerAdapter = {\n                isEphemeral: true,\n                connections: new Set(allPeerIds.filter((x) => x !== peerId)),\n                peer: peer,\n                peerId: peerId,\n                onIncoming: handler!,\n            };\n            return [peerId, ephPeer] as const;\n        });\n        const values = await Promise.all(promises);\n        this._peers = new Map(values);\n        log.debug('Ephemeral network started...');\n    }\n\n    /**\n     * Shuts the ephemeral network down. Will disconnect all connected peers.\n     */\n    async down(): Promise<void> {\n        log.debug('Shutting down ephemeral network...');\n        const peers = Array.from(this._peers.entries());\n        const promises = peers.map(([k, p]) => {\n            return p.isEphemeral ? p.peer.stop() : p.peer.disconnect();\n        });\n        await Promise.all(promises);\n        this._peers.clear();\n        log.debug('Ephemeral network shut down');\n    }\n\n    /**\n     * Gets the FluenceConnection which can be used to connect to the ephemeral networks via the specified relay peer.\n     */\n    getRelayConnection(relay: PeerIdB58, peer: FluencePeer): FluenceConnection {\n        const me = this;\n        const relayPeer = this._peers.get(relay);\n        if (relayPeer === undefined) {\n            throw new Error(`Relay with peer Id: ${relay} has not been found in ephemeral network`);\n        }\n\n        const connectionCtor = class extends FluenceConnection {\n            relayPeerId = relay;\n\n            async connect(onIncomingParticle: ParticleHandler): Promise<void> {\n                const peerId = peer.getStatus().peerId!;\n                me._peers.set(peerId, {\n                    isEphemeral: false,\n                    peer: peer,\n                    onIncoming: onIncomingParticle,\n                    peerId: peerId,\n                    connections: new Set([relay]),\n                });\n                relayPeer.connections.add(peerId);\n            }\n\n            async disconnect(): Promise<void> {\n                const peerId = peer.getStatus().peerId!;\n                relayPeer.connections.delete(peerId);\n                me._peers.delete(peerId);\n            }\n\n            async sendParticle(nextPeerIds: string[], particle: string): Promise<void> {\n                const peerId = peer.getStatus().peerId!;\n                me._send(peerId, nextPeerIds, particle);\n            }\n        };\n\n        return new connectionCtor();\n    }\n\n    private async _send(from: PeerIdB58, to: PeerIdB58[], particle: string) {\n        log.info(`Sending particle from ${from}, to ${JSON.stringify(to)}`);\n        const peer = this._peers.get(from);\n        if (peer === undefined) {\n            log.error(`Peer ${from}  cannot be found in ephemeral network`);\n            return;\n        }\n\n        for (let dest of to) {\n            if (!peer.connections.has(dest)) {\n                log.error(`Peer ${from} has no connection with ${dest}`);\n                continue;\n            }\n\n            const destPeer = this._peers.get(dest);\n            if (destPeer === undefined) {\n                log.error(`peer ${destPeer} cannot be found in ephemeral network`);\n                continue;\n            }\n\n            destPeer.onIncoming(particle);\n        }\n    }\n}\n"]}
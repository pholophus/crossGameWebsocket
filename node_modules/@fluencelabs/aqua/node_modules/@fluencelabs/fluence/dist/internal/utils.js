"use strict";
/*
 * Copyright 2021 Fluence Labs Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.marineLogLevelToEnvs = exports.throwIfNotSupported = exports.jsonify = exports.dataToString = exports.checkConnection = exports.doNothing = exports.handleTimeout = exports.MakeServiceCall = void 0;
var loglevel_1 = __importDefault(require("loglevel"));
var platform_1 = __importDefault(require("platform"));
var commonTypes_1 = require("./commonTypes");
var Buffer_1 = __importDefault(require("./Buffer"));
var MakeServiceCall = function (fn) {
    return function (req) { return ({
        retCode: commonTypes_1.ResultCodes.success,
        result: fn(req.args),
    }); };
};
exports.MakeServiceCall = MakeServiceCall;
var handleTimeout = function (fn) { return function (stage) {
    if (stage.stage === 'expired') {
        fn();
    }
}; };
exports.handleTimeout = handleTimeout;
var doNothing = function () {
    var _args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        _args[_i] = arguments[_i];
    }
    return undefined;
};
exports.doNothing = doNothing;
/**
 * Checks the network connection by sending a ping-like request to relay node
 * @param { FluenceClient } peer - The Fluence Client instance.
 */
var checkConnection = function (peer, ttl) { return __awaiter(void 0, void 0, void 0, function () {
    var msg, promise, result, e_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!peer.getStatus().isConnected) {
                    return [2 /*return*/, false];
                }
                msg = Math.random().toString(36).substring(7);
                promise = new Promise(function (resolve, reject) {
                    var script = "\n    (xor\n        (seq\n            (call %init_peer_id% (\"load\" \"relay\") [] init_relay)\n            (seq\n                (call %init_peer_id% (\"load\" \"msg\") [] msg)\n                (seq \n                    (call init_relay (\"op\" \"identity\") [msg] result)\n                    (call %init_peer_id% (\"callback\" \"callback\") [result])\n                )\n            )\n        )\n        (seq \n            (call init_relay (\"op\" \"identity\") [])\n            (call %init_peer_id% (\"callback\" \"error\") [%last_error%])\n        )\n    )";
                    var particle = peer.internals.createNewParticle(script, ttl);
                    if (particle instanceof Error) {
                        return reject(particle.message);
                    }
                    peer.internals.regHandler.forParticle(particle.id, 'load', 'relay', (0, exports.MakeServiceCall)(function () {
                        return peer.getStatus().relayPeerId;
                    }));
                    peer.internals.regHandler.forParticle(particle.id, 'load', 'msg', (0, exports.MakeServiceCall)(function () {
                        return msg;
                    }));
                    peer.internals.regHandler.forParticle(particle.id, 'callback', 'callback', (0, exports.MakeServiceCall)(function (args) {
                        var _a = __read(args, 1), val = _a[0];
                        setTimeout(function () {
                            resolve(val);
                        }, 0);
                        return {};
                    }));
                    peer.internals.regHandler.forParticle(particle.id, 'callback', 'error', (0, exports.MakeServiceCall)(function (args) {
                        var _a = __read(args, 1), error = _a[0];
                        setTimeout(function () {
                            reject(error);
                        }, 0);
                        return {};
                    }));
                    peer.internals.initiateParticle(particle, (0, exports.handleTimeout)(function () {
                        reject('particle timed out');
                    }));
                });
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, promise];
            case 2:
                result = _a.sent();
                if (result != msg) {
                    loglevel_1.default.warn("unexpected behavior. 'identity' must return the passed arguments.");
                }
                return [2 /*return*/, true];
            case 3:
                e_1 = _a.sent();
                loglevel_1.default.error('Error on establishing connection: ', e_1);
                return [2 /*return*/, false];
            case 4: return [2 /*return*/];
        }
    });
}); };
exports.checkConnection = checkConnection;
function dataToString(data) {
    var text = new TextDecoder().decode(Buffer_1.default.from(data));
    // try to treat data as json and pretty-print it
    try {
        return JSON.stringify(JSON.parse(text), null, 4);
    }
    catch (_a) {
        return text;
    }
}
exports.dataToString = dataToString;
function jsonify(obj) {
    return JSON.stringify(obj, null, 4);
}
exports.jsonify = jsonify;
function throwIfNotSupported() {
    if (platform_1.default.name === 'Node.js' && platform_1.default.version) {
        var version = platform_1.default.version.split('.').map(Number);
        var major = version[0];
        if (major < 16) {
            throw new Error('FluenceJS requires node.js version >= "16.x"; Detected ' +
                platform_1.default.description +
                ' Please update node.js to version 16 or higher.\nYou can use https://nvm.sh utility to update node.js version: "nvm install 17 && nvm use 17 && nvm alias default 17"');
        }
    }
}
exports.throwIfNotSupported = throwIfNotSupported;
var marineLogLevelToEnvs = function (marineLogLevel) {
    return marineLogLevel ? { WASM_LOG: marineLogLevel } : undefined;
};
exports.marineLogLevelToEnvs = marineLogLevelToEnvs;
//# sourceMappingURL=utils.js.map
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var download_1 = __importDefault(require("download"));
var FaaS_1 = require("../FaaS");
var avm_1 = require("@fluencelabs/avm");
var fsPromises = fs_1.default.promises;
var vmPeerId = '12D3KooWNzutuy8WHXDKFqFsATvCR6j9cj2FijYbnd47geRKaQZS';
var b = function (s) {
    return Buffer.from(s);
};
var loadWasmModule = function (waspPath) { return __awaiter(void 0, void 0, void 0, function () {
    var fullPath, buffer, module;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                fullPath = path_1.default.join(waspPath);
                return [4 /*yield*/, fsPromises.readFile(fullPath)];
            case 1:
                buffer = _a.sent();
                return [4 /*yield*/, WebAssembly.compile(buffer)];
            case 2:
                module = _a.sent();
                return [2 /*return*/, module];
        }
    });
}); };
var redisDownloadUrl = 'https://github.com/fluencelabs/redis/releases/download/v0.15.0_w/redis.wasm';
var sqliteDownloadUrl = 'https://github.com/fluencelabs/sqlite/releases/download/v0.16.0_w/sqlite3.wasm';
var examplesDir = path_1.default.join(__dirname, '../../../../examples');
describe('Fluence app service tests', function () {
    it('Testing greeting service', function () { return __awaiter(void 0, void 0, void 0, function () {
        var marine, greeting, faas, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, loadWasmModule(path_1.default.join(__dirname, '../../dist/marine-js.wasm'))];
                case 1:
                    marine = _a.sent();
                    return [4 /*yield*/, loadWasmModule(path_1.default.join(examplesDir, './greeting/artifacts/greeting.wasm'))];
                case 2:
                    greeting = _a.sent();
                    faas = new FaaS_1.FaaS(marine, greeting, 'srv');
                    return [4 /*yield*/, faas.init()];
                case 3:
                    _a.sent();
                    res = JSON.parse(faas.call('greeting', '{"name": "test"}', undefined));
                    // assert
                    expect(res).toMatchObject({
                        error: '',
                        result: 'Hi, test',
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it('Testing greeting service with records', function () { return __awaiter(void 0, void 0, void 0, function () {
        var marine, greeting, faas, greetingRecordResult, voidResult;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, loadWasmModule(path_1.default.join(__dirname, '../../dist/marine-js.wasm'))];
                case 1:
                    marine = _a.sent();
                    return [4 /*yield*/, loadWasmModule(path_1.default.join(examplesDir, './greeting_record/artifacts/greeting-record.wasm'))];
                case 2:
                    greeting = _a.sent();
                    faas = new FaaS_1.FaaS(marine, greeting, 'srv');
                    return [4 /*yield*/, faas.init()];
                case 3:
                    _a.sent();
                    greetingRecordResult = JSON.parse(faas.call('greeting_record', '{}', undefined));
                    voidResult = JSON.parse(faas.call('void_fn', '{}', undefined));
                    // assert
                    expect(greetingRecordResult).toMatchObject({
                        error: '',
                        result: {
                            str: 'Hello, world!',
                            num: 42,
                        },
                    });
                    expect(voidResult.result).toStrictEqual(null);
                    return [2 /*return*/];
            }
        });
    }); });
    it('Running avm through FaaS infrastructure', function () { return __awaiter(void 0, void 0, void 0, function () {
        var avmPackagePath, avm, marine, testAvmFaaS, s, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    avmPackagePath = require.resolve('@fluencelabs/avm');
                    return [4 /*yield*/, loadWasmModule(path_1.default.join(path_1.default.dirname(avmPackagePath), 'avm.wasm'))];
                case 1:
                    avm = _a.sent();
                    return [4 /*yield*/, loadWasmModule(path_1.default.join(__dirname, '../../dist/marine-js.wasm'))];
                case 2:
                    marine = _a.sent();
                    testAvmFaaS = new FaaS_1.FaaS(marine, avm, 'avm');
                    return [4 /*yield*/, testAvmFaaS.init()];
                case 3:
                    _a.sent();
                    s = "(seq\n            (par \n                (call \"".concat(vmPeerId, "\" (\"local_service_id\" \"local_fn_name\") [] result_1)\n                (call \"remote_peer_id\" (\"service_id\" \"fn_name\") [] g)\n            )\n            (call \"").concat(vmPeerId, "\" (\"local_service_id\" \"local_fn_name\") [] result_2)\n        )");
                    return [4 /*yield*/, (0, avm_1.callAvm)(function (arg) { return testAvmFaaS.call('invoke', arg, undefined); }, vmPeerId, vmPeerId, s, b(''), b(''), [])];
                case 4:
                    res = _a.sent();
                    return [4 /*yield*/, testAvmFaaS.terminate()];
                case 5:
                    _a.sent();
                    // assert
                    expect(res).toMatchObject({
                        retCode: 0,
                        errorMessage: '',
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it('Testing sqlite wasm', function () { return __awaiter(void 0, void 0, void 0, function () {
        var control, buf, sqlite, marine, result, dbHandle;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, loadWasmModule(path_1.default.join(__dirname, '../../dist/marine-js.wasm'))];
                case 1:
                    control = _a.sent();
                    return [4 /*yield*/, (0, download_1.default)(sqliteDownloadUrl)];
                case 2:
                    buf = _a.sent();
                    return [4 /*yield*/, WebAssembly.compile(buf)];
                case 3:
                    sqlite = _a.sent();
                    marine = new FaaS_1.FaaS(control, sqlite, 'sqlite');
                    return [4 /*yield*/, marine.init()];
                case 4:
                    _a.sent();
                    result = doCall(marine, 'sqlite3_open_v2', ':memory:', 6, '');
                    dbHandle = result.db_handle;
                    result = doCall(marine, 'sqlite3_exec', dbHandle, 'CREATE VIRTUAL TABLE users USING FTS5(body)', 0, 0);
                    expect(result).toMatchObject({ err_msg: '', ret_code: 0 });
                    result = doCall(marine, 'sqlite3_exec', dbHandle, "INSERT INTO users(body) VALUES('AB'), ('BC'), ('CD'), ('DE')", 0, 0);
                    expect(result).toMatchObject({ err_msg: '', ret_code: 0 });
                    result = doCall(marine, 'sqlite3_exec', dbHandle, "SELECT * FROM users WHERE users MATCH 'A* OR B*'", 0, 0);
                    expect(result).toMatchObject({ err_msg: '', ret_code: 0 });
                    return [2 /*return*/];
            }
        });
    }); });
    it.skip('Testing redis wasm', function () { return __awaiter(void 0, void 0, void 0, function () {
        var control, buf, redis, marine, result1, result2, result3, result4, result5;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, loadWasmModule(path_1.default.join(__dirname, '../../dist/marine-js.wasm'))];
                case 1:
                    control = _a.sent();
                    return [4 /*yield*/, (0, download_1.default)(redisDownloadUrl)];
                case 2:
                    buf = _a.sent();
                    return [4 /*yield*/, WebAssembly.compile(buf)];
                case 3:
                    redis = _a.sent();
                    marine = new FaaS_1.FaaS(control, redis, 'redis');
                    return [4 /*yield*/, marine.init()];
                case 4:
                    _a.sent();
                    result1 = doCall(marine, 'invoke', 'SET A 10');
                    result2 = doCall(marine, 'invoke', 'SADD B 20');
                    result3 = doCall(marine, 'invoke', 'GET A');
                    result4 = doCall(marine, 'invoke', 'SMEMBERS B');
                    result5 = doCall(marine, 'invoke', "eval \"redis.call('incr', 'A') return redis.call('get', 'A') * 8 + 5\"  0");
                    expect(result1).toBe('+OK\r\n');
                    expect(result2).toBe(':1\r\n');
                    expect(result3).toBe('$2\r\n10\r\n');
                    expect(result4).toBe('*1\r\n$2\r\n20\r\n');
                    expect(result5).toBe(':93\r\n');
                    return [2 /*return*/];
            }
        });
    }); });
});
var doCall = function (marine, fn) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    var argsStr = JSON.stringify(args);
    var rawRes = marine.call(fn, argsStr, undefined);
    var res = JSON.parse(rawRes);
    if (res.error && res.error.length > 0) {
        throw new Error("call failed args: ".concat(argsStr, ", res: ").concat(rawRes));
    }
    return res.result;
};
//# sourceMappingURL=test.spec.js.map
{"version":3,"file":"jsonBuiltin.spec.js","sourceRoot":"","sources":["../../../src/__test__/integration/jsonBuiltin.spec.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,8CAAiD;AACjD,qCAA0C;AAE1C,IAAI,IAAiB,CAAC;AAEtB,QAAQ,CAAC,wBAAwB,EAAE;IAC/B,SAAS,CAAC;;;;yBACF,IAAI,EAAJ,wBAAI;oBACJ,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;oBAAjB,SAAiB,CAAC;;;;;SAEzB,CAAC,CAAC;IAEH,UAAU,CAAC;;;;oBACP,IAAI,GAAG,IAAI,mBAAW,EAAE,CAAC;oBACzB,qBAAM,IAAI,CAAC,KAAK,EAAE,EAAA;;oBAAlB,SAAkB,CAAC;;;;SACtB,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE;;;;;oBACd,MAAM,GAAG,22CA0BlB,CAAC;oBACQ,OAAO,GAAG,IAAI,OAAO,CAAM,UAAC,OAAO;wBACrC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,EAAE,UAAC,GAAG;4BAC/C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;4BAClB,OAAO;gCACH,MAAM,EAAE,EAAE;gCACV,OAAO,EAAE,CAAC;6BACb,CAAC;wBACN,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;oBACG,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,MAAM,CAAa,CAAC;oBAC/D,qBAAM,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,EAAE,iBAAS,CAAC,EAAA;;oBAAnD,SAAmD,CAAC;oBAE6C,qBAAM,OAAO,EAAA;;oBAAxG,KAAA,sBAA2F,SAAa,KAAA,EAAvG,WAAW,QAAA,EAAE,YAAY,QAAA,EAAE,UAAU,QAAA,EAAE,WAAW,QAAA,EAAE,gBAAgB,QAAA,EAAE,gBAAgB,QAAA;oBAEvF,UAAU,GAAG,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;oBAC9C,UAAU,GAAG,EAAE,IAAI,EAAE,eAAe,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;oBAE/C,UAAU,GAAG,EAAE,IAAI,EAAE,aAAa,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;oBACjE,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;oBACtC,UAAU,GAAG,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC;oBAExE,MAAM,CAAC,WAAW,CAAC,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;oBAC9C,MAAM,CAAC,YAAY,CAAC,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;oBAC/C,MAAM,CAAC,UAAU,CAAC,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;oBAC7C,MAAM,CAAC,WAAW,CAAC,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;oBAC9C,MAAM,CAAC,gBAAgB,CAAC,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;oBACnD,MAAM,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;;;SAC3C,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { Particle } from '../../internal/Particle';\nimport { doNothing } from '../../internal/utils';\nimport { FluencePeer } from '../../index';\n\nlet peer: FluencePeer;\n\ndescribe('Sig service test suite', () => {\n    afterEach(async () => {\n        if (peer) {\n            await peer.stop();\n        }\n    });\n\n    beforeEach(async () => {\n        peer = new FluencePeer();\n        await peer.start();\n    });\n\n    it('JSON builtin spec', async () => {\n        const script = `\n        (seq\n            (seq\n                (seq\n                    ;; create\n                    (seq\n                        (call %init_peer_id% (\"json\" \"obj\") [\"name\" \"nested_first\" \"num\" 1] nested_first)\n                        (call %init_peer_id% (\"json\" \"obj\") [\"name\" \"nested_second\" \"num\" 2] nested_second)\n                    )\n                    (call %init_peer_id% (\"json\" \"obj\") [\"name\" \"outer_first\" \"num\" 0 \"nested\" nested_first] outer_first)\n                )\n                (seq\n                    ;; modify\n                    (seq\n                        (call %init_peer_id% (\"json\" \"put\") [outer_first \"nested\" nested_second] outer_tmp_second)\n                        (call %init_peer_id% (\"json\" \"puts\") [outer_tmp_second \"name\" \"outer_second\" \"num\" 3] outer_second)\n                    )\n                    ;; stringify and parse\n                    (seq\n                        (call %init_peer_id% (\"json\" \"stringify\") [outer_first] outer_first_string)\n                        (call %init_peer_id% (\"json\" \"parse\") [outer_first_string] outer_first_parsed)\n                    )\n                )\n            )\n            (call %init_peer_id% (\"res\" \"res\") [nested_first nested_second outer_first outer_second outer_first_string outer_first_parsed])\n        )\n    `;\n        const promise = new Promise<any>((resolve) => {\n            peer.internals.regHandler.common('res', 'res', (req) => {\n                resolve(req.args);\n                return {\n                    result: {},\n                    retCode: 0,\n                };\n            });\n        });\n        const p = peer.internals.createNewParticle(script) as Particle;\n        await peer.internals.initiateParticle(p, doNothing);\n\n        const [nestedFirst, nestedSecond, outerFirst, outerSecond, outerFirstString, outerFirstParsed] = await promise;\n\n        const nfExpected = { name: 'nested_first', num: 1 };\n        const nsExpected = { name: 'nested_second', num: 2 };\n\n        const ofExpected = { name: 'outer_first', nested: nfExpected, num: 0 };\n        const ofString = JSON.stringify(ofExpected);\n        const osExpected = { name: 'outer_second', num: 3, nested: nsExpected };\n\n        expect(nestedFirst).toMatchObject(nfExpected);\n        expect(nestedSecond).toMatchObject(nsExpected);\n        expect(outerFirst).toMatchObject(ofExpected);\n        expect(outerSecond).toMatchObject(osExpected);\n        expect(outerFirstParsed).toMatchObject(ofExpected);\n        expect(outerFirstString).toBe(ofString);\n    });\n});\n"]}
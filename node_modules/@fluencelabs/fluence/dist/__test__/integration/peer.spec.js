"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var multiaddr_1 = require("multiaddr");
var connection_1 = require("../connection");
var index_1 = require("../../index");
var utils_1 = require("../../internal/utils");
var util_1 = require("../util");
var peer;
describe('Typescript usage suite', function () {
    afterEach(function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!peer) return [3 /*break*/, 2];
                    return [4 /*yield*/, peer.stop()];
                case 1:
                    _a.sent();
                    _a.label = 2;
                case 2: return [2 /*return*/];
            }
        });
    }); });
    beforeEach(function () {
        peer = new index_1.FluencePeer();
    });
    it('should perform test for FluencePeer class correctly', function () {
        // arrange
        var number = 1;
        var object = { str: 'Hello!' };
        var undefinedVal = undefined;
        // act
        var isPeerPeer = index_1.FluencePeer.isInstance(peer);
        var isNumberPeer = index_1.FluencePeer.isInstance(number);
        var isObjectPeer = index_1.FluencePeer.isInstance(object);
        var isUndefinedPeer = index_1.FluencePeer.isInstance(undefinedVal);
        // act
        expect(isPeerPeer).toBe(true);
        expect(isNumberPeer).toBe(false);
        expect(isObjectPeer).toBe(false);
        expect(isUndefinedPeer).toBe(false);
    });
    describe('Should expose correct peer status', function () {
        it('Should expose correct status for uninitialized peer', function () {
            var status = peer.getStatus();
            expect(status.isConnected).toBe(false);
            expect(status.isInitialized).toBe(false);
            expect(status.peerId).toBe(null);
            expect(status.relayPeerId).toBe(null);
        });
        it('Should expose correct status for initialized but not connected peer', function () { return __awaiter(void 0, void 0, void 0, function () {
            var status;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // arrange
                    return [4 /*yield*/, peer.start()];
                    case 1:
                        // arrange
                        _a.sent();
                        status = peer.getStatus();
                        // assert
                        expect(status.isConnected).toBe(false);
                        expect(status.isInitialized).toBe(true);
                        expect(status.peerId).not.toBe(null);
                        expect(status.relayPeerId).toBe(null);
                        return [2 /*return*/];
                }
            });
        }); });
        it('Should expose correct status for connected peer', function () { return __awaiter(void 0, void 0, void 0, function () {
            var status;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // arrange
                    return [4 /*yield*/, peer.start({ connectTo: connection_1.nodes[0] })];
                    case 1:
                        // arrange
                        _a.sent();
                        status = peer.getStatus();
                        // assert
                        expect(status.isConnected).toBe(true);
                        expect(status.isInitialized).toBe(true);
                        expect(status.peerId).not.toBe(null);
                        expect(status.relayPeerId).not.toBe(null);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    it('should make a call through network', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: 
                // arrange
                return [4 /*yield*/, peer.start({ connectTo: connection_1.nodes[0] })];
                case 1:
                    // arrange
                    _a.sent();
                    return [4 /*yield*/, new Promise(function (resolve, reject) {
                            var script = "\n    (xor\n        (seq\n            (call %init_peer_id% (\"load\" \"relay\") [] init_relay)\n            (seq\n                (call init_relay (\"op\" \"identity\") [\"hello world!\"] result)\n                (call %init_peer_id% (\"callback\" \"callback\") [result])\n            )\n        )\n        (seq \n            (call init_relay (\"op\" \"identity\") [])\n            (call %init_peer_id% (\"callback\" \"error\") [%last_error%])\n        )\n    )";
                            var particle = peer.internals.createNewParticle(script);
                            if (particle instanceof Error) {
                                return reject(particle.message);
                            }
                            (0, util_1.registerHandlersHelper)(peer, particle, {
                                load: {
                                    relay: function () {
                                        return peer.getStatus().relayPeerId;
                                    },
                                },
                                callback: {
                                    callback: function (args) {
                                        var _a = __read(args, 1), val = _a[0];
                                        resolve(val);
                                    },
                                    error: function (args) {
                                        var _a = __read(args, 1), error = _a[0];
                                        reject(error);
                                    },
                                },
                            });
                            peer.internals.initiateParticle(particle, (0, utils_1.handleTimeout)(reject));
                        })];
                case 2:
                    result = _a.sent();
                    expect(result).toBe('hello world!');
                    return [2 /*return*/];
            }
        });
    }); });
    it('check connection should work', function () {
        return __awaiter(this, void 0, void 0, function () {
            var isConnected;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, peer.start({ connectTo: connection_1.nodes[0] })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, (0, utils_1.checkConnection)(peer)];
                    case 2:
                        isConnected = _a.sent();
                        expect(isConnected).toEqual(true);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('check connection should work with ttl', function () {
        return __awaiter(this, void 0, void 0, function () {
            var isConnected;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, peer.start({ connectTo: connection_1.nodes[0] })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, (0, utils_1.checkConnection)(peer, 10000)];
                    case 2:
                        isConnected = _a.sent();
                        expect(isConnected).toEqual(true);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('two clients should work inside the same time browser', function () { return __awaiter(void 0, void 0, void 0, function () {
        var peer1, peer2, res, script, particle, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    peer1 = new index_1.FluencePeer();
                    return [4 /*yield*/, peer1.start({ connectTo: connection_1.nodes[0] })];
                case 1:
                    _b.sent();
                    peer2 = new index_1.FluencePeer();
                    return [4 /*yield*/, peer2.start({ connectTo: connection_1.nodes[0] })];
                case 2:
                    _b.sent();
                    res = new Promise(function (resolve) {
                        peer2.internals.regHandler.common('test', 'test', function (req) {
                            resolve(req.args[0]);
                            return {
                                result: {},
                                retCode: 0,
                            };
                        });
                    });
                    script = "\n            (seq\n                (call \"".concat(peer1.getStatus().relayPeerId, "\" (\"op\" \"identity\") [])\n                (call \"").concat(peer2.getStatus().peerId, "\" (\"test\" \"test\") [\"test\"])\n            )\n        ");
                    particle = peer1.internals.createNewParticle(script);
                    if (particle instanceof Error) {
                        throw particle;
                    }
                    peer1.internals.initiateParticle(particle, utils_1.doNothing);
                    _a = expect;
                    return [4 /*yield*/, res];
                case 3:
                    _a.apply(void 0, [_b.sent()]).toEqual('test');
                    return [4 /*yield*/, peer1.stop()];
                case 4:
                    _b.sent();
                    return [4 /*yield*/, peer2.stop()];
                case 5:
                    _b.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    describe('should make connection to network', function () {
        it('address as string', function () { return __awaiter(void 0, void 0, void 0, function () {
            var isConnected;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, peer.start({ connectTo: connection_1.nodes[0].multiaddr })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, (0, utils_1.checkConnection)(peer)];
                    case 2:
                        isConnected = _a.sent();
                        expect(isConnected).toBeTruthy();
                        return [2 /*return*/];
                }
            });
        }); });
        it('address as multiaddr', function () { return __awaiter(void 0, void 0, void 0, function () {
            var isConnected;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, peer.start({ connectTo: new multiaddr_1.Multiaddr(connection_1.nodes[0].multiaddr) })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, (0, utils_1.checkConnection)(peer)];
                    case 2:
                        isConnected = _a.sent();
                        expect(isConnected).toBeTruthy();
                        return [2 /*return*/];
                }
            });
        }); });
        it('address as node', function () { return __awaiter(void 0, void 0, void 0, function () {
            var isConnected;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, peer.start({ connectTo: connection_1.nodes[0] })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, (0, utils_1.checkConnection)(peer)];
                    case 2:
                        isConnected = _a.sent();
                        expect(isConnected).toBeTruthy();
                        return [2 /*return*/];
                }
            });
        }); });
        it('With connection options: dialTimeout', function () { return __awaiter(void 0, void 0, void 0, function () {
            var isConnected;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, peer.start({ connectTo: connection_1.nodes[0], dialTimeoutMs: 100000 })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, (0, utils_1.checkConnection)(peer)];
                    case 2:
                        isConnected = _a.sent();
                        expect(isConnected).toBeTruthy();
                        return [2 /*return*/];
                }
            });
        }); });
        it('With connection options: skipCheckConnection', function () { return __awaiter(void 0, void 0, void 0, function () {
            var isConnected;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, peer.start({ connectTo: connection_1.nodes[0], skipCheckConnection: true })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, (0, utils_1.checkConnection)(peer)];
                    case 2:
                        isConnected = _a.sent();
                        expect(isConnected).toBeTruthy();
                        return [2 /*return*/];
                }
            });
        }); });
        it('With connection options: checkConnectionTTL', function () { return __awaiter(void 0, void 0, void 0, function () {
            var isConnected;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, peer.start({ connectTo: connection_1.nodes[0], checkConnectionTimeoutMs: 1000 })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, (0, utils_1.checkConnection)(peer)];
                    case 2:
                        isConnected = _a.sent();
                        expect(isConnected).toBeTruthy();
                        return [2 /*return*/];
                }
            });
        }); });
        it('With connection options: defaultTTL', function () { return __awaiter(void 0, void 0, void 0, function () {
            var isConnected;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, peer.start({ connectTo: connection_1.nodes[0], defaultTtlMs: 1 })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, (0, utils_1.checkConnection)(peer)];
                    case 2:
                        isConnected = _a.sent();
                        expect(isConnected).toBeFalsy();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    it('Should successfully call identity on local peer', function () {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, peer.start()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                var script = "\n            (seq\n                (call %init_peer_id% (\"op\" \"identity\") [\"test\"] res)\n                (call %init_peer_id% (\"callback\" \"callback\") [res])\n            )\n            ";
                                var particle = peer.internals.createNewParticle(script);
                                if (particle instanceof Error) {
                                    return reject(particle.message);
                                }
                                (0, util_1.registerHandlersHelper)(peer, particle, {
                                    callback: {
                                        callback: function (args) { return __awaiter(_this, void 0, void 0, function () {
                                            var _a, res;
                                            return __generator(this, function (_b) {
                                                _a = __read(args, 1), res = _a[0];
                                                resolve(res);
                                                return [2 /*return*/];
                                            });
                                        }); },
                                    },
                                });
                                peer.internals.initiateParticle(particle, (0, utils_1.handleTimeout)(reject));
                            })];
                    case 2:
                        res = _a.sent();
                        expect(res).toBe('test');
                        return [2 /*return*/];
                }
            });
        });
    });
    it('Should throw correct message when calling non existing local service', function () {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, peer.start({ connectTo: connection_1.nodes[0] })];
                    case 1:
                        _a.sent();
                        res = callIncorrectService(peer);
                        return [4 /*yield*/, expect(res).rejects.toMatchObject({
                                message: expect.stringContaining("No handler has been registered for serviceId='incorrect' fnName='incorrect' args='[]'\"'"),
                                // instruction: 'call %init_peer_id% ("incorrect" "incorrect") [] res',
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('Should not crash if undefined is passed as a variable', function () { return __awaiter(void 0, void 0, void 0, function () {
        var res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, peer.start()];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, new Promise(function (resolve, reject) {
                            var script = "\n        (seq\n            (call %init_peer_id% (\"load\" \"arg\") [] arg)\n            (seq\n                (call %init_peer_id% (\"op\" \"identity\") [arg] res)\n                (call %init_peer_id% (\"callback\" \"callback\") [res])\n            )\n        )";
                            var particle = peer.internals.createNewParticle(script);
                            if (particle instanceof Error) {
                                return reject(particle.message);
                            }
                            (0, util_1.registerHandlersHelper)(peer, particle, {
                                load: {
                                    arg: function () { return undefined; },
                                },
                                callback: {
                                    callback: function (args) {
                                        var _a = __read(args, 1), val = _a[0];
                                        resolve(val);
                                    },
                                    error: function (args) {
                                        var _a = __read(args, 1), error = _a[0];
                                        reject(error);
                                    },
                                },
                            });
                            peer.internals.initiateParticle(particle, (0, utils_1.handleTimeout)(reject));
                        })];
                case 2:
                    res = _a.sent();
                    expect(res).toBe(null);
                    return [2 /*return*/];
            }
        });
    }); });
    it('Should not crash if an error ocurred in user-defined handler', function () { return __awaiter(void 0, void 0, void 0, function () {
        var promise;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, peer.start()];
                case 1:
                    _a.sent();
                    promise = new Promise(function (_resolve, reject) {
                        var script = "\n        (xor\n            (call %init_peer_id% (\"load\" \"arg\") [] arg)\n            (call %init_peer_id% (\"callback\" \"error\") [%last_error%])\n        )";
                        var particle = peer.internals.createNewParticle(script);
                        if (particle instanceof Error) {
                            return reject(particle.message);
                        }
                        (0, util_1.registerHandlersHelper)(peer, particle, {
                            load: {
                                arg: function () {
                                    throw new Error('my super custom error message');
                                },
                            },
                            callback: {
                                error: function (args) {
                                    var _a = __read(args, 1), error = _a[0];
                                    reject(error);
                                },
                            },
                        });
                        peer.internals.initiateParticle(particle, (0, utils_1.handleTimeout)(reject));
                    });
                    return [4 /*yield*/, expect(promise).rejects.toMatchObject({
                            message: expect.stringContaining('my super custom error message'),
                        })];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('Should return error if particle is created on a stopped peer', function () { return __awaiter(void 0, void 0, void 0, function () {
        var particle;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, peer.stop()];
                case 1:
                    _a.sent();
                    particle = peer.internals.createNewParticle("(null)");
                    expect(particle instanceof Error).toBe(true);
                    return [2 /*return*/];
            }
        });
    }); });
    it.skip('Should throw correct error when the client tries to send a particle not to the relay', function () { return __awaiter(void 0, void 0, void 0, function () {
        var promise;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, peer.start({ connectTo: connection_1.nodes[0] })];
                case 1:
                    _a.sent();
                    promise = new Promise(function (resolve, reject) {
                        var script = "\n    (xor\n        (call \"incorrect_peer_id\" (\"any\" \"service\") [])\n        (call %init_peer_id% (\"callback\" \"error\") [%last_error%])\n    )";
                        var particle = peer.internals.createNewParticle(script);
                        if (particle instanceof Error) {
                            return reject(particle.message);
                        }
                        (0, util_1.registerHandlersHelper)(peer, particle, {
                            callback: {
                                error: function (args) {
                                    var _a = __read(args, 1), error = _a[0];
                                    reject(error);
                                },
                            },
                        });
                        peer.internals.initiateParticle(particle, utils_1.doNothing);
                    });
                    return [4 /*yield*/, expect(promise).rejects.toMatch('Particle is expected to be sent to only the single peer (relay which client is connected to)')];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
});
function callIncorrectService(peer) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    var script = "\n    (xor\n        (call %init_peer_id% (\"incorrect\" \"incorrect\") [] res)\n        (call %init_peer_id% (\"callback\" \"error\") [%last_error%])\n    )";
                    var particle = peer.internals.createNewParticle(script);
                    if (particle instanceof Error) {
                        return reject(particle.message);
                    }
                    (0, util_1.registerHandlersHelper)(peer, particle, {
                        callback: {
                            callback: function (args) {
                                resolve(args);
                            },
                            error: function (args) {
                                var _a = __read(args, 1), error = _a[0];
                                reject(error);
                            },
                        },
                    });
                    peer.internals.initiateParticle(particle, (0, utils_1.handleTimeout)(reject));
                })];
        });
    });
}
//# sourceMappingURL=peer.spec.js.map
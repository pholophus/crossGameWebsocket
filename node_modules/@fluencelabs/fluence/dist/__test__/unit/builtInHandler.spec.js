"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jest_each_1 = __importDefault(require("jest-each"));
var common_1 = require("../../internal/builtins/common");
var keypair_1 = require("@fluencelabs/keypair");
var Sig_1 = require("../../internal/builtins/Sig");
var js_base64_1 = require("js-base64");
var a10b20 = "{\n    \"a\": 10,\n    \"b\": 20\n}";
var oneTwoThreeFour = "[\n    1,\n    2,\n    3,\n    4\n]";
describe('Tests for default handler', function () {
    // prettier-ignore
    (0, jest_each_1.default)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  serviceId     | fnName               | args                                      | retCode | result\n  ", "       | ", "        | ", "                                     | ", "    | ", "\n  ", "       | ", "        | ", "                                    | ", "    | ", "\n  ", "       | ", "        | ", "                                 | ", "    | ", "\n     \n  ", "       | ", "            | ", "                                 | ", "    | ", "\n     \n  ", "       | ", "           | ", "                              | ", "    | ", "\n  \n  ", "       | ", "    | ", "                            | ", "    | ", "\n  ", "       | ", "    | ", "                                     | ", "    | ", "\n     \n  ", "       | ", "          | ", "               | ", "    | ", "\n  ", "       | ", "          | ", "                               | ", "    | ", "\n  ", "       | ", "          | ", "                                     | ", "    | ", "\n  ", "       | ", "          | ", "                         | ", "    | ", "\n     \n  ", "       | ", "   | ", "                               | ", "    | ", "\n  ", "       | ", "   | ", "                            | ", "    | ", "\n     \n  ", "       | ", " | ", "                             | ", "    | ", "\n  ", "       | ", " | ", "                          | ", "    | ", "\n     \n  ", "       | ", "    | ", "                 | ", "    | ", "\n  ", "       | ", "    | ", "              | ", "    | ", "\n     \n  ", "       | ", "  | ", "                             | ", "    | ", "\n  ", "       | ", "  | ", "                          | ", "    | ", "\n\n  ", "       | ", "   | ", "                      | ", "    | ", "\n  ", "       | ", "   | ", "                | ", "    | ", "\n  ", "       | ", "   | ", "                                     | ", "    | ", "\n\n  ", "       | ", "  | ", "                                     | ", "    | ", "\n  ", "       | ", "  | ", "                        | ", "    | ", "\n     \n  ", "     | ", "         | ", "                              | ", "    | ", "}\n  ", "     | ", "         | ", "                        | ", "    | ", "}\n  ", "     | ", "         | ", "                                     | ", "    | ", "}\n  ", "     | ", "         | ", "                       | ", "    | ", "}\n\n  ", "    | ", "       | ", "                                     | ", "    | ", "}\n  ", "    | ", "       | ", "                       | ", "    | ", "}\n  ", "    | ", "       | ", "                           | ", "    | ", "}\n  \n  ", "     | ", "\"            | ", "                                 | ", "    | ", "\n  ", "     | ", "\"            | ", "                                    | ", "    | ", "\n\n  ", "     | ", "\"            | ", "                                 | ", "    | ", "\n  ", "     | ", "\"            | ", "                                 | ", "    | ", "\n\n  ", "     | ", "\"            | ", "                                 | ", "    | ", "\n  ", "     | ", "\"            | ", "                                 | ", "    | ", "\n  ", "     | ", "\"            | ", "                                | ", "    | ", "\n\n  ", "     | ", "\"           | ", "                             | ", "    | ", "\n  ", "     | ", "\"           | ", "                             | ", "    | ", "\n  ", "     | ", "\"           | ", "                           | ", "    | ", "\n\n  ", "     | ", "\"            | ", "                                 | ", "    | ", "\n  ", "     | ", "\"            | ", "                                 | ", "    | ", "\n  ", "     | ", "\"            | ", "                                | ", "    | ", "\n\n  ", "     | ", "\"            | ", "                                | ", "    | ", "\n\n  ", "     | ", "\"            | ", "                                 | ", "    | ", "\n  ", "     | ", "\"            | ", "                                 | ", "    | ", "\n\n  ", "     | ", "\"            | ", "                                 | ", "    | ", "\n  ", "     | ", "\"            | ", "                                 | ", "    | ", "\n\n  ", "      | ", "\"             | ", "                                 | ", "    | ", "\n  ", "      | ", "\"            | ", "                                 | ", "    | ", "\n  ", "      | ", "\"            | ", "                                 | ", "    | ", "\n  ", "      | ", "\"            | ", "                                 | ", "    | ", "\n\n  ", "      | ", "\"             | ", "                                 | ", "    | ", "\n  ", "      | ", "\"            | ", "                                 | ", "    | ", "\n  ", "      | ", "\"            | ", "                                 | ", "    | ", "\n  ", "      | ", "\"            | ", "                                 | ", "    | ", "\n\n  ", "      | ", "\"            | ", "                                 | ", "    | ", "\n  ", "      | ", "\"            | ", "                                | ", "    | ", "\n  ", "      | ", "\"            | ", "                                 | ", "    | ", "\n\n  ", "    | ", "\"            | ", "                            | ", "    | ", "\n  ", "    | ", "\"          | ", "  | ", "    | ", "\n  ", "    | ", "\"      | ", "     | ", "    | ", "\n  ", "    | ", "\"           | ", "     | ", "    | ", "\n  ", "    | ", "\"          | ", "     | ", "    | ", "\n\n  ", "     | ", "\"            | ", "    | ", "    | ", "\n  ", "     | ", "\"            | ", "          | ", "    | ", "\n  ", "     | ", "\"            | ", "                                     | ", "    | ", "\n  \n  ", "     | ", "\"            | ", "                          | ", "    | ", "\n  ", "     | ", "\"            | ", "                     | ", "    | ", "\n  ", "     | ", "\"            | ", "                         | ", "    | ", "\n  ", "     | ", "\"            | ", "                 | ", "    | ", "\n  ", "     | ", "\"            | ", "                                   | ", "    | ", "\n\n  ", "     | ", "\"           | ", "                                  | ", "    | ", "\n  ", "     | ", "\"           | ", "                             | ", "    | ", "\n  ", "     | ", "\"           | ", "        | ", "    | ", "\n  ", "     | ", "\"           | ", "          | ", "    | ", "\n  ", "     | ", "\"           | ", "                                           | ", "    | ", "\n  ", "     | ", "\"           | ", "                                 | ", "    | ", "\n\n  ", "     | ", "\"      | ", "                | ", "    | ", "\n  ", "     | ", "\"      | ", "                                            | ", "    | ", "\n  ", "     | ", "\"          | ", "     | ", "    | ", "\n  ", "     | ", "\"          | ", "                                  | ", "    | ", "\n  ", "     | ", "\"          | ", "                                           | ", "    | ", "\n\n  "], ["\n  serviceId     | fnName               | args                                      | retCode | result\n  ", "       | ", "        | ", "                                     | ", "    | ", "\n  ", "       | ", "        | ", "                                    | ", "    | ", "\n  ", "       | ", "        | ", "                                 | ", "    | ", "\n     \n  ", "       | ", "            | ", "                                 | ", "    | ", "\n     \n  ", "       | ", "           | ", "                              | ", "    | ", "\n  \n  ", "       | ", "    | ", "                            | ", "    | ", "\n  ", "       | ", "    | ", "                                     | ", "    | ", "\n     \n  ", "       | ", "          | ", "               | ", "    | ", "\n  ", "       | ", "          | ", "                               | ", "    | ", "\n  ", "       | ", "          | ", "                                     | ", "    | ", "\n  ", "       | ", "          | ", "                         | ", "    | ", "\n     \n  ", "       | ", "   | ", "                               | ", "    | ", "\n  ", "       | ", "   | ", "                            | ", "    | ", "\n     \n  ", "       | ", " | ", "                             | ", "    | ", "\n  ", "       | ", " | ", "                          | ", "    | ", "\n     \n  ", "       | ", "    | ", "                 | ", "    | ", "\n  ", "       | ", "    | ", "              | ", "    | ", "\n     \n  ", "       | ", "  | ", "                             | ", "    | ", "\n  ", "       | ", "  | ", "                          | ", "    | ", "\n\n  ", "       | ", "   | ", "                      | ", "    | ", "\n  ", "       | ", "   | ", "                | ", "    | ", "\n  ", "       | ", "   | ", "                                     | ", "    | ", "\n\n  ", "       | ", "  | ", "                                     | ", "    | ", "\n  ", "       | ", "  | ", "                        | ", "    | ", "\n     \n  ", "     | ", "         | ", "                              | ", "    | ", "}\n  ", "     | ", "         | ", "                        | ", "    | ", "}\n  ", "     | ", "         | ", "                                     | ", "    | ", "}\n  ", "     | ", "         | ", "                       | ", "    | ", "}\n\n  ", "    | ", "       | ", "                                     | ", "    | ", "}\n  ", "    | ", "       | ", "                       | ", "    | ", "}\n  ", "    | ", "       | ", "                           | ", "    | ", "}\n  \n  ", "     | ", "\"            | ", "                                 | ", "    | ", "\n  ", "     | ", "\"            | ", "                                    | ", "    | ", "\n\n  ", "     | ", "\"            | ", "                                 | ", "    | ", "\n  ", "     | ", "\"            | ", "                                 | ", "    | ", "\n\n  ", "     | ", "\"            | ", "                                 | ", "    | ", "\n  ", "     | ", "\"            | ", "                                 | ", "    | ", "\n  ", "     | ", "\"            | ", "                                | ", "    | ", "\n\n  ", "     | ", "\"           | ", "                             | ", "    | ", "\n  ", "     | ", "\"           | ", "                             | ", "    | ", "\n  ", "     | ", "\"           | ", "                           | ", "    | ", "\n\n  ", "     | ", "\"            | ", "                                 | ", "    | ", "\n  ", "     | ", "\"            | ", "                                 | ", "    | ", "\n  ", "     | ", "\"            | ", "                                | ", "    | ", "\n\n  ", "     | ", "\"            | ", "                                | ", "    | ", "\n\n  ", "     | ", "\"            | ", "                                 | ", "    | ", "\n  ", "     | ", "\"            | ", "                                 | ", "    | ", "\n\n  ", "     | ", "\"            | ", "                                 | ", "    | ", "\n  ", "     | ", "\"            | ", "                                 | ", "    | ", "\n\n  ", "      | ", "\"             | ", "                                 | ", "    | ", "\n  ", "      | ", "\"            | ", "                                 | ", "    | ", "\n  ", "      | ", "\"            | ", "                                 | ", "    | ", "\n  ", "      | ", "\"            | ", "                                 | ", "    | ", "\n\n  ", "      | ", "\"             | ", "                                 | ", "    | ", "\n  ", "      | ", "\"            | ", "                                 | ", "    | ", "\n  ", "      | ", "\"            | ", "                                 | ", "    | ", "\n  ", "      | ", "\"            | ", "                                 | ", "    | ", "\n\n  ", "      | ", "\"            | ", "                                 | ", "    | ", "\n  ", "      | ", "\"            | ", "                                | ", "    | ", "\n  ", "      | ", "\"            | ", "                                 | ", "    | ", "\n\n  ", "    | ", "\"            | ", "                            | ", "    | ", "\n  ", "    | ", "\"          | ", "  | ", "    | ", "\n  ", "    | ", "\"      | ", "     | ", "    | ", "\n  ", "    | ", "\"           | ", "     | ", "    | ", "\n  ", "    | ", "\"          | ", "     | ", "    | ", "\n\n  ", "     | ", "\"            | ", "    | ", "    | ", "\n  ", "     | ", "\"            | ", "          | ", "    | ", "\n  ", "     | ", "\"            | ", "                                     | ", "    | ", "\n  \n  ", "     | ", "\"            | ", "                          | ", "    | ", "\n  ", "     | ", "\"            | ", "                     | ", "    | ", "\n  ", "     | ", "\"            | ", "                         | ", "    | ", "\n  ", "     | ", "\"            | ", "                 | ", "    | ", "\n  ", "     | ", "\"            | ", "                                   | ", "    | ", "\n\n  ", "     | ", "\"           | ", "                                  | ", "    | ", "\n  ", "     | ", "\"           | ", "                             | ", "    | ", "\n  ", "     | ", "\"           | ", "        | ", "    | ", "\n  ", "     | ", "\"           | ", "          | ", "    | ", "\n  ", "     | ", "\"           | ", "                                           | ", "    | ", "\n  ", "     | ", "\"           | ", "                                 | ", "    | ", "\n\n  ", "     | ", "\"      | ", "                | ", "    | ", "\n  ", "     | ", "\"      | ", "                                            | ", "    | ", "\n  ", "     | ", "\"          | ", "     | ", "    | ", "\n  ", "     | ", "\"          | ", "                                  | ", "    | ", "\n  ", "     | ", "\"          | ", "                                           | ", "    | ", "\n\n  "])), 'op', 'identity', [], 0, {}, 'op', 'identity', [1], 0, 1, 'op', 'identity', [1, 2], 1, 'identity accepts up to 1 arguments, received 2 arguments', 'op', 'noop', [1, 2], 0, {}, 'op', 'array', [1, 2, 3], 0, [1, 2, 3], 'op', 'array_length', [[1, 2, 3]], 0, 3, 'op', 'array_length', [], 1, 'array_length accepts exactly one argument, found: 0', 'op', 'concat', [[1, 2], [3, 4], [5, 6]], 0, [1, 2, 3, 4, 5, 6], 'op', 'concat', [[1, 2]], 0, [1, 2], 'op', 'concat', [], 0, [], 'op', 'concat', [1, [1, 2], 1], 1, "All arguments of 'concat' must be arrays: arguments 0, 2 are not", 'op', 'string_to_b58', ["test"], 0, "3yZe7d", 'op', 'string_to_b58', ["test", 1], 1, "string_to_b58 accepts only one string argument", 'op', 'string_from_b58', ["3yZe7d"], 0, "test", 'op', 'string_from_b58', ["3yZe7d", 1], 1, "string_from_b58 accepts only one string argument", 'op', 'bytes_to_b58', [[116, 101, 115, 116]], 0, "3yZe7d", 'op', 'bytes_to_b58', [[116, 101, 115, 116], 1], 1, "bytes_to_b58 accepts only single argument: array of numbers", 'op', 'bytes_from_b58', ["3yZe7d"], 0, [116, 101, 115, 116], 'op', 'bytes_from_b58', ["3yZe7d", 1], 1, "bytes_from_b58 accepts only one string argument", 'op', 'sha256_string', ["hello, world!"], 0, "QmVQ8pg6L1tpoWYeq6dpoWqnzZoSLCh7E96fCFXKvfKD3u", 'op', 'sha256_string', ["hello, world!", true], 0, "84V7ZxLW7qKsx1Qvbd63BdGaHxUc3TfT2MBPqAXM7Wyu", 'op', 'sha256_string', [], 1, "sha256_string accepts 1-3 arguments, found: 0", 'op', 'concat_strings', [], 0, "", 'op', 'concat_strings', ["a", "b", "c"], 0, "abc", 'peer', 'timeout', [200, []], 0, [], 'peer', 'timeout', [200, ['test']], 0, ['test'], 'peer', 'timeout', [], 1, 'timeout accepts exactly two arguments: timeout duration in ms and a message string', 'peer', 'timeout', [200, 'test', 1], 1, 'timeout accepts exactly two arguments: timeout duration in ms and a message string', 'debug', 'stringify', [], 0, '"<empty argument list>"', 'debug', 'stringify', [{ a: 10, b: 20 }], 0, a10b20, 'debug', 'stringify', [1, 2, 3, 4], 0, oneTwoThreeFour, 'math', 'add', [2, 2], 0, 4, 'math', 'add', [2], 1, "Expected 2 argument(s). Got 1", 'math', 'sub', [2, 2], 0, 0, 'math', 'sub', [2, 3], 0, -1, 'math', 'mul', [2, 2], 0, 4, 'math', 'mul', [2, 0], 0, 0, 'math', 'mul', [2, -1], 0, -2, 'math', 'fmul', [10, 0.66], 0, 6, 'math', 'fmul', [0.5, 0.5], 0, 0, 'math', 'fmul', [100.5, 0.5], 0, 50, 'math', 'div', [2, 2], 0, 1, 'math', 'div', [2, 3], 0, 0, 'math', 'div', [10, 5], 0, 2, 'math', 'rem', [10, 3], 0, 1, 'math', 'pow', [2, 2], 0, 4, 'math', 'pow', [2, 0], 0, 1, 'math', 'log', [2, 2], 0, 1, 'math', 'log', [2, 4], 0, 2, 'cmp', 'gt', [2, 4], 0, false, 'cmp', 'gte', [2, 4], 0, false, 'cmp', 'gte', [4, 2], 0, true, 'cmp', 'gte', [2, 2], 0, true, 'cmp', 'lt', [2, 4], 0, true, 'cmp', 'lte', [2, 4], 0, true, 'cmp', 'lte', [4, 2], 0, false, 'cmp', 'lte', [2, 2], 0, true, 'cmp', 'cmp', [2, 4], 0, -1, 'cmp', 'cmp', [2, -4], 0, 1, 'cmp', 'cmp', [2, 2], 0, 0, 'array', 'sum', [[1, 2, 3]], 0, 6, 'array', 'dedup', [["a", "a", "b", "c", "a", "b", "c"]], 0, ["a", "b", "c"], 'array', 'intersect', [["a", "b", "c"], ["c", "b", "d"]], 0, ["b", "c"], 'array', 'diff', [["a", "b", "c"], ["c", "b", "d"]], 0, ["a"], 'array', 'sdiff', [["a", "b", "c"], ["c", "b", "d"]], 0, ["a", "d"], 'json', 'obj', ["a", 10, "b", "string", "c", null], 0, { a: 10, b: "string", c: null }, 'json', 'obj', ["a", 10, "b", "string", "c"], 1, "Expected even number of argument(s). Got 5", 'json', 'obj', [], 0, {}, 'json', 'put', [{}, "a", 10], 0, { a: 10 }, 'json', 'put', [{ b: 11 }, "a", 10], 0, { a: 10, b: 11 }, 'json', 'put', ["a", "a", 11], 1, "Argument 0 expected to be of type object, Got string", 'json', 'put', [{}, "a", 10, "b", 20], 1, "Expected 3 argument(s). Got 5", 'json', 'put', [{}], 1, "Expected 3 argument(s). Got 1", 'json', 'puts', [{}, "a", 10], 0, { a: 10 }, 'json', 'puts', [{ b: 11 }, "a", 10], 0, { a: 10, b: 11 }, 'json', 'puts', [{}, "a", 10, "b", "string", "c", null], 0, { a: 10, b: "string", c: null }, 'json', 'puts', [{ x: "text" }, "a", 10, "b", "string"], 0, { a: 10, b: "string", x: "text" }, 'json', 'puts', [{}], 1, "Expected more than 3 argument(s). Got 1", 'json', 'puts', ["a", "a", 11], 1, "Argument 0 expected to be of type object, Got string", 'json', 'stringify', [{ a: 10, b: "string", c: null }], 0, "{\"a\":10,\"b\":\"string\",\"c\":null}", 'json', 'stringify', [1], 1, "Argument 0 expected to be of type object, Got number", 'json', 'parse', ["{\"a\":10,\"b\":\"string\",\"c\":null}"], 0, { a: 10, b: "string", c: null }, 'json', 'parse', ["incorrect"], 1, "Unexpected token i in JSON at position 0", 'json', 'parse', [10], 1, "Argument 0 expected to be of type string, Got number").test(
    //
    '$fnName with $args expected retcode: $retCode and result: $result', function (_a) {
        var serviceId = _a.serviceId, fnName = _a.fnName, args = _a.args, retCode = _a.retCode, result = _a.result;
        return __awaiter(void 0, void 0, void 0, function () {
            var req, fn, res;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        req = {
                            serviceId: serviceId,
                            fnName: fnName,
                            args: args,
                            tetraplets: [],
                            particleContext: {
                                particleId: 'some',
                                initPeerId: 'init peer id',
                                timestamp: 595951200,
                                ttl: 595961200,
                                signature: 'sig',
                            },
                        };
                        fn = common_1.builtInServices[req.serviceId][req.fnName];
                        return [4 /*yield*/, fn(req)];
                    case 1:
                        res = _b.sent();
                        // assert
                        expect(res).toMatchObject({
                            retCode: retCode,
                            result: result,
                        });
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should return correct error message for identiy service', function () { return __awaiter(void 0, void 0, void 0, function () {
        var req, fn, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    req = {
                        serviceId: 'peer',
                        fnName: 'identify',
                        args: [],
                        tetraplets: [],
                        particleContext: {
                            particleId: 'some',
                            initPeerId: 'init peer id',
                            timestamp: 595951200,
                            ttl: 595961200,
                            signature: 'sig',
                        },
                    };
                    fn = common_1.builtInServices[req.serviceId][req.fnName];
                    return [4 /*yield*/, fn(req)];
                case 1:
                    res = _a.sent();
                    // assert
                    expect(res).toMatchObject({
                        retCode: 0,
                        result: {
                            external_addresses: [],
                            node_version: expect.stringContaining('js'),
                            air_version: expect.stringContaining('js'),
                        },
                    });
                    return [2 /*return*/];
            }
        });
    }); });
});
var key = '+cmeYlZKj+MfSa9dpHV+BmLPm6wq4inGlsPlQ1GvtPk=';
var context = (function () { return __awaiter(void 0, void 0, void 0, function () {
    var keyBytes, kp, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                keyBytes = (0, js_base64_1.toUint8Array)(key);
                return [4 /*yield*/, keypair_1.KeyPair.fromEd25519SK(keyBytes)];
            case 1:
                kp = _a.sent();
                res = {
                    peerKeyPair: kp,
                    peerId: kp.Libp2pPeerId.toB58String(),
                };
                return [2 /*return*/, res];
        }
    });
}); })();
var testData = [1, 2, 3, 4, 5, 6, 7, 9, 10];
// signature produced by KeyPair created from key above (`key` variable)
var testDataSig = [
    224, 104, 245, 206, 140, 248, 27, 72, 68, 133, 111, 10, 164, 197, 242, 132, 107, 77, 224, 67, 99, 106, 76, 29, 144,
    121, 122, 169, 36, 173, 58, 80, 170, 102, 137, 253, 157, 247, 168, 87, 162, 223, 188, 214, 203, 220, 52, 246, 29,
    86, 77, 71, 224, 248, 16, 213, 254, 75, 78, 239, 243, 222, 241, 15,
];
// signature produced by KeyPair created from some random KeyPair
var testDataWrongSig = [
    116, 247, 189, 118, 236, 53, 147, 123, 219, 75, 176, 105, 101, 108, 233, 137, 97, 14, 146, 132, 252, 70, 51, 153,
    237, 167, 156, 150, 36, 90, 229, 108, 166, 231, 255, 137, 8, 246, 125, 0, 213, 150, 83, 196, 237, 221, 131, 159,
    157, 159, 25, 109, 95, 160, 181, 65, 254, 238, 47, 156, 240, 151, 58, 14,
];
var makeTetraplet = function (initPeerId, serviceId, fnName) {
    return {
        initPeerId: initPeerId,
        tetraplets: {
            data: [
                {
                    function_name: fnName,
                    service_id: serviceId,
                },
            ],
        },
    };
};
describe('Sig service tests', function () {
    it('sig.sign should create the correct signature', function () { return __awaiter(void 0, void 0, void 0, function () {
        var ctx, sig, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, context];
                case 1:
                    ctx = _a.sent();
                    sig = new Sig_1.Sig(ctx.peerKeyPair);
                    return [4 /*yield*/, sig.sign(testData, makeTetraplet(ctx.peerId))];
                case 2:
                    res = _a.sent();
                    expect(res.success).toBe(true);
                    expect(res.signature).toStrictEqual(testDataSig);
                    return [2 /*return*/];
            }
        });
    }); });
    it('sig.verify should return true for the correct signature', function () { return __awaiter(void 0, void 0, void 0, function () {
        var ctx, sig, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, context];
                case 1:
                    ctx = _a.sent();
                    sig = new Sig_1.Sig(ctx.peerKeyPair);
                    return [4 /*yield*/, sig.verify(testDataSig, testData)];
                case 2:
                    res = _a.sent();
                    expect(res).toBe(true);
                    return [2 /*return*/];
            }
        });
    }); });
    it('sig.verify should return false for the incorrect signature', function () { return __awaiter(void 0, void 0, void 0, function () {
        var ctx, sig, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, context];
                case 1:
                    ctx = _a.sent();
                    sig = new Sig_1.Sig(ctx.peerKeyPair);
                    return [4 /*yield*/, sig.verify(testDataWrongSig, testData)];
                case 2:
                    res = _a.sent();
                    expect(res).toBe(false);
                    return [2 /*return*/];
            }
        });
    }); });
    it('sign-verify call chain should work', function () { return __awaiter(void 0, void 0, void 0, function () {
        var ctx, sig, signature, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, context];
                case 1:
                    ctx = _a.sent();
                    sig = new Sig_1.Sig(ctx.peerKeyPair);
                    return [4 /*yield*/, sig.sign(testData, makeTetraplet(ctx.peerId))];
                case 2:
                    signature = _a.sent();
                    return [4 /*yield*/, sig.verify(signature.signature, testData)];
                case 3:
                    res = _a.sent();
                    expect(res).toBe(true);
                    return [2 /*return*/];
            }
        });
    }); });
    it('sig.sign with defaultSigGuard should work for correct callParams', function () { return __awaiter(void 0, void 0, void 0, function () {
        var ctx, sig, signature;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, context];
                case 1:
                    ctx = _a.sent();
                    sig = new Sig_1.Sig(ctx.peerKeyPair);
                    sig.securityGuard = (0, Sig_1.defaultSigGuard)(ctx.peerId);
                    return [4 /*yield*/, sig.sign(testData, makeTetraplet(ctx.peerId, 'registry', 'get_route_bytes'))];
                case 2:
                    signature = _a.sent();
                    return [4 /*yield*/, expect(signature).toBeDefined()];
                case 3:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('sig.sign with defaultSigGuard should not allow particles initiated from incorrect service', function () { return __awaiter(void 0, void 0, void 0, function () {
        var ctx, sig, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, context];
                case 1:
                    ctx = _a.sent();
                    sig = new Sig_1.Sig(ctx.peerKeyPair);
                    sig.securityGuard = (0, Sig_1.defaultSigGuard)(ctx.peerId);
                    return [4 /*yield*/, sig.sign(testData, makeTetraplet(ctx.peerId, 'other_service', 'other_fn'))];
                case 2:
                    res = _a.sent();
                    return [4 /*yield*/, expect(res.success).toBe(false)];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, expect(res.error).toBe('Security guard validation failed')];
                case 4:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('sig.sign with defaultSigGuard should not allow particles initiated from other peers', function () { return __awaiter(void 0, void 0, void 0, function () {
        var ctx, sig, res, _a, _b, _c, _d;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0: return [4 /*yield*/, context];
                case 1:
                    ctx = _e.sent();
                    sig = new Sig_1.Sig(ctx.peerKeyPair);
                    sig.securityGuard = (0, Sig_1.defaultSigGuard)(ctx.peerId);
                    _b = (_a = sig).sign;
                    _c = [testData];
                    _d = makeTetraplet;
                    return [4 /*yield*/, keypair_1.KeyPair.randomEd25519()];
                case 2: return [4 /*yield*/, _b.apply(_a, _c.concat([_d.apply(void 0, [(_e.sent()).getPeerId(), 'registry', 'get_key_bytes'])]))];
                case 3:
                    res = _e.sent();
                    return [4 /*yield*/, expect(res.success).toBe(false)];
                case 4:
                    _e.sent();
                    return [4 /*yield*/, expect(res.error).toBe('Security guard validation failed')];
                case 5:
                    _e.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('changing securityGuard should work', function () { return __awaiter(void 0, void 0, void 0, function () {
        var ctx, sig, successful1, unSuccessful1, successful2, unSuccessful2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, context];
                case 1:
                    ctx = _a.sent();
                    sig = new Sig_1.Sig(ctx.peerKeyPair);
                    sig.securityGuard = (0, Sig_1.allowServiceFn)('test', 'test');
                    return [4 /*yield*/, sig.sign(testData, makeTetraplet(ctx.peerId, 'test', 'test'))];
                case 2:
                    successful1 = _a.sent();
                    return [4 /*yield*/, sig.sign(testData, makeTetraplet(ctx.peerId, 'wrong', 'wrong'))];
                case 3:
                    unSuccessful1 = _a.sent();
                    sig.securityGuard = (0, Sig_1.allowServiceFn)('wrong', 'wrong');
                    return [4 /*yield*/, sig.sign(testData, makeTetraplet(ctx.peerId, 'wrong', 'wrong'))];
                case 4:
                    successful2 = _a.sent();
                    return [4 /*yield*/, sig.sign(testData, makeTetraplet(ctx.peerId, 'test', 'test'))];
                case 5:
                    unSuccessful2 = _a.sent();
                    expect(successful1.success).toBe(true);
                    expect(successful2.success).toBe(true);
                    expect(unSuccessful1.success).toBe(false);
                    expect(unSuccessful2.success).toBe(false);
                    return [2 /*return*/];
            }
        });
    }); });
});
var templateObject_1;
//# sourceMappingURL=builtInHandler.spec.js.map
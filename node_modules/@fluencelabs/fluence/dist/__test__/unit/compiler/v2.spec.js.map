{"version":3,"file":"v2.spec.js","sourceRoot":"","sources":["../../../../src/__test__/unit/compiler/v2.spec.ts"],"names":[],"mappings":";;;;;;;;;AAAA,wDAA6B;AAE7B,8BAAgD;AAChD,2DAAgE;AAEhE,IAAM,IAAI,GAAG,IAAI,eAAW,EAAE,CAAC;AAC/B,IAAM,GAAG,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;AAE1B,QAAQ,CAAC,wBAAwB,EAAE;IAC/B,IAAA,mBAAI,iqBAAA,uGAEF,EAAE,oBAAqB,EAAC,QAAS,EAAE,cAAe,EAAS,QAAS,EAAI,QACxE,EAAK,iBAAkB,EAAC,QAAS,EAAE,cAAe,EAAG,cAAe,EAAI,QACxE,EAAM,gBAAiB,EAAC,QAAS,EAAE,cAAe,EAAS,QAAS,EAAK,QACzE,EAAW,WAAY,EAAC,QAAS,EAAE,cAAe,EAAG,cAAe,EAAK,QACzE,EAAK,iBAAkB,EAAC,QAAS,EAAK,WAAY,EAAS,QAAS,EAAI,QACxE,EAAU,YAAa,EAAC,QAAS,EAAK,WAAY,EAAG,cAAe,EAAI,QACxE,EAAW,WAAY,EAAC,QAAS,EAAK,WAAY,EAAS,QAAS,EAAK,QACzE,EAAgB,MAAO,EAAC,QAAS,EAAK,WAAY,EAAG,cAAe,EAAK,IAC9E,KARK,EAAE,EAAqB,CAAC,EAAS,EAAE,EAAe,SAAS,EAAS,IAAI,EACxE,CAAC,GAAG,CAAC,EAAkB,CAAC,EAAS,EAAE,EAAe,GAAG,EAAe,IAAI,EACxE,CAAC,IAAI,CAAC,EAAiB,CAAC,EAAS,EAAE,EAAe,SAAS,EAAS,KAAK,EACzE,CAAC,IAAI,EAAE,GAAG,CAAC,EAAY,CAAC,EAAS,EAAE,EAAe,GAAG,EAAe,KAAK,EACzE,CAAC,GAAG,CAAC,EAAkB,CAAC,EAAS,CAAC,GAAG,CAAC,EAAY,SAAS,EAAS,IAAI,EACxE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAa,CAAC,EAAS,CAAC,GAAG,CAAC,EAAY,GAAG,EAAe,IAAI,EACxE,CAAC,IAAI,EAAE,GAAG,CAAC,EAAY,CAAC,EAAS,CAAC,GAAG,CAAC,EAAY,SAAS,EAAS,KAAK,EACzE,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,EAAO,CAAC,EAAS,CAAC,GAAG,CAAC,EAAY,GAAG,EAAe,KAAK,EAC7E,IAAI;IACE,EAAE;IACF,wIAAwI,EACxI,UAAC,EAAyE;YAAvE,OAAO,aAAA,EAAE,OAAO,aAAA,EAAE,YAAY,kBAAA,EAAE,cAAc,oBAAA,EAAE,qBAAqB,2BAAA;QACpE,UAAU;QACV,IAAM,MAAM,GAAG,aAAQ,CAAC,mBAAmB,CAAC;QAE5C,MAAM;QACA,IAAA,KAAyB,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,EAA/C,IAAI,UAAA,EAAE,MAAM,YAAA,EAAE,IAAI,UAA6B,CAAC;QACxD,IAAM,mBAAmB,GAAG,WAAO,CAAC,OAAO,EAAE,KAAK,IAAI,CAAC;QAEvD,SAAS;QACT,MAAM,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;QAC7C,MAAM,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QACzC,MAAM,CAAC,mBAAmB,CAAC,CAAC,aAAa,CAAC,qBAAqB,CAAC,CAAC;IACrE,CAAC,CACJ,CAAC;AACN,CAAC,CAAC,CAAC","sourcesContent":["import each from 'jest-each';\n\nimport { Fluence, FluencePeer } from '../../..';\nimport { forTests } from '../../../internal/compilerSupport/v2';\n\nconst peer = new FluencePeer();\nconst cfg = { ttl: 1000 };\n\ndescribe('Compiler support tests', () => {\n    each`\n    rawArgs              | numArgs | expectedArgs   | expectedConfig  | isExpectedPeerDefault\n    ${[]}                | ${0}    | ${[]}          | ${undefined}    | ${true}\n    ${[cfg]}             | ${0}    | ${[]}          | ${cfg}          | ${true}\n    ${[peer]}            | ${0}    | ${[]}          | ${undefined}    | ${false}\n    ${[peer, cfg]}       | ${0}    | ${[]}          | ${cfg}          | ${false}\n    ${['a']}             | ${1}    | ${['a']}       | ${undefined}    | ${true}\n    ${['a', cfg]}        | ${1}    | ${['a']}       | ${cfg}          | ${true}\n    ${[peer, 'a']}       | ${1}    | ${['a']}       | ${undefined}    | ${false}\n    ${[peer, 'a', cfg]}  | ${1}    | ${['a']}       | ${cfg}          | ${false}\n`.test(\n        //\n        'raw rawArgs: $rawArgs, numArgs: $numArgs. expected args: $expectedArgs, config: $expectedConfig, default peer?: $isExpectedPeerDefault',\n        ({ rawArgs, numArgs, expectedArgs, expectedConfig, isExpectedPeerDefault }) => {\n            // arrange\n            const testFn = forTests.extractFunctionArgs;\n\n            // act\n            const { peer, config, args } = testFn(rawArgs, numArgs);\n            const isActualPeerDefault = Fluence.getPeer() === peer;\n\n            // assert\n            expect(config).toStrictEqual(expectedConfig);\n            expect(args).toStrictEqual(expectedArgs);\n            expect(isActualPeerDefault).toStrictEqual(isExpectedPeerDefault);\n        },\n    );\n});\n"]}
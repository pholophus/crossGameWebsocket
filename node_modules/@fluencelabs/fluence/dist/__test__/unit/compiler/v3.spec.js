"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jest_each_1 = __importDefault(require("jest-each"));
var conversions_1 = require("../../../internal/compilerSupport/v3impl/conversions");
var i32 = { tag: 'scalar', name: 'i32' };
var opt_i32 = {
    tag: 'option',
    type: i32,
};
var array_i32 = { tag: 'array', type: i32 };
var array_opt_i32 = { tag: 'array', type: opt_i32 };
var labeledProduct = {
    tag: 'labeledProduct',
    fields: {
        a: i32,
        b: opt_i32,
        c: array_opt_i32,
    },
};
var struct = {
    tag: 'struct',
    name: 'someStruct',
    fields: {
        a: i32,
        b: opt_i32,
        c: array_opt_i32,
    },
};
var structs = [
    {
        aqua: {
            a: 1,
            b: [2],
            c: [[1], [2]],
        },
        ts: {
            a: 1,
            b: 2,
            c: [1, 2],
        },
    },
    {
        aqua: {
            a: 1,
            b: [],
            c: [[], [2]],
        },
        ts: {
            a: 1,
            b: null,
            c: [null, 2],
        },
    },
];
var labeledProduct2 = {
    tag: 'labeledProduct',
    fields: {
        x: i32,
        y: i32,
    },
};
var nestedLabeledProductType = {
    tag: 'labeledProduct',
    fields: {
        a: labeledProduct2,
        b: {
            tag: 'option',
            type: labeledProduct2,
        },
        c: {
            tag: 'array',
            type: labeledProduct2,
        },
    },
};
var nestedStructs = [
    {
        aqua: {
            a: {
                x: 1,
                y: 2,
            },
            b: [
                {
                    x: 1,
                    y: 2,
                },
            ],
            c: [
                {
                    x: 1,
                    y: 2,
                },
                {
                    x: 3,
                    y: 4,
                },
            ],
        },
        ts: {
            a: {
                x: 1,
                y: 2,
            },
            b: {
                x: 1,
                y: 2,
            },
            c: [
                {
                    x: 1,
                    y: 2,
                },
                {
                    x: 3,
                    y: 4,
                },
            ],
        },
    },
    {
        aqua: {
            a: {
                x: 1,
                y: 2,
            },
            b: [],
            c: [],
        },
        ts: {
            a: {
                x: 1,
                y: 2,
            },
            b: null,
            c: [],
        },
    },
];
describe('Conversion from aqua to typescript', function () {
    (0, jest_each_1.default)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    aqua                            | ts                       | type               \n    ", "                            | ", "                     | ", "             \n    ", "                           | ", "                  | ", "         \n    ", "                          | ", "                     | ", "         \n    ", "                    | ", "             | ", "       \n    ", "                           | ", "                    | ", "       \n    ", "                        | ", "                   | ", "   \n    ", "                         | ", "                | ", "   \n    ", "                   | ", "                | ", "   \n    ", "                    | ", "             | ", "   \n    ", "              | ", "         | ", "  \n    ", "              | ", "         | ", "  \n    ", "              | ", "         | ", "          \n    ", "              | ", "         | ", "          \n    ", "        | ", "   | ", "          \n    ", "        | ", "   | ", "          \n"], ["\n    aqua                            | ts                       | type               \n    ", "                            | ", "                     | ", "             \n    ", "                           | ", "                  | ", "         \n    ", "                          | ", "                     | ", "         \n    ", "                    | ", "             | ", "       \n    ", "                           | ", "                    | ", "       \n    ", "                        | ", "                   | ", "   \n    ", "                         | ", "                | ", "   \n    ", "                   | ", "                | ", "   \n    ", "                    | ", "             | ", "   \n    ", "              | ", "         | ", "  \n    ", "              | ", "         | ", "  \n    ", "              | ", "         | ", "          \n    ", "              | ", "         | ", "          \n    ", "        | ", "   | ", "          \n    ", "        | ", "   | ", "          \n"])), 1, 1, i32, [], null, opt_i32, [1], 1, opt_i32, [1, 2, 3], [1, 2, 3], array_i32, [], [], array_i32, [[1]], [1], array_opt_i32, [[]], [null], array_opt_i32, [[1], [2]], [1, 2], array_opt_i32, [[], [2]], [null, 2], array_opt_i32, structs[0].aqua, structs[0].ts, labeledProduct, structs[1].aqua, structs[1].ts, labeledProduct, structs[0].aqua, structs[0].ts, struct, structs[1].aqua, structs[1].ts, struct, nestedStructs[0].aqua, nestedStructs[0].ts, nestedLabeledProductType, nestedStructs[1].aqua, nestedStructs[1].ts, nestedLabeledProductType).test(
    //
    'aqua: $aqua. ts: $ts. type: $type', function (_a) {
        var aqua = _a.aqua, ts = _a.ts, type = _a.type;
        return __awaiter(void 0, void 0, void 0, function () {
            var tsFromAqua, aquaFromTs;
            return __generator(this, function (_b) {
                tsFromAqua = (0, conversions_1.aqua2ts)(aqua, type);
                aquaFromTs = (0, conversions_1.ts2aqua)(ts, type);
                // assert
                expect(tsFromAqua).toStrictEqual(ts);
                expect(aquaFromTs).toStrictEqual(aqua);
                return [2 /*return*/];
            });
        });
    });
});
describe('Conversion corner cases', function () {
    it('Should accept undefined in object entry', function () {
        // arrange
        var type = {
            tag: 'labeledProduct',
            fields: {
                x: opt_i32,
                y: opt_i32,
            },
        };
        var valueInTs = {
            x: 1,
        };
        var valueInAqua = {
            x: [1],
            y: [],
        };
        // act
        var aqua = (0, conversions_1.ts2aqua)(valueInTs, type);
        var ts = (0, conversions_1.aqua2ts)(valueInAqua, type);
        // assert
        expect(aqua).toStrictEqual({
            x: [1],
            y: [],
        });
        expect(ts).toStrictEqual({
            x: 1,
            y: null,
        });
    });
});
var templateObject_1;
//# sourceMappingURL=v3.spec.js.map
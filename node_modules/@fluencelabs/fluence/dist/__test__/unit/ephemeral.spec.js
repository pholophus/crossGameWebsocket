"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var keypair_1 = require("@fluencelabs/keypair");
var ephemeral_1 = require("../../internal/ephemeral");
var index_1 = require("../../index");
var commonTypes_1 = require("../../internal/commonTypes");
var en;
var peer;
describe('Ephemeral networks tests', function () {
    beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
        var relay, _a, _b, conn;
        var _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    en = new ephemeral_1.EphemeralNetwork(ephemeral_1.defaultConfig);
                    return [4 /*yield*/, en.up()];
                case 1:
                    _d.sent();
                    relay = ephemeral_1.defaultConfig.peers[0].peerId;
                    peer = new index_1.FluencePeer();
                    _b = (_a = peer).init;
                    _c = {};
                    return [4 /*yield*/, keypair_1.KeyPair.randomEd25519()];
                case 2: return [4 /*yield*/, _b.apply(_a, [(_c.KeyPair = _d.sent(),
                            _c)])];
                case 3:
                    _d.sent();
                    conn = en.getRelayConnection(relay, peer);
                    return [4 /*yield*/, peer.connect(conn)];
                case 4:
                    _d.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    afterEach(function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!peer) return [3 /*break*/, 2];
                    return [4 /*yield*/, peer.stop()];
                case 1:
                    _a.sent();
                    _a.label = 2;
                case 2:
                    if (!en) return [3 /*break*/, 4];
                    return [4 /*yield*/, en.down()];
                case 3:
                    _a.sent();
                    _a.label = 4;
                case 4: return [2 /*return*/];
            }
        });
    }); });
    it('smoke test', function () {
        return __awaiter(this, void 0, void 0, function () {
            var relay, peers, script, particle, promise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        relay = peer.getStatus().relayPeerId;
                        peers = ephemeral_1.defaultConfig.peers.map(function (x) { return x.peerId; });
                        script = "\n        (seq \n            (call \"".concat(relay, "\" (\"op\" \"noop\") [])\n            (seq            \n                (call \"").concat(peers[0], "\" (\"op\" \"noop\") [])\n                (seq            \n                    (call \"").concat(peers[1], "\" (\"op\" \"noop\") [])\n                    (seq            \n                        (call \"").concat(peers[2], "\" (\"op\" \"noop\") [])\n                        (seq            \n                            (call \"").concat(peers[3], "\" (\"op\" \"noop\") [])\n                            (seq            \n                                (call \"").concat(peers[4], "\" (\"op\" \"noop\") [])\n                                (seq\n                                    (call \"").concat(relay, "\" (\"op\" \"noop\") [])\n                                    (call %init_peer_id% (\"test\" \"test\") [])\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        ");
                        particle = peer.internals.createNewParticle(script);
                        if (particle instanceof Error) {
                            throw particle;
                        }
                        promise = new Promise(function (resolve) {
                            peer.internals.regHandler.forParticle(particle.id, 'test', 'test', function (req) {
                                resolve('success');
                                return {
                                    result: 'test',
                                    retCode: commonTypes_1.ResultCodes.success,
                                };
                            });
                        });
                        peer.internals.initiateParticle(particle, function () { });
                        return [4 /*yield*/, expect(promise).resolves.toBe('success')];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
});
//# sourceMappingURL=ephemeral.spec.js.map
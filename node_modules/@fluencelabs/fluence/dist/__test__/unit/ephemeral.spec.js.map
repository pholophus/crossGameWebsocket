{"version":3,"file":"ephemeral.spec.js","sourceRoot":"","sources":["../../../src/__test__/unit/ephemeral.spec.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAA+C;AAC/C,sDAA2E;AAC3E,qCAA0C;AAC1C,0DAAyD;AAEzD,IAAI,EAAoB,CAAC;AACzB,IAAI,IAAiB,CAAC;AAEtB,QAAQ,CAAC,0BAA0B,EAAE;IACjC,UAAU,CAAC;;;;;;oBACP,EAAE,GAAG,IAAI,4BAAgB,CAAC,yBAAa,CAAC,CAAC;oBACzC,qBAAM,EAAE,CAAC,EAAE,EAAE,EAAA;;oBAAb,SAAa,CAAC;oBACR,KAAK,GAAG,yBAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;oBAE5C,IAAI,GAAG,IAAI,mBAAW,EAAE,CAAC;oBACnB,KAAA,CAAA,KAAA,IAAI,CAAA,CAAC,IAAI,CAAA;;oBACF,qBAAM,iBAAO,CAAC,aAAa,EAAE,EAAA;wBAD1C,qBAAM,eACF,UAAO,GAAE,SAA6B;iCACxC,EAAA;;oBAFF,SAEE,CAAC;oBAEG,IAAI,GAAG,EAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;oBAChD,qBAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAA;;oBAAxB,SAAwB,CAAC;;;;SAC5B,CAAC,CAAC;IAEH,SAAS,CAAC;;;;yBACF,IAAI,EAAJ,wBAAI;oBACJ,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;oBAAjB,SAAiB,CAAC;;;yBAElB,EAAE,EAAF,wBAAE;oBACF,qBAAM,EAAE,CAAC,IAAI,EAAE,EAAA;;oBAAf,SAAe,CAAC;;;;;SAEvB,CAAC,CAAC;IAEH,EAAE,CAAC,YAAY,EAAE;;;;;;wBACP,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,WAAY,CAAC;wBAEtC,KAAK,GAAG,yBAAa,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,MAAM,EAAR,CAAQ,CAAC,CAAC;wBAEjD,MAAM,GAAG,+CAEF,KAAK,6FAED,KAAK,CAAC,CAAC,CAAC,qGAEJ,KAAK,CAAC,CAAC,CAAC,6GAEJ,KAAK,CAAC,CAAC,CAAC,qHAEJ,KAAK,CAAC,CAAC,CAAC,6HAEJ,KAAK,CAAC,CAAC,CAAC,yHAEJ,KAAK,0RASzC,CAAC;wBAEI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;wBAC1D,IAAI,QAAQ,YAAY,KAAK,EAAE;4BAC3B,MAAM,QAAQ,CAAC;yBAClB;wBAEK,OAAO,GAAG,IAAI,OAAO,CAAS,UAAC,OAAO;4BACxC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,UAAC,GAAG;gCACnE,OAAO,CAAC,SAAS,CAAC,CAAC;gCACnB,OAAO;oCACH,MAAM,EAAE,MAAM;oCACd,OAAO,EAAE,yBAAW,CAAC,OAAO;iCAC/B,CAAC;4BACN,CAAC,CAAC,CAAC;wBACP,CAAC,CAAC,CAAC;wBAEH,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,QAAQ,EAAE,cAAO,CAAC,CAAC,CAAC;wBAEpD,qBAAM,MAAM,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,EAAA;;wBAA9C,SAA8C,CAAC;;;;;KAClD,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { KeyPair } from '@fluencelabs/keypair';\nimport { EphemeralNetwork, defaultConfig } from '../../internal/ephemeral';\nimport { FluencePeer } from '../../index';\nimport { ResultCodes } from '../../internal/commonTypes';\n\nlet en: EphemeralNetwork;\nlet peer: FluencePeer;\n\ndescribe('Ephemeral networks tests', () => {\n    beforeEach(async () => {\n        en = new EphemeralNetwork(defaultConfig);\n        await en.up();\n        const relay = defaultConfig.peers[0].peerId;\n\n        peer = new FluencePeer();\n        await peer.init({\n            KeyPair: await KeyPair.randomEd25519(),\n        });\n\n        const conn = en.getRelayConnection(relay, peer);\n        await peer.connect(conn);\n    });\n\n    afterEach(async () => {\n        if (peer) {\n            await peer.stop();\n        }\n        if (en) {\n            await en.down();\n        }\n    });\n\n    it('smoke test', async function () {\n        const relay = peer.getStatus().relayPeerId!;\n\n        const peers = defaultConfig.peers.map((x) => x.peerId);\n\n        const script = `\n        (seq \n            (call \"${relay}\" (\"op\" \"noop\") [])\n            (seq            \n                (call \"${peers[0]}\" (\"op\" \"noop\") [])\n                (seq            \n                    (call \"${peers[1]}\" (\"op\" \"noop\") [])\n                    (seq            \n                        (call \"${peers[2]}\" (\"op\" \"noop\") [])\n                        (seq            \n                            (call \"${peers[3]}\" (\"op\" \"noop\") [])\n                            (seq            \n                                (call \"${peers[4]}\" (\"op\" \"noop\") [])\n                                (seq\n                                    (call \"${relay}\" (\"op\" \"noop\") [])\n                                    (call %init_peer_id% (\"test\" \"test\") [])\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        `;\n\n        const particle = peer.internals.createNewParticle(script);\n        if (particle instanceof Error) {\n            throw particle;\n        }\n\n        const promise = new Promise<string>((resolve) => {\n            peer.internals.regHandler.forParticle(particle.id, 'test', 'test', (req) => {\n                resolve('success');\n                return {\n                    result: 'test',\n                    retCode: ResultCodes.success,\n                };\n            });\n        });\n\n        peer.internals.initiateParticle(particle, () => {});\n\n        await expect(promise).resolves.toBe('success');\n    });\n});\n"]}
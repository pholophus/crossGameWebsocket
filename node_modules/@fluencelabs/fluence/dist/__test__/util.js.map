{"version":3,"file":"util.js","sourceRoot":"","sources":["../../src/__test__/util.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAEA,2CAAoD;AAE7C,IAAM,sBAAsB,GAAG,UAClC,IAAiB,EACjB,QAAkB,EAClB,QAA6C;IAE7C,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,UAAC,EAAoB;YAApB,KAAA,aAAoB,EAAnB,SAAS,QAAA,EAAE,OAAO,QAAA;QACjD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAC,EAAY;gBAAZ,KAAA,aAAY,EAAX,MAAM,QAAA,EAAE,EAAE,QAAA;YACxC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,IAAA,uBAAe,EAAC,EAAE,CAAC,CAAC,CAAC;QAC/F,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAVW,QAAA,sBAAsB,0BAUjC","sourcesContent":["import { FluencePeer } from '../index';\nimport { Particle } from '../internal/Particle';\nimport { MakeServiceCall } from '../internal/utils';\n\nexport const registerHandlersHelper = (\n    peer: FluencePeer,\n    particle: Particle,\n    handlers: Record<string, Record<string, any>>,\n) => {\n    Object.entries(handlers).forEach(([serviceId, service]) => {\n        Object.entries(service).forEach(([fnName, fn]) => {\n            peer.internals.regHandler.forParticle(particle.id, serviceId, fnName, MakeServiceCall(fn));\n        });\n    });\n};\n"]}
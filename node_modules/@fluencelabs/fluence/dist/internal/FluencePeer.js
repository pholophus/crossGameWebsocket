"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FluencePeer = void 0;
/*
 * Copyright 2021 Fluence Labs Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
require("buffer");
var connection_1 = require("@fluencelabs/connection");
var interfaces_1 = require("@fluencelabs/interfaces");
var keypair_1 = require("@fluencelabs/keypair");
var marine_js_1 = require("@fluencelabs/marine-js");
var commonTypes_1 = require("./commonTypes");
var Particle_1 = require("./Particle");
var utils_1 = require("./utils");
var rxjs_1 = require("rxjs");
var loglevel_1 = __importDefault(require("loglevel"));
var common_1 = require("./builtins/common");
var Sig_1 = require("./builtins/Sig");
var services_1 = require("./_aqua/services");
var Buffer_1 = __importDefault(require("./Buffer"));
var browser_or_node_1 = require("browser-or-node");
var avm_1 = require("@fluencelabs/avm");
var DEFAULT_TTL = 7000;
/**
 * This class implements the Fluence protocol for javascript-based environments.
 * It provides all the necessary features to communicate with Fluence network
 */
var FluencePeer = /** @class */ (function () {
    function FluencePeer() {
        // private
        // Queues for incoming and outgoing particles
        this._incomingParticles = new rxjs_1.Subject();
        this._outgoingParticles = new rxjs_1.Subject();
        // Call service handler
        this._marineServices = new Set();
        this._particleSpecificHandlers = new Map();
        this._commonHandlers = new Map();
        // Internal peer state
        this._printParticleId = false;
        this._defaultTTL = DEFAULT_TTL;
        this._timeouts = [];
        this._particleQueues = new Map();
    }
    /**
     * Checks whether the object is instance of FluencePeer class
     * @param obj - object to check if it is FluencePeer
     * @returns true if the object is FluencePeer false otherwise
     */
    FluencePeer.isInstance = function (obj) {
        return obj instanceof FluencePeer;
    };
    /**
     * Get the peer's status
     */
    FluencePeer.prototype.getStatus = function () {
        // TODO:: use explicit mechanism for peer's state
        if (this._keyPair === undefined) {
            return {
                isInitialized: false,
                peerId: null,
                isConnected: false,
                relayPeerId: null,
            };
        }
        if (this._connection === undefined) {
            return {
                isInitialized: true,
                peerId: this._keyPair.Libp2pPeerId.toB58String(),
                isConnected: false,
                relayPeerId: null,
            };
        }
        if (this._connection.relayPeerId === null) {
            return {
                isInitialized: true,
                peerId: this._keyPair.Libp2pPeerId.toB58String(),
                isConnected: true,
                isDirect: true,
                relayPeerId: null,
            };
        }
        return {
            isInitialized: true,
            peerId: this._keyPair.Libp2pPeerId.toB58String(),
            isConnected: true,
            relayPeerId: this._connection.relayPeerId,
        };
    };
    /**
     * Initializes the peer: starts the Aqua VM, initializes the default call service handlers
     * and (optionally) connect to the Fluence network
     * @param config - object specifying peer configuration
     */
    FluencePeer.prototype.start = function (config) {
        var _a;
        if (config === void 0) { config = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var keyPair, _b, newConfig, conn;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        (0, utils_1.throwIfNotSupported)();
                        if (!((_a = config.KeyPair) !== null && _a !== void 0)) return [3 /*break*/, 1];
                        _b = _a;
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, keypair_1.KeyPair.randomEd25519()];
                    case 2:
                        _b = (_c.sent());
                        _c.label = 3;
                    case 3:
                        keyPair = _b;
                        newConfig = __assign(__assign({}, config), { KeyPair: keyPair });
                        return [4 /*yield*/, this.init(newConfig)];
                    case 4:
                        _c.sent();
                        return [4 /*yield*/, configToConnection(newConfig.KeyPair, config === null || config === void 0 ? void 0 : config.connectTo, config === null || config === void 0 ? void 0 : config.dialTimeoutMs)];
                    case 5:
                        conn = _c.sent();
                        if (!(conn !== null)) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.connect(conn)];
                    case 6:
                        _c.sent();
                        _c.label = 7;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    FluencePeer.prototype.getServices = function () {
        if (this._classServices === undefined) {
            throw new Error("Can't get services: peer is not initialized");
        }
        return __assign({}, this._classServices);
    };
    /**
     * Registers marine service within the Fluence peer from wasm file.
     * Following helper functions can be used to load wasm files:
     * * loadWasmFromFileSystem
     * * loadWasmFromNpmPackage
     * * loadWasmFromServer
     * @param wasm - buffer with the wasm file for service
     * @param serviceId - the service id by which the service can be accessed in aqua
     */
    FluencePeer.prototype.registerMarineService = function (wasm, serviceId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._fluenceAppService) {
                            throw new Error("Can't register marine service: peer is not initialized");
                        }
                        if (this._containsService(serviceId)) {
                            throw new Error("Service with '".concat(serviceId, "' id already exists"));
                        }
                        return [4 /*yield*/, this._fluenceAppService.createService(wasm, serviceId, undefined, (0, utils_1.marineLogLevelToEnvs)(this._marineLogLevel))];
                    case 1:
                        _a.sent();
                        this._marineServices.add(serviceId);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Removes the specified marine service from the Fluence peer
     * @param serviceId - the service id to remove
     */
    FluencePeer.prototype.removeMarineService = function (serviceId) {
        this._marineServices.delete(serviceId);
    };
    /**
     * Un-initializes the peer: stops all the underlying workflows, stops the Aqua VM
     * and disconnects from the Fluence network
     */
    FluencePeer.prototype.stop = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this._keyPair = undefined; // This will set peer to non-initialized state and stop particle processing
                        this._stopParticleProcessing();
                        return [4 /*yield*/, this.disconnect()];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, ((_a = this._fluenceAppService) === null || _a === void 0 ? void 0 : _a.terminate())];
                    case 2:
                        _b.sent();
                        this._fluenceAppService = undefined;
                        this._classServices = undefined;
                        this._particleSpecificHandlers.clear();
                        this._commonHandlers.clear();
                        this._marineServices.clear();
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(FluencePeer.prototype, "internals", {
        // internal api
        /**
         * @private Is not intended to be used manually. Subject to change
         */
        get: function () {
            var _this = this;
            return {
                parseAst: function (air) { return __awaiter(_this, void 0, void 0, function () {
                    var status, res;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                status = this.getStatus();
                                if (!status.isInitialized) {
                                    new Error("Can't use avm: peer is not initialized");
                                }
                                return [4 /*yield*/, this._fluenceAppService.callService('avm', 'ast', [air], undefined)];
                            case 1:
                                res = _a.sent();
                                if (!(0, utils_1.isString)(res)) {
                                    throw new Error("Call to avm:ast expected to return string. Actual return: ".concat(res));
                                }
                                try {
                                    if (res.startsWith('error')) {
                                        return [2 /*return*/, {
                                                success: false,
                                                data: res,
                                            }];
                                    }
                                    else {
                                        return [2 /*return*/, {
                                                success: true,
                                                data: JSON.parse(res),
                                            }];
                                    }
                                }
                                catch (err) {
                                    throw new Error('Failed to call avm. Result: ' + res + '. Error: ' + err);
                                }
                                return [2 /*return*/];
                        }
                    });
                }); },
                createNewParticle: function (script, ttl) {
                    if (ttl === void 0) { ttl = _this._defaultTTL; }
                    var status = _this.getStatus();
                    if (!status.isInitialized) {
                        return new Error("Can't create new particle: peer is not initialized");
                    }
                    return Particle_1.Particle.createNew(script, ttl, status.peerId);
                },
                /**
                 * Initiates a new particle execution starting from local peer
                 * @param particle - particle to start execution of
                 */
                initiateParticle: function (particle, onStageChange) {
                    var status = _this.getStatus();
                    if (!status.isInitialized) {
                        throw new Error('Cannot initiate new particle: peer is not initialized');
                    }
                    if (_this._printParticleId) {
                        console.log('Particle id: ', particle.id);
                    }
                    if (particle.initPeerId === undefined) {
                        particle.initPeerId = status.peerId;
                    }
                    if (particle.ttl === undefined) {
                        particle.ttl = _this._defaultTTL;
                    }
                    _this._incomingParticles.next({
                        particle: particle,
                        onStageChange: onStageChange,
                    });
                },
                /**
                 * Register Call Service handler functions
                 */
                regHandler: {
                    /**
                     * Register handler for all particles
                     */
                    common: function (
                    // force new line
                    serviceId, fnName, handler) {
                        _this._commonHandlers.set(serviceFnKey(serviceId, fnName), handler);
                    },
                    /**
                     * Register handler which will be called only for particle with the specific id
                     */
                    forParticle: function (particleId, serviceId, fnName, handler) {
                        var psh = _this._particleSpecificHandlers.get(particleId);
                        if (psh === undefined) {
                            psh = new Map();
                            _this._particleSpecificHandlers.set(particleId, psh);
                        }
                        psh.set(serviceFnKey(serviceId, fnName), handler);
                    },
                },
            };
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @private Subject to change. Do not use this method directly
     */
    FluencePeer.prototype.init = function (config) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function () {
            var peerId, marineDeps, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        this._keyPair = config.KeyPair;
                        peerId = this._keyPair.Libp2pPeerId.toB58String();
                        if ((_a = config === null || config === void 0 ? void 0 : config.debug) === null || _a === void 0 ? void 0 : _a.printParticleId) {
                            this._printParticleId = true;
                        }
                        this._defaultTTL = (_b = config === null || config === void 0 ? void 0 : config.defaultTtlMs) !== null && _b !== void 0 ? _b : DEFAULT_TTL;
                        if ((_c = config === null || config === void 0 ? void 0 : config.debug) === null || _c === void 0 ? void 0 : _c.marineLogLevel) {
                            this._marineLogLevel = config.debug.marineLogLevel;
                        }
                        this._fluenceAppService = new marine_js_1.FluenceAppService((_d = config === null || config === void 0 ? void 0 : config.marineJS) === null || _d === void 0 ? void 0 : _d.workerScriptPath);
                        if (!(config === null || config === void 0 ? void 0 : config.marineJS)) return [3 /*break*/, 2];
                        return [4 /*yield*/, loadMarineAndAvm(config.marineJS.marineWasmPath, config.marineJS.avmWasmPath)];
                    case 1:
                        _e = _f.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, (0, marine_js_1.loadDefaults)()];
                    case 3:
                        _e = _f.sent();
                        _f.label = 4;
                    case 4:
                        marineDeps = _e;
                        return [4 /*yield*/, this._fluenceAppService.init(marineDeps.marine)];
                    case 5:
                        _f.sent();
                        return [4 /*yield*/, this._fluenceAppService.createService(marineDeps.avm, 'avm', undefined, (0, utils_1.marineLogLevelToEnvs)(this._marineLogLevel))];
                    case 6:
                        _f.sent();
                        registerDefaultServices(this);
                        this._classServices = {
                            sig: new Sig_1.Sig(this._keyPair),
                        };
                        this._classServices.sig.securityGuard = (0, Sig_1.defaultSigGuard)(peerId);
                        (0, services_1.registerSig)(this, this._classServices.sig);
                        (0, services_1.registerSig)(this, peerId, this._classServices.sig);
                        this._startParticleProcessing();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @private Subject to change. Do not use this method directly
     */
    FluencePeer.prototype.connect = function (connection) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._connection) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._connection.disconnect()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        this._connection = connection;
                        return [4 /*yield*/, this._connection.connect(this._onIncomingParticle.bind(this))];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @private Subject to change. Do not use this method directly
     */
    FluencePeer.prototype.disconnect = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._connection) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._connection.disconnect()];
                    case 1:
                        _a.sent();
                        this._connection = undefined;
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    FluencePeer.prototype._containsService = function (serviceId) {
        return this._marineServices.has(serviceId) || this._commonHandlers.has(serviceId);
    };
    FluencePeer.prototype._onIncomingParticle = function (p) {
        var particle = Particle_1.Particle.fromString(p);
        this._incomingParticles.next({ particle: particle, onStageChange: function () { } });
    };
    FluencePeer.prototype._startParticleProcessing = function () {
        var _this = this;
        this._incomingParticles
            .pipe((0, rxjs_1.tap)(function (x) {
            x.particle.logTo('debug', 'particle received:');
        }), filterExpiredParticles(this._expireParticle.bind(this)))
            .subscribe(function (item) {
            var p = item.particle;
            var particlesQueue = _this._particleQueues.get(p.id);
            if (!particlesQueue) {
                particlesQueue = _this._createParticlesProcessingQueue();
                _this._particleQueues.set(p.id, particlesQueue);
                var timeout = setTimeout(function () {
                    _this._expireParticle(item);
                }, p.actualTtl());
                _this._timeouts.push(timeout);
            }
            particlesQueue.next(item);
        });
        this._outgoingParticles.subscribe(function (item) {
            // Do not send particle after the peer has been stopped
            if (!_this.getStatus().isInitialized) {
                return;
            }
            if (!_this._connection) {
                item.particle.logTo('error', 'cannot send particle, peer is not connected');
                item.onStageChange({ stage: 'sendingError' });
                return;
            }
            item.particle.logTo('debug', 'sending particle:');
            _this._connection.sendParticle(item.nextPeerIds, item.particle.toString()).then(function () {
                item.onStageChange({ stage: 'sent' });
            }, function (e) {
                loglevel_1.default.error(e);
            });
        });
    };
    FluencePeer.prototype._expireParticle = function (item) {
        var particleId = item.particle.id;
        loglevel_1.default.debug("particle ".concat(particleId, " has expired after ").concat(item.particle.ttl, ". Deleting particle-related queues and handlers"));
        this._particleQueues.delete(particleId);
        this._particleSpecificHandlers.delete(particleId);
        item.onStageChange({ stage: 'expired' });
    };
    FluencePeer.prototype._createParticlesProcessingQueue = function () {
        var _this = this;
        var particlesQueue = new rxjs_1.Subject();
        var prevData = Buffer_1.default.from([]);
        particlesQueue
            .pipe(filterExpiredParticles(this._expireParticle.bind(this)), (0, rxjs_1.concatMap)(function (item) { return __awaiter(_this, void 0, void 0, function () {
            var status, args, avmCallResult, res, e_1, newData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        status = this.getStatus();
                        if (!status.isInitialized || this._fluenceAppService === undefined) {
                            // If `.stop()` was called return null to stop particle processing immediately
                            return [2 /*return*/, null];
                        }
                        args = (0, avm_1.serializeAvmArgs)({
                            initPeerId: item.particle.initPeerId,
                            currentPeerId: status.peerId,
                            timestamp: item.particle.timestamp,
                            ttl: item.particle.ttl,
                        }, item.particle.script, prevData, item.particle.data, item.particle.callResults);
                        item.particle.logTo('debug', 'Sending particle to interpreter');
                        loglevel_1.default.debug('prevData: ', (0, utils_1.dataToString)(prevData));
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this._fluenceAppService.callService('avm', 'invoke', args, undefined)];
                    case 2:
                        res = _a.sent();
                        avmCallResult = (0, avm_1.deserializeAvmResult)(res);
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        avmCallResult = e_1 instanceof Error ? e_1 : new Error(e_1.toString());
                        return [3 /*break*/, 4];
                    case 4:
                        if (!(avmCallResult instanceof Error) && avmCallResult.retCode === 0) {
                            newData = Buffer_1.default.from(avmCallResult.data);
                            prevData = newData;
                        }
                        return [2 /*return*/, __assign(__assign({}, item), { result: avmCallResult })];
                }
            });
        }); }))
            .subscribe(function (item) {
            var e_2, _a;
            // If `.stop()` was called then item will be null and we need to stop particle processing immediately
            if (item === null || !_this.getStatus().isInitialized) {
                return;
            }
            // Do not continue if there was an error in particle interpretation
            if (item.result instanceof Error) {
                loglevel_1.default.error('Interpreter failed: ', (0, utils_1.jsonify)(item.result.message));
                item.onStageChange({ stage: 'interpreterError', errorMessage: item.result.message });
                return;
            }
            var toLog = __assign(__assign({}, item.result), { data: (0, utils_1.dataToString)(item.result.data) });
            if (item.result.retCode !== 0) {
                loglevel_1.default.error('Interpreter failed: ', (0, utils_1.jsonify)(toLog));
                item.onStageChange({ stage: 'interpreterError', errorMessage: item.result.errorMessage });
                return;
            }
            loglevel_1.default.debug('Interpreter result: ', (0, utils_1.jsonify)(toLog));
            setTimeout(function () {
                item.onStageChange({ stage: 'interpreted' });
            }, 0);
            // send particle further if requested
            if (item.result.nextPeerPks.length > 0) {
                var newParticle = item.particle.clone();
                var newData = Buffer_1.default.from(item.result.data);
                newParticle.data = newData;
                _this._outgoingParticles.next(__assign(__assign({}, item), { particle: newParticle, nextPeerIds: item.result.nextPeerPks }));
            }
            // execute call requests if needed
            // and put particle with the results back to queue
            if (item.result.callRequests.length > 0) {
                var _loop_1 = function (key, cr) {
                    var req = {
                        fnName: cr.functionName,
                        args: cr.arguments,
                        serviceId: cr.serviceId,
                        tetraplets: cr.tetraplets,
                        particleContext: item.particle.getParticleContext(),
                    };
                    _this._execSingleCallRequest(req)
                        .catch(function (err) { return ({
                        retCode: commonTypes_1.ResultCodes.error,
                        result: "Handler failed. fnName=\"".concat(req.fnName, "\" serviceId=\"").concat(req.serviceId, "\" error: ").concat(err.toString()),
                    }); })
                        .then(function (res) {
                        var serviceResult = {
                            result: (0, utils_1.jsonify)(res.result),
                            retCode: res.retCode,
                        };
                        var newParticle = item.particle.clone();
                        newParticle.callResults = [[key, serviceResult]];
                        newParticle.data = Buffer_1.default.from([]);
                        particlesQueue.next(__assign(__assign({}, item), { particle: newParticle }));
                    });
                };
                try {
                    for (var _b = __values(item.result.callRequests), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var _d = __read(_c.value, 2), key = _d[0], cr = _d[1];
                        _loop_1(key, cr);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            else {
                item.onStageChange({ stage: 'localWorkDone' });
            }
        });
        return particlesQueue;
    };
    FluencePeer.prototype._execSingleCallRequest = function (req) {
        return __awaiter(this, void 0, void 0, function () {
            var particleId, result, key, psh, handler, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        loglevel_1.default.debug('executing call service handler', (0, utils_1.jsonify)(req));
                        particleId = req.particleContext.particleId;
                        if (!(this._fluenceAppService && this._marineServices.has(req.serviceId))) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._fluenceAppService.callService(req.serviceId, req.fnName, req.args, undefined)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, {
                                retCode: commonTypes_1.ResultCodes.success,
                                result: result,
                            }];
                    case 2:
                        key = serviceFnKey(req.serviceId, req.fnName);
                        psh = this._particleSpecificHandlers.get(particleId);
                        // we should prioritize handler for this particle if there is one
                        // if particle-specific handlers exist for this particle try getting handler there
                        if (psh !== undefined) {
                            handler = psh.get(key);
                        }
                        // then try to find a common handler for all particles with this service-fn key
                        // if there is no particle-specific handler, get one from common map
                        if (handler === undefined) {
                            handler = this._commonHandlers.get(key);
                        }
                        // if no handler is found return useful error message to AVM
                        if (handler === undefined) {
                            return [2 /*return*/, {
                                    retCode: commonTypes_1.ResultCodes.error,
                                    result: "No handler has been registered for serviceId='".concat(req.serviceId, "' fnName='").concat(req.fnName, "' args='").concat((0, utils_1.jsonify)(req.args), "'"),
                                }];
                        }
                        return [4 /*yield*/, handler(req)];
                    case 3:
                        res = _a.sent();
                        if (res.result === undefined) {
                            res.result = null;
                        }
                        loglevel_1.default.debug('executed call service handler, req and res are: ', (0, utils_1.jsonify)(req), (0, utils_1.jsonify)(res));
                        return [2 /*return*/, res];
                }
            });
        });
    };
    FluencePeer.prototype._stopParticleProcessing = function () {
        // do not hang if the peer has been stopped while some of the timeouts are still being executed
        this._timeouts.forEach(function (timeout) {
            clearTimeout(timeout);
        });
        this._particleQueues.clear();
    };
    return FluencePeer;
}());
exports.FluencePeer = FluencePeer;
function configToConnection(keyPair, connection, dialTimeoutMs) {
    return __awaiter(this, void 0, void 0, function () {
        var connectToMultiAddr, tmp, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!connection) {
                        return [2 /*return*/, null];
                    }
                    if (connection instanceof interfaces_1.FluenceConnection) {
                        return [2 /*return*/, connection];
                    }
                    tmp = connection;
                    if (tmp.multiaddr !== undefined) {
                        // specified as FluenceNode (object with multiaddr and peerId props)
                        connectToMultiAddr = tmp.multiaddr;
                    }
                    else {
                        // specified as MultiaddrInput
                        connectToMultiAddr = tmp;
                    }
                    return [4 /*yield*/, connection_1.RelayConnection.createConnection({
                            peerId: keyPair.Libp2pPeerId,
                            relayAddress: connectToMultiAddr,
                            dialTimeoutMs: dialTimeoutMs,
                        })];
                case 1:
                    res = _a.sent();
                    return [2 /*return*/, res];
            }
        });
    });
}
function serviceFnKey(serviceId, fnName) {
    return "".concat(serviceId, "/").concat(fnName);
}
function registerDefaultServices(peer) {
    Object.entries(common_1.builtInServices).forEach(function (_a) {
        var _b = __read(_a, 2), serviceId = _b[0], service = _b[1];
        Object.entries(service).forEach(function (_a) {
            var _b = __read(_a, 2), fnName = _b[0], fn = _b[1];
            peer.internals.regHandler.common(serviceId, fnName, fn);
        });
    });
}
function filterExpiredParticles(onParticleExpiration) {
    return (0, rxjs_1.pipe)((0, rxjs_1.tap)(function (item) {
        if (item.particle.hasExpired()) {
            onParticleExpiration(item);
        }
    }), (0, rxjs_1.filter)(function (x) { return !x.particle.hasExpired(); }));
}
function loadMarineAndAvm(marinePath, avmPath) {
    return __awaiter(this, void 0, void 0, function () {
        var promises, _a, marine, avm;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    // check if we are running inside the browser and instantiate worker with the corresponding script
                    if (browser_or_node_1.isBrowser) {
                        promises = [
                            // force new line
                            (0, marine_js_1.loadWasmFromServer)(marinePath),
                            (0, marine_js_1.loadWasmFromServer)(avmPath),
                        ];
                    }
                    else if (browser_or_node_1.isNode) {
                        promises = [
                            // force new line
                            (0, marine_js_1.loadWasmFromFileSystem)(marinePath),
                            (0, marine_js_1.loadWasmFromFileSystem)(avmPath),
                        ];
                    }
                    else {
                        throw new Error('Unknown environment');
                    }
                    return [4 /*yield*/, Promise.all(promises)];
                case 1:
                    _a = __read.apply(void 0, [_b.sent(), 2]), marine = _a[0], avm = _a[1];
                    return [2 /*return*/, {
                            marine: marine,
                            avm: avm,
                        }];
            }
        });
    });
}
//# sourceMappingURL=FluencePeer.js.map
"use strict";
/*
 * Copyright 2021 Fluence Labs Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isObject = exports.isString = exports.builtInServices = void 0;
var bs58_1 = require("bs58");
var sha2_1 = require("multiformats/hashes/sha2");
var commonTypes_1 = require("../commonTypes");
var utils_1 = require("../utils");
var Buffer_1 = __importDefault(require("../Buffer"));
var success = function (result) {
    return {
        result: result,
        retCode: commonTypes_1.ResultCodes.success,
    };
};
var error = function (error) {
    return {
        result: error,
        retCode: commonTypes_1.ResultCodes.error,
    };
};
var errorNotImpl = function (methodName) {
    return error("The JS implementation of Peer does not support \"".concat(methodName, "\""));
};
var makeJsonImpl = function (args) {
    var _a = __read(args), obj = _a[0], kvs = _a.slice(1);
    var toMerge = {};
    for (var i = 0; i < kvs.length / 2; i++) {
        var k = kvs[i * 2];
        if (!(0, exports.isString)(k)) {
            return error("Argument ".concat(k, " is expected to be string"));
        }
        var v = kvs[i * 2 + 1];
        toMerge[k] = v;
    }
    var res = __assign(__assign({}, obj), toMerge);
    return success(res);
};
exports.builtInServices = {
    peer: {
        identify: function () {
            return success({
                external_addresses: [],
                // TODO: remove hardcoded values
                node_version: 'js-0.23.0',
                air_version: 'js-0.24.2',
            });
        },
        timestamp_ms: function () {
            return success(Date.now());
        },
        timestamp_sec: function () {
            return success(Math.floor(Date.now() / 1000));
        },
        is_connected: function () {
            return errorNotImpl('peer.is_connected');
        },
        connect: function () {
            return errorNotImpl('peer.connect');
        },
        get_contact: function () {
            return errorNotImpl('peer.get_contact');
        },
        timeout: function (req) {
            if (req.args.length !== 2) {
                return error('timeout accepts exactly two arguments: timeout duration in ms and a message string');
            }
            var durationMs = req.args[0];
            var message = req.args[1];
            return new Promise(function (resolve) {
                setTimeout(function () {
                    var res = success(message);
                    resolve(res);
                }, durationMs);
            });
        },
    },
    kad: {
        neighborhood: function () {
            return errorNotImpl('kad.neighborhood');
        },
        merge: function () {
            return errorNotImpl('kad.merge');
        },
    },
    srv: {
        list: function () {
            return errorNotImpl('srv.list');
        },
        create: function () {
            return errorNotImpl('srv.create');
        },
        get_interface: function () {
            return errorNotImpl('srv.get_interface');
        },
        resolve_alias: function () {
            return errorNotImpl('srv.resolve_alias');
        },
        add_alias: function () {
            return errorNotImpl('srv.add_alias');
        },
        remove: function () {
            return errorNotImpl('srv.remove');
        },
    },
    dist: {
        add_module_from_vault: function () {
            return errorNotImpl('dist.add_module_from_vault');
        },
        add_module: function () {
            return errorNotImpl('dist.add_module');
        },
        add_blueprint: function () {
            return errorNotImpl('dist.add_blueprint');
        },
        make_module_config: function () {
            return errorNotImpl('dist.make_module_config');
        },
        load_module_config: function () {
            return errorNotImpl('dist.load_module_config');
        },
        default_module_config: function () {
            return errorNotImpl('dist.default_module_config');
        },
        make_blueprint: function () {
            return errorNotImpl('dist.make_blueprint');
        },
        load_blueprint: function () {
            return errorNotImpl('dist.load_blueprint');
        },
        list_modules: function () {
            return errorNotImpl('dist.list_modules');
        },
        get_module_interface: function () {
            return errorNotImpl('dist.get_module_interface');
        },
        list_blueprints: function () {
            return errorNotImpl('dist.list_blueprints');
        },
    },
    script: {
        add: function () {
            return errorNotImpl('script.add');
        },
        remove: function () {
            return errorNotImpl('script.remove');
        },
        list: function () {
            return errorNotImpl('script.list');
        },
    },
    op: {
        noop: function () {
            return success({});
        },
        array: function (req) {
            return success(req.args);
        },
        array_length: function (req) {
            if (req.args.length !== 1) {
                return error('array_length accepts exactly one argument, found: ' + req.args.length);
            }
            else {
                return success(req.args[0].length);
            }
        },
        identity: function (req) {
            if (req.args.length > 1) {
                return error("identity accepts up to 1 arguments, received ".concat(req.args.length, " arguments"));
            }
            else {
                return success(req.args.length === 0 ? {} : req.args[0]);
            }
        },
        concat: function (req) {
            var incorrectArgIndices = req.args //
                .map(function (x, i) { return [Array.isArray(x), i]; })
                .filter(function (_a) {
                var _b = __read(_a, 2), isArray = _b[0], _ = _b[1];
                return !isArray;
            })
                .map(function (_a) {
                var _b = __read(_a, 2), _ = _b[0], index = _b[1];
                return index;
            });
            if (incorrectArgIndices.length > 0) {
                var str = incorrectArgIndices.join(', ');
                return error("All arguments of 'concat' must be arrays: arguments ".concat(str, " are not"));
            }
            else {
                return success([].concat.apply([], req.args));
            }
        },
        string_to_b58: function (req) {
            if (req.args.length !== 1) {
                return error('string_to_b58 accepts only one string argument');
            }
            else {
                return success((0, bs58_1.encode)(new TextEncoder().encode(req.args[0])));
            }
        },
        string_from_b58: function (req) {
            if (req.args.length !== 1) {
                return error('string_from_b58 accepts only one string argument');
            }
            else {
                return success(new TextDecoder().decode((0, bs58_1.decode)(req.args[0])));
            }
        },
        bytes_to_b58: function (req) {
            if (req.args.length !== 1 || !Array.isArray(req.args[0])) {
                return error('bytes_to_b58 accepts only single argument: array of numbers');
            }
            else {
                var argumentArray = req.args[0];
                return success((0, bs58_1.encode)(new Uint8Array(argumentArray)));
            }
        },
        bytes_from_b58: function (req) {
            if (req.args.length !== 1) {
                return error('bytes_from_b58 accepts only one string argument');
            }
            else {
                return success(Array.from((0, bs58_1.decode)(req.args[0])));
            }
        },
        sha256_string: function (req) { return __awaiter(void 0, void 0, void 0, function () {
            var _a, input, digestOnly, asBytes, inBuffer, multihash, outBytes, res;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(req.args.length < 1 || req.args.length > 3)) return [3 /*break*/, 1];
                        return [2 /*return*/, error("sha256_string accepts 1-3 arguments, found: ".concat(req.args.length))];
                    case 1:
                        _a = __read(req.args, 3), input = _a[0], digestOnly = _a[1], asBytes = _a[2];
                        inBuffer = Buffer_1.default.from(input);
                        return [4 /*yield*/, sha2_1.sha256.digest(inBuffer)];
                    case 2:
                        multihash = _b.sent();
                        outBytes = digestOnly ? multihash.digest : multihash.bytes;
                        res = asBytes ? Array.from(outBytes) : (0, bs58_1.encode)(outBytes);
                        return [2 /*return*/, success(res)];
                }
            });
        }); },
        concat_strings: function (req) {
            var res = ''.concat.apply('', __spreadArray([], __read(req.args), false));
            return success(res);
        },
    },
    debug: {
        stringify: function (req) {
            var out;
            if (req.args.length === 0) {
                out = '<empty argument list>';
            }
            else if (req.args.length === 1) {
                out = req.args[0];
            }
            else {
                out = req.args;
            }
            return success((0, utils_1.jsonify)(out));
        },
    },
    math: {
        add: function (req) {
            var err;
            if ((err = checkForArgumentsCount(req, 2))) {
                return err;
            }
            var _a = __read(req.args, 2), x = _a[0], y = _a[1];
            return success(x + y);
        },
        sub: function (req) {
            var err;
            if ((err = checkForArgumentsCount(req, 2))) {
                return err;
            }
            var _a = __read(req.args, 2), x = _a[0], y = _a[1];
            return success(x - y);
        },
        mul: function (req) {
            var err;
            if ((err = checkForArgumentsCount(req, 2))) {
                return err;
            }
            var _a = __read(req.args, 2), x = _a[0], y = _a[1];
            return success(x * y);
        },
        fmul: function (req) {
            var err;
            if ((err = checkForArgumentsCount(req, 2))) {
                return err;
            }
            var _a = __read(req.args, 2), x = _a[0], y = _a[1];
            return success(Math.floor(x * y));
        },
        div: function (req) {
            var err;
            if ((err = checkForArgumentsCount(req, 2))) {
                return err;
            }
            var _a = __read(req.args, 2), x = _a[0], y = _a[1];
            return success(Math.floor(x / y));
        },
        rem: function (req) {
            var err;
            if ((err = checkForArgumentsCount(req, 2))) {
                return err;
            }
            var _a = __read(req.args, 2), x = _a[0], y = _a[1];
            return success(x % y);
        },
        pow: function (req) {
            var err;
            if ((err = checkForArgumentsCount(req, 2))) {
                return err;
            }
            var _a = __read(req.args, 2), x = _a[0], y = _a[1];
            return success(Math.pow(x, y));
        },
        log: function (req) {
            var err;
            if ((err = checkForArgumentsCount(req, 2))) {
                return err;
            }
            var _a = __read(req.args, 2), x = _a[0], y = _a[1];
            return success(Math.log(y) / Math.log(x));
        },
    },
    cmp: {
        gt: function (req) {
            var err;
            if ((err = checkForArgumentsCount(req, 2))) {
                return err;
            }
            var _a = __read(req.args, 2), x = _a[0], y = _a[1];
            return success(x > y);
        },
        gte: function (req) {
            var err;
            if ((err = checkForArgumentsCount(req, 2))) {
                return err;
            }
            var _a = __read(req.args, 2), x = _a[0], y = _a[1];
            return success(x >= y);
        },
        lt: function (req) {
            var err;
            if ((err = checkForArgumentsCount(req, 2))) {
                return err;
            }
            var _a = __read(req.args, 2), x = _a[0], y = _a[1];
            return success(x < y);
        },
        lte: function (req) {
            var err;
            if ((err = checkForArgumentsCount(req, 2))) {
                return err;
            }
            var _a = __read(req.args, 2), x = _a[0], y = _a[1];
            return success(x <= y);
        },
        cmp: function (req) {
            var err;
            if ((err = checkForArgumentsCount(req, 2))) {
                return err;
            }
            var _a = __read(req.args, 2), x = _a[0], y = _a[1];
            return success(x === y ? 0 : x > y ? 1 : -1);
        },
    },
    array: {
        sum: function (req) {
            var err;
            if ((err = checkForArgumentsCount(req, 1))) {
                return err;
            }
            var _a = __read(req.args, 1), xs = _a[0];
            return success(xs.reduce(function (agg, cur) { return agg + cur; }, 0));
        },
        dedup: function (req) {
            var err;
            if ((err = checkForArgumentsCount(req, 1))) {
                return err;
            }
            var _a = __read(req.args, 1), xs = _a[0];
            var set = new Set(xs);
            return success(Array.from(set));
        },
        intersect: function (req) {
            var err;
            if ((err = checkForArgumentsCount(req, 2))) {
                return err;
            }
            var _a = __read(req.args, 2), xs = _a[0], ys = _a[1];
            var intersection = xs.filter(function (x) { return ys.includes(x); });
            return success(intersection);
        },
        diff: function (req) {
            var err;
            if ((err = checkForArgumentsCount(req, 2))) {
                return err;
            }
            var _a = __read(req.args, 2), xs = _a[0], ys = _a[1];
            var diff = xs.filter(function (x) { return !ys.includes(x); });
            return success(diff);
        },
        sdiff: function (req) {
            var err;
            if ((err = checkForArgumentsCount(req, 2))) {
                return err;
            }
            var _a = __read(req.args, 2), xs = _a[0], ys = _a[1];
            var sdiff = __spreadArray(__spreadArray([], __read(xs.filter(function (y) { return !ys.includes(y); })), false), __read(ys.filter(function (x) { return !xs.includes(x); })), false);
            return success(sdiff);
        },
    },
    json: {
        obj: function (req) {
            var err;
            if ((err = checkForArgumentsCountEven(req, 1))) {
                return err;
            }
            return makeJsonImpl(__spreadArray([{}], __read(req.args), false));
        },
        put: function (req) {
            var err;
            if ((err = checkForArgumentsCount(req, 3))) {
                return err;
            }
            if ((err = checkForArgumentType(req, 0, "object"))) {
                return err;
            }
            return makeJsonImpl(req.args);
        },
        puts: function (req) {
            var err;
            if ((err = checkForArgumentsCountOdd(req, 1))) {
                return err;
            }
            if ((err = checkForArgumentsCountMoreThan(req, 3))) {
                return err;
            }
            if ((err = checkForArgumentType(req, 0, "object"))) {
                return err;
            }
            return makeJsonImpl(req.args);
        },
        stringify: function (req) {
            var err;
            if ((err = checkForArgumentsCount(req, 1))) {
                return err;
            }
            if ((err = checkForArgumentType(req, 0, "object"))) {
                return err;
            }
            var _a = __read(req.args, 1), json = _a[0];
            var res = JSON.stringify(json);
            return success(res);
        },
        parse: function (req) {
            var err;
            if ((err = checkForArgumentsCount(req, 1))) {
                return err;
            }
            if ((err = checkForArgumentType(req, 0, "string"))) {
                return err;
            }
            var _a = __read(req.args, 1), raw = _a[0];
            try {
                var json = JSON.parse(raw);
                return success(json);
            }
            catch (err) {
                return error(err.message);
            }
        },
    },
};
var checkForArgumentsCount = function (req, count) {
    if (req.args.length !== count) {
        return error("Expected ".concat(count, " argument(s). Got ").concat(req.args.length));
    }
};
var checkForArgumentsCountMoreThan = function (req, count) {
    if (req.args.length < count) {
        return error("Expected more than ".concat(count, " argument(s). Got ").concat(req.args.length));
    }
};
var checkForArgumentsCountEven = function (req, count) {
    if (req.args.length % 2 === 1) {
        return error("Expected even number of argument(s). Got ".concat(req.args.length));
    }
};
var checkForArgumentsCountOdd = function (req, count) {
    if (req.args.length % 2 === 0) {
        return error("Expected odd number of argument(s). Got ".concat(req.args.length));
    }
};
var checkForArgumentType = function (req, index, type) {
    var actual = typeof req.args[index];
    if (actual !== type) {
        return error("Argument ".concat(index, " expected to be of type ").concat(type, ", Got ").concat(actual));
    }
};
var isString = function (unknown) {
    return unknown !== null && typeof unknown === 'string';
};
exports.isString = isString;
var isObject = function (unknown) {
    return unknown !== null && typeof unknown === 'object';
};
exports.isObject = isObject;
//# sourceMappingURL=common.js.map
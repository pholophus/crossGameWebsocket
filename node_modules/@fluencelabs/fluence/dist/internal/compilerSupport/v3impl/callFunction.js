"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.callFunction = void 0;
var FluencePeer_1 = require("../../FluencePeer");
var index_1 = require("../../../index");
var services_1 = require("./services");
/**
 * Convenience function to support Aqua `func` generation backend
 * The compiler only need to generate a call the function and provide the corresponding definitions and the air script
 *
 * @param rawFnArgs - raw arguments passed by user to the generated function
 * @param def - function definition generated by the Aqua compiler
 * @param script - air script with function execution logic generated by the Aqua compiler
 */
function callFunction(rawFnArgs, def, script) {
    if (def.arrow.domain.tag !== 'labeledProduct') {
        throw new Error('Should be impossible');
    }
    var argumentTypes = Object.entries(def.arrow.domain.fields);
    var expectedNumberOfArguments = argumentTypes.length;
    var _a = extractArgs(rawFnArgs, expectedNumberOfArguments), args = _a.args, peer = _a.peer, config = _a.config;
    if (args.length !== expectedNumberOfArguments) {
        throw new Error('Incorrect number of arguments. Expecting ${def.argDefs.length}');
    }
    var promise = new Promise(function (resolve, reject) {
        var particle = peer.internals.createNewParticle(script, config === null || config === void 0 ? void 0 : config.ttl);
        if (particle instanceof Error) {
            return reject(particle.message);
        }
        for (var i = 0; i < expectedNumberOfArguments; i++) {
            var _a = __read(argumentTypes[i], 2), name_1 = _a[0], type = _a[1];
            var service = void 0;
            if (type.tag === 'arrow') {
                service = (0, services_1.userHandlerService)(def.names.callbackSrv, [name_1, type], args[i]);
            }
            else {
                service = (0, services_1.injectValueService)(def.names.getDataSrv, name_1, type, args[i]);
            }
            (0, services_1.registerParticleScopeService)(peer, particle, service);
        }
        (0, services_1.registerParticleScopeService)(peer, particle, (0, services_1.responseService)(def, resolve));
        (0, services_1.registerParticleScopeService)(peer, particle, (0, services_1.injectRelayService)(def, peer));
        (0, services_1.registerParticleScopeService)(peer, particle, (0, services_1.errorHandlingService)(def, reject));
        peer.internals.initiateParticle(particle, function (stage) {
            // If function is void, then it's completed when one of the two conditions is met:
            //  1. The particle is sent to the network (state 'sent')
            //  2. All CallRequests are executed, e.g., all variable loading and local function calls are completed (state 'localWorkDone')
            if (isReturnTypeVoid(def) && (stage.stage === 'sent' || stage.stage === 'localWorkDone')) {
                resolve(undefined);
            }
            if (stage.stage === 'sendingError') {
                reject("Could not send particle for ".concat(def.functionName, ": not connected  (particle id: ").concat(particle.id, ")"));
            }
            if (stage.stage === 'expired') {
                reject("Request timed out after ".concat(particle.ttl, " for ").concat(def.functionName, " (particle id: ").concat(particle.id, ")"));
            }
            if (stage.stage === 'interpreterError') {
                reject("Script interpretation failed for ".concat(def.functionName, ": ").concat(stage.errorMessage, "  (particle id: ").concat(particle.id, ")"));
            }
        });
    });
    return promise;
}
exports.callFunction = callFunction;
var isReturnTypeVoid = function (def) {
    if (def.arrow.codomain.tag === 'nil') {
        return true;
    }
    return def.arrow.codomain.items.length == 0;
};
/**
 * Arguments could be passed in one these configurations:
 * [...actualArgs]
 * [peer, ...actualArgs]
 * [...actualArgs, config]
 * [peer, ...actualArgs, config]
 *
 * This function select the appropriate configuration and returns
 * arguments in a structured way of: { peer, config, args }
 */
var extractArgs = function (args, numberOfExpectedArgs) {
    var peer;
    var structuredArgs;
    var config;
    if (FluencePeer_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
        structuredArgs = args.slice(1, numberOfExpectedArgs + 1);
        config = args[numberOfExpectedArgs + 1];
    }
    else {
        peer = index_1.Fluence.getPeer();
        structuredArgs = args.slice(0, numberOfExpectedArgs);
        config = args[numberOfExpectedArgs];
    }
    return {
        peer: peer,
        config: config,
        args: structuredArgs,
    };
};
//# sourceMappingURL=callFunction.js.map
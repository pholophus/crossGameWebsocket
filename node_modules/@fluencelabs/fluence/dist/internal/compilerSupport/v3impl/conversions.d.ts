import { ArrowType, ArrowWithoutCallbacks, NonArrowType } from './interface';
import { CallServiceData } from 'src/internal/commonTypes';
/**
 * Convert value from its representation in aqua language to representation in typescript
 * @param value - value as represented in aqua
 * @param type - definition of the aqua type
 * @returns value represented in typescript
 */
export declare const aqua2ts: (value: any, type: NonArrowType) => any;
/**
 * Convert call service arguments list from their aqua representation to representation in typescript
 * @param req - call service data
 * @param arrow - aqua type definition
 * @returns arguments in typescript representation
 */
export declare const aquaArgs2Ts: (req: CallServiceData, arrow: ArrowWithoutCallbacks) => any[];
/**
 * Convert value from its typescript representation to representation in aqua
 * @param value - the value as represented in typescript
 * @param type - definition of the aqua type
 * @returns value represented in aqua
 */
export declare const ts2aqua: (value: any, type: NonArrowType) => any;
/**
 * Convert return type of the service from it's typescript representation to representation in aqua
 * @param returnValue - the value as represented in typescript
 * @param arrowType - the arrow type which describes the service
 * @returns - value represented in aqua
 */
export declare const returnType2Aqua: (returnValue: any, arrowType: ArrowType<NonArrowType>) => any;
/**
 * Converts response value from aqua its representation to representation in typescript
 * @param req - call service data
 * @param arrow - aqua type definition
 * @returns response value in typescript representation
 */
export declare const responseServiceValue2ts: (req: CallServiceData, arrow: ArrowType<any>) => undefined;
//# sourceMappingURL=conversions.d.ts.map
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EphemeralNetwork = exports.defaultConfig = void 0;
var interfaces_1 = require("@fluencelabs/interfaces");
var keypair_1 = require("@fluencelabs/keypair");
var index_1 = require("../index");
var loglevel_1 = __importDefault(require("loglevel"));
exports.defaultConfig = {
    peers: [
        {
            peerId: '12D3KooWJankP2PcEDYCZDdJ26JsU8BMRfdGWyGqbtFiWyoKVtmx',
            sk: 'dWNAHhDVuFj9bEieILMu6TcCFRxBJdOPIvAWmf4sZQI=',
        },
        {
            peerId: '12D3KooWSBTB5sYxdwayUyTnqopBwABsnGFY3p4dTx5hABYDtJjV',
            sk: 'dOmaxAeu4Th+MJ22vRDLMFTNbiDgKNXar9fW9ofAMgQ=',
        },
        {
            peerId: '12D3KooWQjwf781DJ41moW5RrZXypLdnTbo6aMsoA8QLctGGX8RB',
            sk: 'TgzaLlxXuOMDNuuuTKEHUKsW0jM4AmX0gahFvkB1KgE=',
        },
        {
            peerId: '12D3KooWCXWTLFyY1mqKnNAhLQTsjW1zqDzCMbUs8M4a8zdz28HK',
            sk: 'hiO2Ta8g2ibMQ7iu5yj9CfN+qQCwE8oRShjr7ortKww=',
        },
        {
            peerId: '12D3KooWPmZpf4ng6GMS39HLagxsXbjiTPLH5CFJpFAHyN6amw6V',
            sk: 'LzJtOHTqxfrlHDW40BKiLfjai8JU4yW6/s2zrXLCcQE=',
        },
        {
            peerId: '12D3KooWKrx8PZxM1R9A8tp2jmrFf6c6q1ZQiWfD4QkNgh7fWSoF',
            sk: 'XMhlk/xr1FPcp7sKQhS18doXlq1x16EMhBC2NGW2LQ4=',
        },
        {
            peerId: '12D3KooWCbJHvnzSZEXjR1UJmtSUozuJK13iRiCYHLN1gjvm4TZZ',
            sk: 'KXPAIqxrSHr7v0ngv3qagcqivFvnQ0xd3s1/rKmi8QU=',
        },
        {
            peerId: '12D3KooWEvKe7WQHp42W4xhHRgTAWQjtDWyH38uJbLHAsMuTtYvD',
            sk: 'GCYMAshGnsrNtrHhuT7ayzh5uCzX99J03PmAXoOcCgw=',
        },
        {
            peerId: '12D3KooWSznSHN3BGrSykBXkLkFsqo9SYB73wVauVdqeuRt562cC',
            sk: 'UP+SEuznS0h259VbFquzyOJAQ4W5iIwhP+hd1PmUQQ0=',
        },
        {
            peerId: '12D3KooWF57jwbShfnT3c4dNfRDdGjr6SQ3B71m87UVpEpSWHFwi',
            sk: '8dl+Crm5RSh0eh+LqLKwX8/Eo4QLpvIjfD8L0wzX4A4=',
        },
        {
            peerId: '12D3KooWBWrzpSg9nwMLBCa2cJubUjTv63Mfy6PYg9rHGbetaV5C',
            sk: 'qolc1FcpJ+vHDon0HeXdUYnstjV1wiVx2p0mjblrfAg=',
        },
        {
            peerId: '12D3KooWNkLVU6juM8oyN2SVq5nBd2kp7Rf4uzJH1hET6vj6G5j6',
            sk: 'vN6QzWILTM7hSHp+iGkKxiXcqs8bzlnH3FPaRaDGSQY=',
        },
        {
            peerId: '12D3KooWKo1YwGL5vivPiKJMJS7wjtB6B2nJNdSXPkSABT4NKBUU',
            sk: 'YbDQ++bsor2kei7rYAsu2SbyoiOYPRzFRZWnNRUpBgQ=',
        },
        {
            peerId: '12D3KooWLUyBKmmNCyxaPkXoWcUFPcy5qrZsUo2E1tyM6CJmGJvC',
            sk: 'ptB9eSFMKudAtHaFgDrRK/1oIMrhBujxbMw2Pzwx/wA=',
        },
        {
            peerId: '12D3KooWAEZXME4KMu9FvLezsJWDbYFe2zyujyMnDT1AgcAxgcCk',
            sk: 'xtwTOKgAbDIgkuPf7RKiR7gYyZ1HY4mOgFMv3sOUcAQ=',
        },
        {
            peerId: '12D3KooWEhXetsFVAD9h2dRz9XgFpfidho1TCZVhFrczX8h8qgzY',
            sk: '1I2MGuiKG1F4FDMiRihVOcOP2mxzOLWJ99MeexK27A4=',
        },
        {
            peerId: '12D3KooWDBfVNdMyV3hPEF4WLBmx9DwD2t2SYuqZ2mztYmDzZWM1',
            sk: 'eqJ4Bp7iN4aBXgPH0ezwSg+nVsatkYtfrXv9obI0YQ0=',
        },
        {
            peerId: '12D3KooWSyY7wiSiR4vbXa1WtZawi3ackMTqcQhEPrvqtagoWPny',
            sk: 'UVM3SBJhPYIY/gafpnd9/q/Fn9V4BE9zkgrvF1T7Pgc=',
        },
        {
            peerId: '12D3KooWFZmBMGG9PxTs9s6ASzkLGKJWMyPheA5ruaYc2FDkDTmv',
            sk: '8RbZfEVpQhPVuhv64uqxENDuSoyJrslQoSQJznxsTQ0=',
        },
        {
            peerId: '12D3KooWBbhUaqqur6KHPunnKxXjY1daCtqJdy4wRji89LmAkVB4',
            sk: 'RbgKmG6soWW9uOi7yRedm+0Qck3f3rw6MSnDP7AcBQs=',
        },
    ],
};
/**
 * Ephemeral network implementation.
 * Ephemeral network is a virtual network which runs locally and focuses on p2p interaction by removing connectivity layer out of the equation.
 */
var EphemeralNetwork = /** @class */ (function () {
    function EphemeralNetwork(config) {
        this.config = config;
        this._peers = new Map();
    }
    /**
     * Starts the Ephemeral network up
     */
    EphemeralNetwork.prototype.up = function () {
        return __awaiter(this, void 0, void 0, function () {
            var allPeerIds, promises, values;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        loglevel_1.default.debug('Starting ephemeral network up...');
                        allPeerIds = this.config.peers.map(function (x) { return x.peerId; });
                        promises = this.config.peers.map(function (x) { return __awaiter(_this, void 0, void 0, function () {
                            var peer, sendParticle, kp, handler, connectionCtor, peerId, ephPeer;
                            var _this = this;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        peer = new index_1.FluencePeer();
                                        sendParticle = function (nextPeerIds, particle) { return __awaiter(_this, void 0, void 0, function () {
                                            return __generator(this, function (_a) {
                                                this._send(peer.getStatus().peerId, nextPeerIds, particle);
                                                return [2 /*return*/];
                                            });
                                        }); };
                                        return [4 /*yield*/, (0, keypair_1.keyPairFromBase64Sk)(x.sk)];
                                    case 1:
                                        kp = _a.sent();
                                        if (kp.getPeerId() !== x.peerId) {
                                            throw new Error("Invalid config: peer id ".concat(x.peerId, " does not match the secret key ").concat(x.sk));
                                        }
                                        return [4 /*yield*/, peer.init({
                                                KeyPair: kp,
                                            })];
                                    case 2:
                                        _a.sent();
                                        handler = null;
                                        connectionCtor = /** @class */ (function (_super) {
                                            __extends(class_1, _super);
                                            function class_1() {
                                                var _this = _super !== null && _super.apply(this, arguments) || this;
                                                _this.relayPeerId = null;
                                                _this.sendParticle = sendParticle;
                                                return _this;
                                            }
                                            class_1.prototype.connect = function (onIncomingParticle) {
                                                return __awaiter(this, void 0, void 0, function () {
                                                    return __generator(this, function (_a) {
                                                        handler = onIncomingParticle;
                                                        return [2 /*return*/];
                                                    });
                                                });
                                            };
                                            class_1.prototype.disconnect = function () {
                                                return __awaiter(this, void 0, void 0, function () {
                                                    return __generator(this, function (_a) {
                                                        handler = null;
                                                        return [2 /*return*/];
                                                    });
                                                });
                                            };
                                            return class_1;
                                        }(interfaces_1.FluenceConnection));
                                        return [4 /*yield*/, peer.connect(new connectionCtor())];
                                    case 3:
                                        _a.sent();
                                        peerId = peer.getStatus().peerId;
                                        ephPeer = {
                                            isEphemeral: true,
                                            connections: new Set(allPeerIds.filter(function (x) { return x !== peerId; })),
                                            peer: peer,
                                            peerId: peerId,
                                            onIncoming: handler,
                                        };
                                        return [2 /*return*/, [peerId, ephPeer]];
                                }
                            });
                        }); });
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1:
                        values = _a.sent();
                        this._peers = new Map(values);
                        loglevel_1.default.debug('Ephemeral network started...');
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Shuts the ephemeral network down. Will disconnect all connected peers.
     */
    EphemeralNetwork.prototype.down = function () {
        return __awaiter(this, void 0, void 0, function () {
            var peers, promises;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        loglevel_1.default.debug('Shutting down ephemeral network...');
                        peers = Array.from(this._peers.entries());
                        promises = peers.map(function (_a) {
                            var _b = __read(_a, 2), k = _b[0], p = _b[1];
                            return p.isEphemeral ? p.peer.stop() : p.peer.disconnect();
                        });
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1:
                        _a.sent();
                        this._peers.clear();
                        loglevel_1.default.debug('Ephemeral network shut down');
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets the FluenceConnection which can be used to connect to the ephemeral networks via the specified relay peer.
     */
    EphemeralNetwork.prototype.getRelayConnection = function (relay, peer) {
        var me = this;
        var relayPeer = this._peers.get(relay);
        if (relayPeer === undefined) {
            throw new Error("Relay with peer Id: ".concat(relay, " has not been found in ephemeral network"));
        }
        var connectionCtor = /** @class */ (function (_super) {
            __extends(class_2, _super);
            function class_2() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.relayPeerId = relay;
                return _this;
            }
            class_2.prototype.connect = function (onIncomingParticle) {
                return __awaiter(this, void 0, void 0, function () {
                    var peerId;
                    return __generator(this, function (_a) {
                        peerId = peer.getStatus().peerId;
                        me._peers.set(peerId, {
                            isEphemeral: false,
                            peer: peer,
                            onIncoming: onIncomingParticle,
                            peerId: peerId,
                            connections: new Set([relay]),
                        });
                        relayPeer.connections.add(peerId);
                        return [2 /*return*/];
                    });
                });
            };
            class_2.prototype.disconnect = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var peerId;
                    return __generator(this, function (_a) {
                        peerId = peer.getStatus().peerId;
                        relayPeer.connections.delete(peerId);
                        me._peers.delete(peerId);
                        return [2 /*return*/];
                    });
                });
            };
            class_2.prototype.sendParticle = function (nextPeerIds, particle) {
                return __awaiter(this, void 0, void 0, function () {
                    var peerId;
                    return __generator(this, function (_a) {
                        peerId = peer.getStatus().peerId;
                        me._send(peerId, nextPeerIds, particle);
                        return [2 /*return*/];
                    });
                });
            };
            return class_2;
        }(interfaces_1.FluenceConnection));
        return new connectionCtor();
    };
    EphemeralNetwork.prototype._send = function (from, to, particle) {
        return __awaiter(this, void 0, void 0, function () {
            var peer, to_1, to_1_1, dest, destPeer;
            var e_1, _a;
            return __generator(this, function (_b) {
                loglevel_1.default.info("Sending particle from ".concat(from, ", to ").concat(JSON.stringify(to)));
                peer = this._peers.get(from);
                if (peer === undefined) {
                    loglevel_1.default.error("Peer ".concat(from, "  cannot be found in ephemeral network"));
                    return [2 /*return*/];
                }
                try {
                    for (to_1 = __values(to), to_1_1 = to_1.next(); !to_1_1.done; to_1_1 = to_1.next()) {
                        dest = to_1_1.value;
                        if (!peer.connections.has(dest)) {
                            loglevel_1.default.error("Peer ".concat(from, " has no connection with ").concat(dest));
                            continue;
                        }
                        destPeer = this._peers.get(dest);
                        if (destPeer === undefined) {
                            loglevel_1.default.error("peer ".concat(destPeer, " cannot be found in ephemeral network"));
                            continue;
                        }
                        destPeer.onIncoming(particle);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (to_1_1 && !to_1_1.done && (_a = to_1.return)) _a.call(to_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return [2 /*return*/];
            });
        });
    };
    return EphemeralNetwork;
}());
exports.EphemeralNetwork = EphemeralNetwork;
//# sourceMappingURL=ephemeral.js.map
import * as PeerId from 'peer-id';
export declare class KeyPair {
    /**
     * Key pair in libp2p format. Used for backward compatibility with the current FluencePeer implementation
     */
    Libp2pPeerId: PeerId;
    constructor(libp2pPeerId: PeerId);
    /**
     * Generates new KeyPair from ed25519 private key represented as a 32 byte array
     * @param key - Any sequence of 32 bytes
     * @returns - Promise with the created KeyPair
     */
    static fromEd25519SK(arr: Uint8Array): Promise<KeyPair>;
    /**
     * Generates new KeyPair with a random secret key
     * @returns - Promise with the created KeyPair
     */
    static randomEd25519(): Promise<KeyPair>;
    getPeerId(): string;
    /**
     * @returns 32 byte private key
     */
    toEd25519PrivateKey(): Uint8Array;
    signBytes(data: Uint8Array): Promise<Uint8Array>;
    verify(data: Uint8Array, signature: Uint8Array): Promise<boolean>;
}
export declare const keyPairFromBase64Sk: (sk: string) => Promise<KeyPair>;

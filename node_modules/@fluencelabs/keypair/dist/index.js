"use strict";
/*
 * Copyright 2020 Fluence Labs Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.keyPairFromBase64Sk = exports.KeyPair = void 0;
var PeerId = require("peer-id");
var libp2p_crypto_1 = require("libp2p-crypto");
var js_base64_1 = require("js-base64");
var KeyPair = /** @class */ (function () {
    function KeyPair(libp2pPeerId) {
        this.Libp2pPeerId = libp2pPeerId;
    }
    /**
     * Generates new KeyPair from ed25519 private key represented as a 32 byte array
     * @param key - Any sequence of 32 bytes
     * @returns - Promise with the created KeyPair
     */
    KeyPair.fromEd25519SK = function (arr) {
        return __awaiter(this, void 0, void 0, function () {
            var privateKey, lib2p2Pid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, libp2p_crypto_1.keys.generateKeyPairFromSeed('Ed25519', arr, 256)];
                    case 1:
                        privateKey = _a.sent();
                        return [4 /*yield*/, PeerId.createFromPrivKey(privateKey.bytes)];
                    case 2:
                        lib2p2Pid = _a.sent();
                        return [2 /*return*/, new KeyPair(lib2p2Pid)];
                }
            });
        });
    };
    /**
     * Generates new KeyPair with a random secret key
     * @returns - Promise with the created KeyPair
     */
    KeyPair.randomEd25519 = function () {
        return __awaiter(this, void 0, void 0, function () {
            var lib2p2Pid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, PeerId.create({ keyType: 'Ed25519' })];
                    case 1:
                        lib2p2Pid = _a.sent();
                        return [2 /*return*/, new KeyPair(lib2p2Pid)];
                }
            });
        });
    };
    KeyPair.prototype.getPeerId = function () {
        return this.Libp2pPeerId.toB58String();
    };
    /**
     * @returns 32 byte private key
     */
    KeyPair.prototype.toEd25519PrivateKey = function () {
        return this.Libp2pPeerId.privKey.marshal().subarray(0, 32);
    };
    KeyPair.prototype.signBytes = function (data) {
        return this.Libp2pPeerId.privKey.sign(data);
    };
    KeyPair.prototype.verify = function (data, signature) {
        return this.Libp2pPeerId.privKey.public.verify(data, signature);
    };
    return KeyPair;
}());
exports.KeyPair = KeyPair;
var keyPairFromBase64Sk = function (sk) {
    var arr = (0, js_base64_1.toUint8Array)(sk);
    return KeyPair.fromEd25519SK(arr);
};
exports.keyPairFromBase64Sk = keyPairFromBase64Sk;
//# sourceMappingURL=index.js.map
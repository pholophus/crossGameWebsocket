"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadDefaults = exports.loadWasmFromFileSystem = exports.loadWasmFromNpmPackage = exports.loadWasmFromServer = void 0;
var browser_or_node_1 = require("browser-or-node");
var _1 = require(".");
var buffer_1 = require("buffer");
var bufferToSharedArrayBuffer = function (buffer) {
    var sab = new SharedArrayBuffer(buffer.length);
    var tmp = new Uint8Array(sab);
    tmp.set(buffer, 0);
    return sab;
};
/**
 * Load wasm file from the server. Only works in browsers.
 * The function will try load file into SharedArrayBuffer if the site is cross-origin isolated.
 * Otherwise the return value fallbacks to Buffer which is less performant but is still compatible with FluenceAppService methods.
 * We strongly recommend to set-up cross-origin headers. For more details see: See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer#security_requirements
 * Filename is relative to current origin.
 * @param filePath - path to the wasm file relative to current origin
 * @returns Either SharedArrayBuffer or Buffer with the wasm file
 */
var loadWasmFromServer = function (filePath) { return __awaiter(void 0, void 0, void 0, function () {
    var fullUrl, res, ab, buffer;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!browser_or_node_1.isBrowser) {
                    throw new Error('Files can be loaded from url only in browser environment');
                }
                fullUrl = window.location.origin + '/' + filePath;
                return [4 /*yield*/, fetch(fullUrl)];
            case 1:
                res = _a.sent();
                return [4 /*yield*/, res.arrayBuffer()];
            case 2:
                ab = _a.sent();
                new Uint8Array(ab);
                buffer = buffer_1.Buffer.from(ab);
                // only convert to shared buffers if necessary CORS headers have been set:
                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer#security_requirements
                if (eval('crossOriginIsolated')) {
                    return [2 /*return*/, bufferToSharedArrayBuffer(buffer)];
                }
                return [2 /*return*/, buffer];
        }
    });
}); };
exports.loadWasmFromServer = loadWasmFromServer;
/**
 * Load wasm file from npm package. Only works in nodejs environment.
 * The function returns SharedArrayBuffer compatible with FluenceAppService methods.
 * @param source - object specifying the source of the file. Consist two fields: package name and file path.
 * @returns SharedArrayBuffer with the wasm file
 */
var loadWasmFromNpmPackage = function (source) { return __awaiter(void 0, void 0, void 0, function () {
    var r, path, fs, packagePath, filePath, buffer;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!browser_or_node_1.isNode) {
                    throw new Error('Files can be loaded from npm packages only in nodejs environment');
                }
                r = eval('require');
                path = r('path');
                fs = r('fs').promises;
                packagePath = r.resolve(source.package);
                filePath = path.join(path.dirname(packagePath), source.file);
                return [4 /*yield*/, fs.readFile(filePath)];
            case 1:
                buffer = _a.sent();
                return [2 /*return*/, bufferToSharedArrayBuffer(buffer)];
        }
    });
}); };
exports.loadWasmFromNpmPackage = loadWasmFromNpmPackage;
/**
 * Load wasm file from the file system. Only works in nodejs environment.
 * The functions returns SharedArrayBuffer compatible with FluenceAppService methods.
 * @param filePath - path to the wasm file
 * @returns SharedArrayBuffer with the wasm file
 */
var loadWasmFromFileSystem = function (filePath) { return __awaiter(void 0, void 0, void 0, function () {
    var r, fs, buffer;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!browser_or_node_1.isNode) {
                    throw new Error('Files can be loaded from file system only in nodejs environment');
                }
                r = eval('require');
                fs = r('fs').promises;
                return [4 /*yield*/, fs.readFile(filePath)];
            case 1:
                buffer = _a.sent();
                return [2 /*return*/, bufferToSharedArrayBuffer(buffer)];
        }
    });
}); };
exports.loadWasmFromFileSystem = loadWasmFromFileSystem;
/**
 * Load wasm marine control module and avm module required for marine-js to work from the default source.
 * Both modules are loaded in the format compatible with FluenceAppService methods.
 * If called from the nodejs environment files are loaded from corresponding npm packages.
 * If called inside browser files are loaded from the server.
 * @returns Object with two fields: "marine" and "avm" corresponding to control module and avm module
 */
var loadDefaults = function () { return __awaiter(void 0, void 0, void 0, function () {
    var promises, _a, marine, avm;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                // check if we are running inside the browser and instantiate worker with the corresponding script
                if (browser_or_node_1.isBrowser) {
                    promises = [
                        // force new line
                        (0, exports.loadWasmFromServer)(_1.defaultNames.marine.file),
                        (0, exports.loadWasmFromServer)(_1.defaultNames.avm.file),
                    ];
                }
                else if (browser_or_node_1.isNode) {
                    promises = [
                        // force new line
                        (0, exports.loadWasmFromNpmPackage)(_1.defaultNames.marine),
                        (0, exports.loadWasmFromNpmPackage)(_1.defaultNames.avm),
                    ];
                }
                else {
                    throw new Error('Unknown environment');
                }
                return [4 /*yield*/, Promise.all(promises)];
            case 1:
                _a = _b.sent(), marine = _a[0], avm = _a[1];
                return [2 /*return*/, {
                        marine: marine,
                        avm: avm,
                    }];
        }
    });
}); };
exports.loadDefaults = loadDefaults;
//# sourceMappingURL=loadWasmHelpers.js.map
import { Buffer } from 'buffer';
/**
 * Load wasm file from the server. Only works in browsers.
 * The function will try load file into SharedArrayBuffer if the site is cross-origin isolated.
 * Otherwise the return value fallbacks to Buffer which is less performant but is still compatible with FluenceAppService methods.
 * We strongly recommend to set-up cross-origin headers. For more details see: See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer#security_requirements
 * Filename is relative to current origin.
 * @param filePath - path to the wasm file relative to current origin
 * @returns Either SharedArrayBuffer or Buffer with the wasm file
 */
export declare const loadWasmFromServer: (filePath: string) => Promise<SharedArrayBuffer | Buffer>;
/**
 * Load wasm file from npm package. Only works in nodejs environment.
 * The function returns SharedArrayBuffer compatible with FluenceAppService methods.
 * @param source - object specifying the source of the file. Consist two fields: package name and file path.
 * @returns SharedArrayBuffer with the wasm file
 */
export declare const loadWasmFromNpmPackage: (source: {
    package: string;
    file: string;
}) => Promise<SharedArrayBuffer>;
/**
 * Load wasm file from the file system. Only works in nodejs environment.
 * The functions returns SharedArrayBuffer compatible with FluenceAppService methods.
 * @param filePath - path to the wasm file
 * @returns SharedArrayBuffer with the wasm file
 */
export declare const loadWasmFromFileSystem: (filePath: string) => Promise<SharedArrayBuffer>;
/**
 * Load wasm marine control module and avm module required for marine-js to work from the default source.
 * Both modules are loaded in the format compatible with FluenceAppService methods.
 * If called from the nodejs environment files are loaded from corresponding npm packages.
 * If called inside browser files are loaded from the server.
 * @returns Object with two fields: "marine" and "avm" corresponding to control module and avm module
 */
export declare const loadDefaults: () => Promise<{
    marine: SharedArrayBuffer | Buffer;
    avm: SharedArrayBuffer | Buffer;
}>;

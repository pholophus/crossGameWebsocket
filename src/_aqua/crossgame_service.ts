/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.7.5-342
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v3';


// Services

export interface ICrossGameServiceDef {
    buyWeapon: (walletAddress: string, weapon: string, callParams: CallParams<'walletAddress' | 'weapon'>) => boolean | Promise<boolean>;
    getCurrentWeapon: (walletAddress: string, callParams: CallParams<'walletAddress'>) => string | Promise<string>;
    getInventory: (walletAddress: string, callParams: CallParams<'walletAddress'>) => { length: number; weapon: string[]; } | Promise<{ length: number; weapon: string[]; }>;
    readMetadata: (contractAddress: string, tokenId: string, callParams: CallParams<'contractAddress' | 'tokenId'>) => string | Promise<string>;
    registration: (walletAddress: string, callParams: CallParams<'walletAddress'>) => void | Promise<void>;
    updateCharacter: (walletAddress: string, weapon: string, callParams: CallParams<'walletAddress' | 'weapon'>) => void | Promise<void>;
}
export function registerICrossGameService(service: ICrossGameServiceDef): void;
export function registerICrossGameService(serviceId: string, service: ICrossGameServiceDef): void;
export function registerICrossGameService(peer: FluencePeer, service: ICrossGameServiceDef): void;
export function registerICrossGameService(peer: FluencePeer, serviceId: string, service: ICrossGameServiceDef): void;
       

export function registerICrossGameService(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "crossgameservice",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "buyWeapon" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "walletAddress" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "weapon" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    ]
                }
            },
            "getCurrentWeapon" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "walletAddress" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            },
            "getInventory" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "walletAddress" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "Weapons",
                            "fields" : {
                                "length" : {
                                    "tag" : "scalar",
                                    "name" : "u32"
                                },
                                "weapon" : {
                                    "tag" : "array",
                                    "type" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        }
                    ]
                }
            },
            "readMetadata" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "contractAddress" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "tokenId" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            },
            "registration" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "walletAddress" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "nil"
                }
            },
            "updateCharacter" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "walletAddress" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "weapon" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "nil"
                }
            }
        }
    }
}
    );
}
      
// Functions
 

export function register(
    walletAddress: string,
    config?: {ttl?: number}
): Promise<void>;

export function register(
    peer: FluencePeer,
    walletAddress: string,
    config?: {ttl?: number}
): Promise<void>;

export function register(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "walletAddress") [] walletAddress)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (call "12D3KooWDUszU2NeWyUVjCXhGEt1MoZrhvdmaQQwtZUriuGN1jTr" ("op" "noop") [])
                      )
                      (xor
                       (seq
                        (seq
                         (call "12D3KooWKkTd9Wkw7jxBbXWNRgRw9qaxmuK2PJW5bv3beHSKueLt" ("crossgameservice" "registration") [walletAddress])
                         (call "12D3KooWDUszU2NeWyUVjCXhGEt1MoZrhvdmaQQwtZUriuGN1jTr" ("op" "noop") [])
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (seq
                        (seq
                         (call "12D3KooWDUszU2NeWyUVjCXhGEt1MoZrhvdmaQQwtZUriuGN1jTr" ("op" "noop") [])
                         (call -relay- ("op" "noop") [])
                        )
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "register",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "walletAddress" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "nil"
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function getCurrentWeapon(
    walletAddress: string,
    config?: {ttl?: number}
): Promise<string[]>;

export function getCurrentWeapon(
    peer: FluencePeer,
    walletAddress: string,
    config?: {ttl?: number}
): Promise<string[]>;

export function getCurrentWeapon(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "walletAddress") [] walletAddress)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (call "12D3KooWDUszU2NeWyUVjCXhGEt1MoZrhvdmaQQwtZUriuGN1jTr" ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (call "12D3KooWKkTd9Wkw7jxBbXWNRgRw9qaxmuK2PJW5bv3beHSKueLt" ("crossgameservice" "getCurrentWeapon") [walletAddress] $currentWeapon)
                          (call "12D3KooWDUszU2NeWyUVjCXhGEt1MoZrhvdmaQQwtZUriuGN1jTr" ("op" "noop") [])
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (call "12D3KooWDUszU2NeWyUVjCXhGEt1MoZrhvdmaQQwtZUriuGN1jTr" ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [$currentWeapon])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "getCurrentWeapon",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "walletAddress" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function getInventoryWeapon(
    walletAddress: string,
    config?: {ttl?: number}
): Promise<string[]>;

export function getInventoryWeapon(
    peer: FluencePeer,
    walletAddress: string,
    config?: {ttl?: number}
): Promise<string[]>;

export function getInventoryWeapon(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "walletAddress") [] walletAddress)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (call "12D3KooWDUszU2NeWyUVjCXhGEt1MoZrhvdmaQQwtZUriuGN1jTr" ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (call "12D3KooWKkTd9Wkw7jxBbXWNRgRw9qaxmuK2PJW5bv3beHSKueLt" ("crossgameservice" "getInventory") [walletAddress] weapons)
                             (par
                              (fold weapons.$.weapon! weapon-0
                               (par
                                (ap weapon-0 $listNFTs)
                                (next weapon-0)
                               )
                              )
                              (null)
                             )
                            )
                            (ap weapons.$.length! ap-lambda)
                           )
                           (call "12D3KooWKkTd9Wkw7jxBbXWNRgRw9qaxmuK2PJW5bv3beHSKueLt" ("op" "noop") [$listNFTs.$.[ap-lambda]!])
                          )
                          (call "12D3KooWDUszU2NeWyUVjCXhGEt1MoZrhvdmaQQwtZUriuGN1jTr" ("op" "noop") [])
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (call "12D3KooWDUszU2NeWyUVjCXhGEt1MoZrhvdmaQQwtZUriuGN1jTr" ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [$listNFTs])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "getInventoryWeapon",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "walletAddress" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function updateCharacter(
    walletAddress: string,
    weapon: string,
    config?: {ttl?: number}
): Promise<void>;

export function updateCharacter(
    peer: FluencePeer,
    walletAddress: string,
    weapon: string,
    config?: {ttl?: number}
): Promise<void>;

export function updateCharacter(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "walletAddress") [] walletAddress)
                         )
                         (call %init_peer_id% ("getDataSrv" "weapon") [] weapon)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (call "12D3KooWDUszU2NeWyUVjCXhGEt1MoZrhvdmaQQwtZUriuGN1jTr" ("op" "noop") [])
                      )
                      (xor
                       (seq
                        (seq
                         (call "12D3KooWKkTd9Wkw7jxBbXWNRgRw9qaxmuK2PJW5bv3beHSKueLt" ("crossgameservice" "updateCharacter") [walletAddress weapon])
                         (call "12D3KooWDUszU2NeWyUVjCXhGEt1MoZrhvdmaQQwtZUriuGN1jTr" ("op" "noop") [])
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (seq
                        (seq
                         (call "12D3KooWDUszU2NeWyUVjCXhGEt1MoZrhvdmaQQwtZUriuGN1jTr" ("op" "noop") [])
                         (call -relay- ("op" "noop") [])
                        )
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "updateCharacter",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "walletAddress" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "weapon" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "nil"
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

export type GetShopWeaponListArgNfts = { length: number; nft: { contractAddress: string; tokenId: string; }[]; } 

export function getShopWeaponList(
    nfts: GetShopWeaponListArgNfts,
    config?: {ttl?: number}
): Promise<string[]>;

export function getShopWeaponList(
    peer: FluencePeer,
    nfts: GetShopWeaponListArgNfts,
    config?: {ttl?: number}
): Promise<string[]>;

export function getShopWeaponList(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "nfts") [] nfts)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (call "12D3KooWDUszU2NeWyUVjCXhGEt1MoZrhvdmaQQwtZUriuGN1jTr" ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (seq
                           (par
                            (fold nfts.$.nft! nft-0
                             (par
                              (call "12D3KooWKkTd9Wkw7jxBbXWNRgRw9qaxmuK2PJW5bv3beHSKueLt" ("crossgameservice" "readMetadata") [nft-0.$.contractAddress! nft-0.$.tokenId!] $weaponURL)
                              (next nft-0)
                             )
                            )
                            (null)
                           )
                           (par
                            (seq
                             (ap nfts.$.length! ap-lambda)
                             (call "12D3KooWKkTd9Wkw7jxBbXWNRgRw9qaxmuK2PJW5bv3beHSKueLt" ("op" "noop") [$weaponURL.$.[ap-lambda]!])
                            )
                            (call "12D3KooWKkTd9Wkw7jxBbXWNRgRw9qaxmuK2PJW5bv3beHSKueLt" ("peer" "timeout") [15000 "timeout"])
                           )
                          )
                          (call "12D3KooWDUszU2NeWyUVjCXhGEt1MoZrhvdmaQQwtZUriuGN1jTr" ("op" "noop") [])
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (call "12D3KooWDUszU2NeWyUVjCXhGEt1MoZrhvdmaQQwtZUriuGN1jTr" ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [$weaponURL])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "getShopWeaponList",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "nfts" : {
                    "tag" : "struct",
                    "name" : "NFTs",
                    "fields" : {
                        "length" : {
                            "tag" : "scalar",
                            "name" : "u32"
                        },
                        "nft" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "NFTDetail",
                                "fields" : {
                                    "contractAddress" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "tokenId" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function buyWeapon(
    walletAddress: string,
    weapon: string,
    config?: {ttl?: number}
): Promise<boolean[]>;

export function buyWeapon(
    peer: FluencePeer,
    walletAddress: string,
    weapon: string,
    config?: {ttl?: number}
): Promise<boolean[]>;

export function buyWeapon(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "walletAddress") [] walletAddress)
                          )
                          (call %init_peer_id% ("getDataSrv" "weapon") [] weapon)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (call "12D3KooWDUszU2NeWyUVjCXhGEt1MoZrhvdmaQQwtZUriuGN1jTr" ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (seq
                           (call "12D3KooWKkTd9Wkw7jxBbXWNRgRw9qaxmuK2PJW5bv3beHSKueLt" ("crossgameservice" "buyWeapon") [walletAddress weapon] statusBuy)
                           (ap statusBuy $status)
                          )
                          (call "12D3KooWDUszU2NeWyUVjCXhGEt1MoZrhvdmaQQwtZUriuGN1jTr" ("op" "noop") [])
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (call "12D3KooWDUszU2NeWyUVjCXhGEt1MoZrhvdmaQQwtZUriuGN1jTr" ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [$status])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "buyWeapon",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "walletAddress" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "weapon" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "bool"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
